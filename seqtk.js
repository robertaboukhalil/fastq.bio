// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 22768;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function ___wait() {}

   

   



   

  var _llvm_pow_f64=Math_pow;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vii": nullFunc_vii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_vii": invoke_vii, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall3": ___syscall3, "___syscall4": ___syscall4, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "___wait": ___wait, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_pow_f64": _llvm_pow_f64, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vii=env.nullFunc_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vii=env.invoke_vii;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall3=env.___syscall3;
  var ___syscall4=env.___syscall4;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var ___wait=env.___wait;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _stk_reg_read($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 28|0;
 $12 = sp + 4|0;
 $2 = $0;
 $14 = (_kh_init_reg()|0);
 $3 = $14;
 $15 = $2;
 $16 = (_strcmp($15,13774)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $2;
  $19 = (_gzopen($18,13776)|0);
  $23 = $19;
 } else {
  $20 = HEAP32[2309]|0;
  $21 = (_fileno($20)|0);
  $22 = (_gzdopen($21,13776)|0);
  $23 = $22;
 }
 $4 = $23;
 $24 = $4;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $1 = 0;
  $163 = $1;
  STACKTOP = sp;return ($163|0);
 }
 $26 = $4;
 $27 = (_ks_init($26)|0);
 $5 = $27;
 $28 = (_calloc(1,12)|0);
 $7 = $28;
 while(1) {
  $29 = $5;
  $30 = $7;
  $31 = (_ks_getuntil($29,0,$30,$6)|0);
  $32 = ($31|0)>=(0);
  if (!($32)) {
   break;
  }
  $8 = -1;
  $9 = -1;
  $33 = $3;
  $34 = $7;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_kh_get_reg($33,$36)|0);
  $11 = $37;
  $38 = $11;
  $39 = $3;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = $7;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (___strdup($44)|0);
   $13 = $45;
   $46 = $3;
   $47 = $13;
   $48 = (_kh_put_reg($46,$47,$12)|0);
   $11 = $48;
   $49 = $3;
   $50 = ((($49)) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $11;
   $53 = (($51) + (($52*12)|0)|0);
   ;HEAP32[$53>>2]=0|0;HEAP32[$53+4>>2]=0|0;HEAP32[$53+8>>2]=0|0;
  }
  $54 = $3;
  $55 = ((($54)) + 24|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $11;
  $58 = (($56) + (($57*12)|0)|0);
  $10 = $58;
  $59 = HEAP32[$6>>2]|0;
  $60 = ($59|0)!=(10);
  if ($60) {
   $61 = $5;
   $62 = $7;
   $63 = (_ks_getuntil($61,0,$62,$6)|0);
   $64 = ($63|0)>(0);
   if ($64) {
    $65 = $7;
    $66 = ((($65)) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $70 = (_isdigit($69)|0);
    $71 = ($70|0)!=(0);
    if ($71) {
     $72 = $7;
     $73 = ((($72)) + 8|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (_atoi($74)|0);
     $8 = $75;
     $76 = HEAP32[$6>>2]|0;
     $77 = ($76|0)!=(10);
     if ($77) {
      $78 = $5;
      $79 = $7;
      $80 = (_ks_getuntil($78,0,$79,$6)|0);
      $81 = ($80|0)>(0);
      if ($81) {
       $82 = $7;
       $83 = ((($82)) + 8|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = HEAP8[$84>>0]|0;
       $86 = $85 << 24 >> 24;
       $87 = (_isdigit($86)|0);
       $88 = ($87|0)!=(0);
       if ($88) {
        $89 = $7;
        $90 = ((($89)) + 8|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = (_atoi($91)|0);
        $9 = $92;
        $93 = $9;
        $94 = ($93|0)<(0);
        $$ = $94 ? -1 : $92;
        $9 = $$;
       }
      }
     }
    }
   }
  }
  $95 = HEAP32[$6>>2]|0;
  $96 = ($95|0)!=(10);
  if ($96) {
   while(1) {
    $97 = $5;
    $98 = (_ks_getc($97)|0);
    HEAP32[$6>>2] = $98;
    $99 = ($98|0)>(0);
    $100 = HEAP32[$6>>2]|0;
    $101 = ($100|0)!=(10);
    $102 = $99 ? $101 : 0;
    if (!($102)) {
     break;
    }
   }
  }
  $103 = $9;
  $104 = ($103|0)<(0);
  $105 = $8;
  $106 = ($105|0)>(0);
  $or$cond = $104 & $106;
  if ($or$cond) {
   $107 = $8;
   $9 = $107;
   $108 = $8;
   $109 = (($108) - 1)|0;
   $8 = $109;
  }
  $110 = $8;
  $111 = ($110|0)<(0);
  if ($111) {
   $8 = 0;
   $9 = 2147483647;
  }
  $112 = $10;
  $113 = HEAP32[$112>>2]|0;
  $114 = $10;
  $115 = ((($114)) + 4|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($113|0)==($116|0);
  if ($117) {
   $118 = $10;
   $119 = ((($118)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($120|0)!=(0);
   if ($121) {
    $122 = $10;
    $123 = ((($122)) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $124 << 1;
    $128 = $125;
   } else {
    $128 = 4;
   }
   $126 = $10;
   $127 = ((($126)) + 4|0);
   HEAP32[$127>>2] = $128;
   $129 = $10;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $10;
   $133 = ((($132)) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $134<<3;
   $136 = (_realloc($131,$135)|0);
   $137 = $10;
   $138 = ((($137)) + 8|0);
   HEAP32[$138>>2] = $136;
  }
  $139 = $8;
  $140 = ($139|0)<(0);
  $140 << 31 >> 31;
  $141 = $9;
  $142 = ($141|0)<(0);
  $143 = $142 << 31 >> 31;
  $144 = $139 | $143;
  $145 = $10;
  $146 = ((($145)) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $10;
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + 1)|0;
  HEAP32[$148>>2] = $150;
  $151 = (($147) + ($149<<3)|0);
  $152 = $151;
  $153 = $152;
  HEAP32[$153>>2] = $141;
  $154 = (($152) + 4)|0;
  $155 = $154;
  HEAP32[$155>>2] = $144;
 }
 $156 = $5;
 _ks_destroy($156);
 $157 = $4;
 (_gzclose($157)|0);
 $158 = $7;
 $159 = ((($158)) + 8|0);
 $160 = HEAP32[$159>>2]|0;
 _free($160);
 $161 = $7;
 _free($161);
 $162 = $3;
 $1 = $162;
 $163 = $1;
 STACKTOP = sp;return ($163|0);
}
function _ks_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_calloc(1,20)|0);
 $2 = $3;
 $4 = $1;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = $4;
 $7 = (_malloc(16384)|0);
 $8 = $2;
 HEAP32[$8>>2] = $7;
 $9 = $2;
 STACKTOP = sp;return ($9|0);
}
function _ks_getuntil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (_ks_getuntil2($8,$9,$10,$11,0)|0);
 STACKTOP = sp;return ($12|0);
}
function _kh_get_reg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $2 = 0;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 1)|0;
 $9 = $15;
 $16 = $4;
 $17 = (___ac_X31_hash_string($16)|0);
 $6 = $17;
 $18 = $6;
 $19 = $9;
 $20 = $18 & $19;
 $7 = $20;
 $21 = $6;
 $22 = $21 >>> 3;
 $23 = $6;
 $24 = $23 << 3;
 $25 = $22 ^ $24;
 $26 = $25 | 1;
 $27 = $9;
 $28 = $26 & $27;
 $5 = $28;
 $29 = $7;
 $8 = $29;
 while(1) {
  $30 = $3;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $7;
  $34 = $33 >>> 4;
  $35 = (($32) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $7;
  $38 = $37 & 15;
  $39 = $38 << 1;
  $40 = $36 >>> $39;
  $41 = $40 & 2;
  $42 = ($41|0)!=(0);
  if ($42) {
   break;
  }
  $43 = $3;
  $44 = ((($43)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $7;
  $47 = $46 >>> 4;
  $48 = (($45) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $7;
  $51 = $50 & 15;
  $52 = $51 << 1;
  $53 = $49 >>> $52;
  $54 = $53 & 1;
  $55 = ($54|0)!=(0);
  if (!($55)) {
   $56 = $3;
   $57 = ((($56)) + 20|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $7;
   $60 = (($58) + ($59<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $4;
   $63 = (_strcmp($61,$62)|0);
   $64 = ($63|0)==(0);
   $65 = $64 ^ 1;
   if (!($65)) {
    break;
   }
  }
  $66 = $7;
  $67 = $5;
  $68 = (($66) + ($67))|0;
  $69 = $9;
  $70 = $68 & $69;
  $7 = $70;
  $71 = $7;
  $72 = $8;
  $73 = ($71|0)==($72|0);
  if ($73) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $74 = $3;
  $75 = HEAP32[$74>>2]|0;
  $2 = $75;
  $93 = $2;
  STACKTOP = sp;return ($93|0);
 }
 $76 = $3;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $7;
 $80 = $79 >>> 4;
 $81 = (($78) + ($80<<2)|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $7;
 $84 = $83 & 15;
 $85 = $84 << 1;
 $86 = $82 >>> $85;
 $87 = $86 & 3;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $92 = $90;
 } else {
  $91 = $7;
  $92 = $91;
 }
 $2 = $92;
 $93 = $2;
 STACKTOP = sp;return ($93|0);
}
function _kh_put_reg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $13 = $3;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15>>>0)>=($18>>>0);
 do {
  if ($19) {
   $20 = $3;
   $21 = HEAP32[$20>>2]|0;
   $22 = $3;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 << 1;
   $26 = ($21>>>0)>($25>>>0);
   $27 = $3;
   $28 = $3;
   $29 = HEAP32[$28>>2]|0;
   if ($26) {
    $30 = (($29) - 1)|0;
    _kh_resize_reg($27,$30);
    break;
   } else {
    $31 = (($29) + 1)|0;
    _kh_resize_reg($27,$31);
    break;
   }
  }
 } while(0);
 $32 = $3;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) - 1)|0;
 $12 = $34;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $10 = $36;
 $6 = $36;
 $37 = $4;
 $38 = (___ac_X31_hash_string($37)|0);
 $8 = $38;
 $39 = $8;
 $40 = $12;
 $41 = $39 & $40;
 $9 = $41;
 $42 = $3;
 $43 = ((($42)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $9;
 $46 = $45 >>> 4;
 $47 = (($44) + ($46<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $9;
 $50 = $49 & 15;
 $51 = $50 << 1;
 $52 = $48 >>> $51;
 $53 = $52 & 2;
 $54 = ($53|0)!=(0);
 do {
  if ($54) {
   $55 = $9;
   $6 = $55;
  } else {
   $56 = $8;
   $57 = $56 >>> 3;
   $58 = $8;
   $59 = $58 << 3;
   $60 = $57 ^ $59;
   $61 = $60 | 1;
   $62 = $12;
   $63 = $61 & $62;
   $7 = $63;
   $64 = $9;
   $11 = $64;
   while(1) {
    $65 = $3;
    $66 = ((($65)) + 16|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $9;
    $69 = $68 >>> 4;
    $70 = (($67) + ($69<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $9;
    $73 = $72 & 15;
    $74 = $73 << 1;
    $75 = $71 >>> $74;
    $76 = $75 & 2;
    $77 = ($76|0)!=(0);
    if ($77) {
     break;
    }
    $78 = $3;
    $79 = ((($78)) + 16|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $9;
    $82 = $81 >>> 4;
    $83 = (($80) + ($82<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $9;
    $86 = $85 & 15;
    $87 = $86 << 1;
    $88 = $84 >>> $87;
    $89 = $88 & 1;
    $90 = ($89|0)!=(0);
    if (!($90)) {
     $91 = $3;
     $92 = ((($91)) + 20|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $9;
     $95 = (($93) + ($94<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $4;
     $98 = (_strcmp($96,$97)|0);
     $99 = ($98|0)==(0);
     $100 = $99 ^ 1;
     if (!($100)) {
      break;
     }
    }
    $101 = $3;
    $102 = ((($101)) + 16|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $9;
    $105 = $104 >>> 4;
    $106 = (($103) + ($105<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $9;
    $109 = $108 & 15;
    $110 = $109 << 1;
    $111 = $107 >>> $110;
    $112 = $111 & 1;
    $113 = ($112|0)!=(0);
    if ($113) {
     $114 = $9;
     $10 = $114;
    }
    $115 = $9;
    $116 = $7;
    $117 = (($115) + ($116))|0;
    $118 = $12;
    $119 = $117 & $118;
    $9 = $119;
    $120 = $9;
    $121 = $11;
    $122 = ($120|0)==($121|0);
    if ($122) {
     label = 14;
     break;
    }
   }
   if ((label|0) == 14) {
    $123 = $10;
    $6 = $123;
   }
   $124 = $6;
   $125 = $3;
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if ($127) {
    $128 = $3;
    $129 = ((($128)) + 16|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $9;
    $132 = $131 >>> 4;
    $133 = (($130) + ($132<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $9;
    $136 = $135 & 15;
    $137 = $136 << 1;
    $138 = $134 >>> $137;
    $139 = $138 & 2;
    $140 = ($139|0)!=(0);
    if ($140) {
     $141 = $10;
     $142 = $3;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($141|0)!=($143|0);
     if ($144) {
      $145 = $10;
      $6 = $145;
      break;
     }
    }
    $146 = $9;
    $6 = $146;
   }
  }
 } while(0);
 $147 = $3;
 $148 = ((($147)) + 16|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = $6;
 $151 = $150 >>> 4;
 $152 = (($149) + ($151<<2)|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $6;
 $155 = $154 & 15;
 $156 = $155 << 1;
 $157 = $153 >>> $156;
 $158 = $157 & 2;
 $159 = ($158|0)!=(0);
 if ($159) {
  $160 = $4;
  $161 = $3;
  $162 = ((($161)) + 20|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $6;
  $165 = (($163) + ($164<<2)|0);
  HEAP32[$165>>2] = $160;
  $166 = $6;
  $167 = $166 & 15;
  $168 = $167 << 1;
  $169 = 3 << $168;
  $170 = $169 ^ -1;
  $171 = $3;
  $172 = ((($171)) + 16|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $6;
  $175 = $174 >>> 4;
  $176 = (($173) + ($175<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $177 & $170;
  HEAP32[$176>>2] = $178;
  $179 = $3;
  $180 = ((($179)) + 4|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + 1)|0;
  HEAP32[$180>>2] = $182;
  $183 = $3;
  $184 = ((($183)) + 8|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = (($185) + 1)|0;
  HEAP32[$184>>2] = $186;
  $187 = $5;
  HEAP32[$187>>2] = 1;
  $226 = $6;
  STACKTOP = sp;return ($226|0);
 }
 $188 = $3;
 $189 = ((($188)) + 16|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = $6;
 $192 = $191 >>> 4;
 $193 = (($190) + ($192<<2)|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $6;
 $196 = $195 & 15;
 $197 = $196 << 1;
 $198 = $194 >>> $197;
 $199 = $198 & 1;
 $200 = ($199|0)!=(0);
 if ($200) {
  $201 = $4;
  $202 = $3;
  $203 = ((($202)) + 20|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $6;
  $206 = (($204) + ($205<<2)|0);
  HEAP32[$206>>2] = $201;
  $207 = $6;
  $208 = $207 & 15;
  $209 = $208 << 1;
  $210 = 3 << $209;
  $211 = $210 ^ -1;
  $212 = $3;
  $213 = ((($212)) + 16|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $6;
  $216 = $215 >>> 4;
  $217 = (($214) + ($216<<2)|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $218 & $211;
  HEAP32[$217>>2] = $219;
  $220 = $3;
  $221 = ((($220)) + 4|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (($222) + 1)|0;
  HEAP32[$221>>2] = $223;
  $224 = $5;
  HEAP32[$224>>2] = 2;
  $226 = $6;
  STACKTOP = sp;return ($226|0);
 } else {
  $225 = $5;
  HEAP32[$225>>2] = 0;
  $226 = $6;
  STACKTOP = sp;return ($226|0);
 }
 return (0)|0;
}
function _ks_getc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(0);
 if ($6) {
  $1 = -3;
  $55 = $1;
  STACKTOP = sp;return ($55|0);
 }
 $7 = $2;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)>=($16|0);
  if ($17) {
   $1 = -1;
   $55 = $1;
   STACKTOP = sp;return ($55|0);
  }
 }
 $18 = $2;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)>=($23|0);
 if ($24) {
  $25 = $2;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = 0;
  $27 = $2;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $2;
  $31 = HEAP32[$30>>2]|0;
  $32 = (_gzread($29,$31,16384)|0);
  $33 = $2;
  $34 = ((($33)) + 8|0);
  HEAP32[$34>>2] = $32;
  $35 = $2;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0);
  $39 = $2;
  if ($38) {
   $40 = ((($39)) + 12|0);
   HEAP32[$40>>2] = 1;
   $1 = -1;
   $55 = $1;
   STACKTOP = sp;return ($55|0);
  }
  $41 = ((($39)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)<(0);
  if ($43) {
   $44 = $2;
   $45 = ((($44)) + 12|0);
   HEAP32[$45>>2] = 1;
   $1 = -3;
   $55 = $1;
   STACKTOP = sp;return ($55|0);
  }
 }
 $46 = $2;
 $47 = HEAP32[$46>>2]|0;
 $48 = $2;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + 1)|0;
 HEAP32[$49>>2] = $51;
 $52 = (($47) + ($50)|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $1 = $54;
 $55 = $1;
 STACKTOP = sp;return ($55|0);
}
function _ks_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $1;
 _free($6);
 STACKTOP = sp;return;
}
function _stk_comp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink14 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0;
 var $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer28 = sp + 48|0;
 $vararg_buffer24 = sp + 40|0;
 $vararg_buffer19 = sp + 24|0;
 $vararg_buffer17 = sp + 16|0;
 $vararg_buffer15 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 160|0;
 $24 = sp + 68|0;
 $3 = $0;
 $4 = $1;
 $9 = 0;
 $10 = 0;
 L1: while(1) {
  $29 = $3;
  $30 = $4;
  $31 = (_getopt($29,$30,14306)|0);
  $8 = $31;
  $32 = ($31|0)>=(0);
  if (!($32)) {
   break;
  }
  $33 = $8;
  switch ($33|0) {
  case 117:  {
   $9 = 1;
   continue L1;
   break;
  }
  case 114:  {
   $34 = HEAP32[5168]|0;
   $35 = (_stk_reg_read($34)|0);
   $10 = $35;
   continue L1;
   break;
  }
  default: {
   continue L1;
  }
  }
 }
 $36 = $3;
 $37 = HEAP32[2406]|0;
 $38 = ($36|0)==($37|0);
 if ($38) {
  $39 = HEAP32[2309]|0;
  $40 = (_fileno($39)|0);
  $41 = (_isatty($40)|0);
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = HEAP32[2374]|0;
   (_fprintf($43,14310,$vararg_buffer)|0);
   $44 = HEAP32[2374]|0;
   (_fprintf($44,14356,$vararg_buffer15)|0);
   $2 = 1;
   $268 = $2;
   STACKTOP = sp;return ($268|0);
  }
 }
 $45 = HEAP32[2406]|0;
 $46 = $3;
 $47 = ($45|0)<($46|0);
 if ($47) {
  $48 = $4;
  $49 = HEAP32[2406]|0;
  $50 = (($48) + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (_strcmp($51,13774)|0);
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = $4;
   $55 = HEAP32[2406]|0;
   $56 = (($54) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (_gzopen($57,13776)|0);
   $62 = $58;
  } else {
   label = 12;
  }
 } else {
  label = 12;
 }
 if ((label|0) == 12) {
  $59 = HEAP32[2309]|0;
  $60 = (_fileno($59)|0);
  $61 = (_gzdopen($60,13776)|0);
  $62 = $61;
 }
 $5 = $62;
 $63 = $5;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $65 = HEAP32[2374]|0;
  HEAP32[$vararg_buffer17>>2] = 14484;
  (_fprintf($65,14437,$vararg_buffer17)|0);
  $2 = 1;
  $268 = $2;
  STACKTOP = sp;return ($268|0);
 }
 $66 = $5;
 $67 = (_kseq_init($66)|0);
 $6 = $67;
 $68 = ((($11)) + 4|0);
 HEAP32[$68>>2] = 1;
 HEAP32[$11>>2] = 1;
 $69 = (_calloc(1,8)|0);
 $70 = ((($11)) + 8|0);
 HEAP32[$70>>2] = $69;
 while(1) {
  $71 = $6;
  $72 = (_kseq_read($71)|0);
  $7 = $72;
  $73 = ($72|0)>=(0);
  if (!($73)) {
   break;
  }
  $14 = 0;
  $74 = $10;
  $75 = ($74|0)!=(0|0);
  if ($75) {
   $76 = $10;
   $77 = $6;
   $78 = ((($77)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (_kh_get_reg($76,$79)|0);
   $15 = $80;
   $81 = $15;
   $82 = $10;
   $83 = HEAP32[$82>>2]|0;
   $84 = ($81|0)!=($83|0);
   if ($84) {
    $85 = $10;
    $86 = ((($85)) + 24|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $15;
    $89 = (($87) + (($88*12)|0)|0);
    $14 = $89;
   }
  } else {
   $14 = $11;
   $90 = $7;
   $91 = ($90|0)<(0);
   $92 = $91 << 31 >> 31;
   $93 = ((($11)) + 8|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $94;
   $96 = $95;
   HEAP32[$96>>2] = $90;
   $97 = (($95) + 4)|0;
   $98 = $97;
   HEAP32[$98>>2] = $92;
  }
  $13 = 0;
  while(1) {
   $99 = $14;
   $100 = ($99|0)!=(0|0);
   if (!($100)) {
    break;
   }
   $101 = $13;
   $102 = $14;
   $103 = HEAP32[$102>>2]|0;
   $104 = ($101|0)<($103|0);
   if (!($104)) {
    break;
   }
   $105 = $14;
   $106 = ((($105)) + 8|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $13;
   $109 = (($107) + ($108<<3)|0);
   $110 = $109;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   $113 = (($110) + 4)|0;
   $114 = $113;
   $115 = HEAP32[$114>>2]|0;
   $16 = $115;
   $116 = $14;
   $117 = ((($116)) + 8|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $13;
   $120 = (($118) + ($119<<3)|0);
   $121 = $120;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + 4)|0;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $17 = $123;
   $127 = $16;
   $128 = ($127|0)>(0);
   if ($128) {
    $129 = $6;
    $130 = ((($129)) + 24|0);
    $131 = ((($130)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $16;
    $134 = (($133) - 1)|0;
    $135 = (($132) + ($134)|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = $136 << 24 >> 24;
    $18 = $137;
    $138 = $18;
    $139 = (13778 + ($138)|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $19 = $141;
    $142 = $19;
    $143 = (8 + ($142<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $20 = $144;
   } else {
    $18 = 97;
    $19 = -1;
    $20 = 0;
   }
   $145 = $6;
   $146 = ((($145)) + 24|0);
   $147 = ((($146)) + 8|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $16;
   $150 = (($148) + ($149)|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151 << 24 >> 24;
   $21 = $152;
   $153 = $21;
   $154 = (13778 + ($153)|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $22 = $156;
   $157 = $22;
   $158 = (8 + ($157<<2)|0);
   $159 = HEAP32[$158>>2]|0;
   $23 = $159;
   dest=$24; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $160 = $16;
   $12 = $160;
   while(1) {
    $161 = $12;
    $162 = $17;
    $163 = ($161|0)<($162|0);
    if (!($163)) {
     break;
    }
    $25 = 0;
    $164 = $21;
    $26 = $164;
    $165 = $22;
    $27 = $165;
    $166 = $23;
    $28 = $166;
    $167 = $6;
    $168 = ((($167)) + 24|0);
    $169 = ((($168)) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $12;
    $172 = (($171) + 1)|0;
    $173 = (($170) + ($172)|0);
    $174 = HEAP8[$173>>0]|0;
    $175 = $174 << 24 >> 24;
    $21 = $175;
    $176 = $21;
    $177 = (13778 + ($176)|0);
    $178 = HEAP8[$177>>0]|0;
    $179 = $178&255;
    $22 = $179;
    $180 = $22;
    $181 = (8 + ($180<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $23 = $182;
    $183 = $27;
    $184 = ($183|0)==(2);
    $185 = $27;
    $186 = ($185|0)==(10);
    $or$cond = $184 | $186;
    if ($or$cond) {
     $187 = $22;
     $188 = ($187|0)==(4);
     $189 = $22;
     $190 = ($189|0)==(5);
     $or$cond3 = $188 | $190;
     if ($or$cond3) {
      $25 = 1;
     }
    } else {
     $191 = $27;
     $192 = ($191|0)==(4);
     $193 = $27;
     $194 = ($193|0)==(5);
     $or$cond5 = $192 | $194;
     if ($or$cond5) {
      $195 = $19;
      $196 = ($195|0)==(2);
      $197 = $19;
      $198 = ($197|0)==(10);
      $or$cond7 = $196 | $198;
      if ($or$cond7) {
       $25 = 1;
      }
     }
    }
    $199 = $9;
    $200 = ($199|0)==(0);
    if ($200) {
     label = 37;
    } else {
     $201 = $26;
     $202 = (_isupper($201)|0);
     $203 = ($202|0)!=(0);
     if ($203) {
      label = 37;
     }
    }
    if ((label|0) == 37) {
     label = 0;
     $204 = $28;
     $205 = ($204|0)>(1);
     if ($205) {
      $206 = $28;
      $207 = (($206) + 2)|0;
      $208 = (($24) + ($207<<2)|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = (($209) + 1)|0;
      HEAP32[$208>>2] = $210;
     }
     $211 = $28;
     $212 = ($211|0)==(1);
     if ($212) {
      $213 = $27;
      $214 = (14290 + ($213)|0);
      $215 = HEAP8[$214>>0]|0;
      $216 = $215&255;
      $217 = (($24) + ($216<<2)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = (($218) + 1)|0;
      HEAP32[$217>>2] = $219;
     }
     $220 = $27;
     $221 = ($220|0)==(10);
     $222 = $27;
     $223 = ($222|0)==(5);
     $or$cond9 = $221 | $223;
     if ($or$cond9) {
      $$sink14 = 9;
      label = 43;
     } else {
      $224 = $28;
      $225 = ($224|0)==(2);
      if ($225) {
       $$sink14 = 8;
       label = 43;
      }
     }
     if ((label|0) == 43) {
      label = 0;
      $226 = (($24) + ($$sink14<<2)|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = (($227) + 1)|0;
      HEAP32[$226>>2] = $228;
     }
     $229 = $25;
     $230 = ($229|0)!=(0);
     if ($230) {
      $231 = ((($24)) + 28|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = (($232) + 1)|0;
      HEAP32[$231>>2] = $233;
      $234 = $27;
      $235 = ($234|0)==(10);
      $236 = $27;
      $237 = ($236|0)==(5);
      $or$cond11 = $235 | $237;
      if ($or$cond11) {
       $238 = ((($24)) + 40|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = (($239) + 1)|0;
       HEAP32[$238>>2] = $240;
      }
     }
    }
    $241 = $26;
    $18 = $241;
    $242 = $27;
    $19 = $242;
    $243 = $28;
    $20 = $243;
    $244 = $12;
    $245 = (($244) + 1)|0;
    $12 = $245;
   }
   $246 = $10;
   $247 = ($246|0)!=(0|0);
   $248 = $6;
   $249 = ((($248)) + 8|0);
   $250 = HEAP32[$249>>2]|0;
   if ($247) {
    $251 = $16;
    $252 = $17;
    HEAP32[$vararg_buffer19>>2] = $250;
    $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $251;
    $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
    HEAP32[$vararg_ptr23>>2] = $252;
    (_printf(14493,$vararg_buffer19)|0);
   } else {
    $253 = $7;
    HEAP32[$vararg_buffer24>>2] = $250;
    $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
    HEAP32[$vararg_ptr27>>2] = $253;
    (_printf(14502,$vararg_buffer24)|0);
   }
   $12 = 0;
   while(1) {
    $254 = $12;
    $255 = ($254|0)<(11);
    if (!($255)) {
     break;
    }
    $256 = $12;
    $257 = (($24) + ($256<<2)|0);
    $258 = HEAP32[$257>>2]|0;
    HEAP32[$vararg_buffer28>>2] = $258;
    (_printf(14508,$vararg_buffer28)|0);
    $259 = $12;
    $260 = (($259) + 1)|0;
    $12 = $260;
   }
   (_putchar(10)|0);
   $261 = $13;
   $262 = (($261) + 1)|0;
   $13 = $262;
  }
  $263 = HEAP32[2341]|0;
  (_fflush($263)|0);
 }
 $264 = ((($11)) + 8|0);
 $265 = HEAP32[$264>>2]|0;
 _free($265);
 $266 = $6;
 _kseq_destroy($266);
 $267 = $5;
 (_gzclose($267)|0);
 $2 = 0;
 $268 = $2;
 STACKTOP = sp;return ($268|0);
}
function _kseq_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_calloc(1,60)|0);
 $2 = $3;
 $4 = $1;
 $5 = (_ks_init($4)|0);
 $6 = $2;
 $7 = ((($6)) + 56|0);
 HEAP32[$7>>2] = $5;
 $8 = $2;
 STACKTOP = sp;return ($8|0);
}
function _kseq_read($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $0;
 $6 = $2;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 $9 = $2;
 $10 = ((($9)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   while(1) {
    $13 = $5;
    $14 = (_ks_getc($13)|0);
    HEAP32[$3>>2] = $14;
    $15 = ($14|0)>=(0);
    $16 = HEAP32[$3>>2]|0;
    $17 = ($16|0)!=(62);
    $or$cond = $15 & $17;
    $18 = HEAP32[$3>>2]|0;
    $19 = ($18|0)!=(64);
    $or$cond9 = $or$cond & $19;
    if (!($or$cond9)) {
     break;
    }
   }
   $20 = HEAP32[$3>>2]|0;
   $21 = ($20|0)<(0);
   $22 = HEAP32[$3>>2]|0;
   if (!($21)) {
    $23 = $2;
    $24 = ((($23)) + 48|0);
    HEAP32[$24>>2] = $22;
    break;
   }
   $1 = $22;
   $259 = $1;
   STACKTOP = sp;return ($259|0);
  }
 } while(0);
 $25 = $2;
 $26 = ((($25)) + 36|0);
 HEAP32[$26>>2] = 0;
 $27 = $2;
 $28 = ((($27)) + 24|0);
 HEAP32[$28>>2] = 0;
 $29 = $2;
 $30 = ((($29)) + 12|0);
 HEAP32[$30>>2] = 0;
 $31 = $5;
 $32 = $2;
 $33 = (_ks_getuntil($31,0,$32,$3)|0);
 $4 = $33;
 $34 = ($33|0)<(0);
 if ($34) {
  $35 = $4;
  $1 = $35;
  $259 = $1;
  STACKTOP = sp;return ($259|0);
 }
 $36 = HEAP32[$3>>2]|0;
 $37 = ($36|0)!=(10);
 if ($37) {
  $38 = $5;
  $39 = $2;
  $40 = ((($39)) + 12|0);
  (_ks_getuntil($38,2,$40,0)|0);
 }
 $41 = $2;
 $42 = ((($41)) + 24|0);
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  $46 = $2;
  $47 = ((($46)) + 24|0);
  $48 = ((($47)) + 4|0);
  HEAP32[$48>>2] = 256;
  $49 = $2;
  $50 = ((($49)) + 24|0);
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (_malloc($52)|0);
  $54 = $2;
  $55 = ((($54)) + 24|0);
  $56 = ((($55)) + 8|0);
  HEAP32[$56>>2] = $53;
 }
 while(1) {
  $57 = $5;
  $58 = (_ks_getc($57)|0);
  HEAP32[$3>>2] = $58;
  $59 = ($58|0)>=(0);
  $60 = HEAP32[$3>>2]|0;
  $61 = ($60|0)!=(62);
  $or$cond3 = $59 & $61;
  $62 = HEAP32[$3>>2]|0;
  $63 = ($62|0)!=(43);
  $or$cond5 = $or$cond3 & $63;
  if ($or$cond5) {
   $64 = HEAP32[$3>>2]|0;
   $65 = ($64|0)!=(64);
   $260 = $65;
  } else {
   $260 = 0;
  }
  $66 = HEAP32[$3>>2]|0;
  if (!($260)) {
   break;
  }
  $67 = ($66|0)==(10);
  if ($67) {
   continue;
  }
  $68 = HEAP32[$3>>2]|0;
  $69 = $68&255;
  $70 = $2;
  $71 = ((($70)) + 24|0);
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $2;
  $75 = ((($74)) + 24|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 1)|0;
  HEAP32[$75>>2] = $77;
  $78 = (($73) + ($76)|0);
  HEAP8[$78>>0] = $69;
  $79 = $5;
  $80 = $2;
  $81 = ((($80)) + 24|0);
  (_ks_getuntil2($79,2,$81,0,1)|0);
 }
 $82 = ($66|0)==(62);
 $83 = HEAP32[$3>>2]|0;
 $84 = ($83|0)==(64);
 $or$cond7 = $82 | $84;
 if ($or$cond7) {
  $85 = HEAP32[$3>>2]|0;
  $86 = $2;
  $87 = ((($86)) + 48|0);
  HEAP32[$87>>2] = $85;
 }
 $88 = $2;
 $89 = ((($88)) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + 1)|0;
 $92 = $2;
 $93 = ((($92)) + 24|0);
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($91>>>0)>=($95>>>0);
 if ($96) {
  $97 = $2;
  $98 = ((($97)) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + 2)|0;
  $101 = $2;
  $102 = ((($101)) + 24|0);
  $103 = ((($102)) + 4|0);
  HEAP32[$103>>2] = $100;
  $104 = $2;
  $105 = ((($104)) + 24|0);
  $106 = ((($105)) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + -1)|0;
  HEAP32[$106>>2] = $108;
  $109 = $2;
  $110 = ((($109)) + 24|0);
  $111 = ((($110)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $112 >>> 1;
  $114 = $2;
  $115 = ((($114)) + 24|0);
  $116 = ((($115)) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $117 | $113;
  HEAP32[$116>>2] = $118;
  $119 = $2;
  $120 = ((($119)) + 24|0);
  $121 = ((($120)) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 >>> 2;
  $124 = $2;
  $125 = ((($124)) + 24|0);
  $126 = ((($125)) + 4|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $127 | $123;
  HEAP32[$126>>2] = $128;
  $129 = $2;
  $130 = ((($129)) + 24|0);
  $131 = ((($130)) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132 >>> 4;
  $134 = $2;
  $135 = ((($134)) + 24|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | $133;
  HEAP32[$136>>2] = $138;
  $139 = $2;
  $140 = ((($139)) + 24|0);
  $141 = ((($140)) + 4|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $142 >>> 8;
  $144 = $2;
  $145 = ((($144)) + 24|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | $143;
  HEAP32[$146>>2] = $148;
  $149 = $2;
  $150 = ((($149)) + 24|0);
  $151 = ((($150)) + 4|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $152 >>> 16;
  $154 = $2;
  $155 = ((($154)) + 24|0);
  $156 = ((($155)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $157 | $153;
  HEAP32[$156>>2] = $158;
  $159 = $2;
  $160 = ((($159)) + 24|0);
  $161 = ((($160)) + 4|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + 1)|0;
  HEAP32[$161>>2] = $163;
  $164 = $2;
  $165 = ((($164)) + 24|0);
  $166 = ((($165)) + 8|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $2;
  $169 = ((($168)) + 24|0);
  $170 = ((($169)) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (_realloc($167,$171)|0);
  $173 = $2;
  $174 = ((($173)) + 24|0);
  $175 = ((($174)) + 8|0);
  HEAP32[$175>>2] = $172;
 }
 $176 = $2;
 $177 = ((($176)) + 24|0);
 $178 = ((($177)) + 8|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = $2;
 $181 = ((($180)) + 24|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($179) + ($182)|0);
 HEAP8[$183>>0] = 0;
 $184 = HEAP32[$3>>2]|0;
 $185 = ($184|0)==(43);
 $186 = $185&1;
 $187 = $2;
 $188 = ((($187)) + 52|0);
 HEAP32[$188>>2] = $186;
 $189 = $2;
 $190 = ((($189)) + 52|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = ($191|0)!=(0);
 $193 = $2;
 if (!($192)) {
  $194 = ((($193)) + 24|0);
  $195 = HEAP32[$194>>2]|0;
  $1 = $195;
  $259 = $1;
  STACKTOP = sp;return ($259|0);
 }
 $196 = ((($193)) + 36|0);
 $197 = ((($196)) + 4|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $2;
 $200 = ((($199)) + 24|0);
 $201 = ((($200)) + 4|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ($198>>>0)<($202>>>0);
 if ($203) {
  $204 = $2;
  $205 = ((($204)) + 24|0);
  $206 = ((($205)) + 4|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = $2;
  $209 = ((($208)) + 36|0);
  $210 = ((($209)) + 4|0);
  HEAP32[$210>>2] = $207;
  $211 = $2;
  $212 = ((($211)) + 36|0);
  $213 = ((($212)) + 8|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $2;
  $216 = ((($215)) + 36|0);
  $217 = ((($216)) + 4|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (_realloc($214,$218)|0);
  $220 = $2;
  $221 = ((($220)) + 36|0);
  $222 = ((($221)) + 8|0);
  HEAP32[$222>>2] = $219;
 }
 while(1) {
  $223 = $5;
  $224 = (_ks_getc($223)|0);
  HEAP32[$3>>2] = $224;
  $225 = ($224|0)>=(0);
  $226 = HEAP32[$3>>2]|0;
  $227 = ($226|0)!=(10);
  $228 = $225 ? $227 : 0;
  if (!($228)) {
   break;
  }
 }
 $229 = HEAP32[$3>>2]|0;
 $230 = ($229|0)==(-1);
 if ($230) {
  $1 = -2;
  $259 = $1;
  STACKTOP = sp;return ($259|0);
 }
 while(1) {
  $231 = $5;
  $232 = $2;
  $233 = ((($232)) + 36|0);
  $234 = (_ks_getuntil2($231,2,$233,0,1)|0);
  $235 = ($234|0)>=(0);
  if ($235) {
   $236 = $2;
   $237 = ((($236)) + 36|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $2;
   $240 = ((($239)) + 24|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ($238>>>0)<($241>>>0);
   $244 = $242;
  } else {
   $244 = 0;
  }
  $243 = $244&1;
  HEAP32[$3>>2] = $243;
  if (!($244)) {
   break;
  }
 }
 $245 = HEAP32[$3>>2]|0;
 $246 = ($245|0)==(-3);
 if ($246) {
  $1 = -3;
  $259 = $1;
  STACKTOP = sp;return ($259|0);
 }
 $247 = $2;
 $248 = ((($247)) + 48|0);
 HEAP32[$248>>2] = 0;
 $249 = $2;
 $250 = ((($249)) + 24|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = $2;
 $253 = ((($252)) + 36|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ($251|0)!=($254|0);
 if ($255) {
  $1 = -2;
  $259 = $1;
  STACKTOP = sp;return ($259|0);
 } else {
  $256 = $2;
  $257 = ((($256)) + 24|0);
  $258 = HEAP32[$257>>2]|0;
  $1 = $258;
  $259 = $1;
  STACKTOP = sp;return ($259|0);
 }
 return (0)|0;
}
function _kseq_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = $1;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 $15 = $1;
 $16 = ((($15)) + 36|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 $19 = $1;
 $20 = ((($19)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 _ks_destroy($21);
 $22 = $1;
 _free($22);
 STACKTOP = sp;return;
}
function _stk_gc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer25 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer25 = sp + 112|0;
 $vararg_buffer19 = sp + 96|0;
 $vararg_buffer16 = sp + 88|0;
 $vararg_buffer13 = sp + 80|0;
 $vararg_buffer10 = sp + 72|0;
 $vararg_buffer8 = sp + 64|0;
 $vararg_buffer6 = sp + 56|0;
 $vararg_buffer4 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $6 = 0;
 $7 = 20;
 $8 = 0.60000002384185791;
 $9 = 10.0;
 while(1) {
  $22 = $3;
  $23 = $4;
  $24 = (_getopt($22,$23,14512)|0);
  $5 = $24;
  $25 = ($24|0)>=(0);
  if (!($25)) {
   break;
  }
  $26 = $5;
  $27 = ($26|0)==(120);
  if ($27) {
   $28 = HEAP32[5168]|0;
   $29 = (+_atof($28));
   $9 = $29;
   continue;
  }
  $30 = $5;
  $31 = ($30|0)==(119);
  if ($31) {
   $6 = 1;
   continue;
  }
  $32 = $5;
  $33 = ($32|0)==(102);
  if ($33) {
   $34 = HEAP32[5168]|0;
   $35 = (+_atof($34));
   $8 = $35;
   continue;
  }
  $36 = $5;
  $37 = ($36|0)==(108);
  if (!($37)) {
   continue;
  }
  $38 = HEAP32[5168]|0;
  $39 = (_atoi($38)|0);
  $7 = $39;
 }
 $40 = HEAP32[2406]|0;
 $41 = (($40) + 1)|0;
 $42 = $3;
 $43 = ($41|0)>($42|0);
 if ($43) {
  $44 = HEAP32[2374]|0;
  (_fprintf($44,14520,$vararg_buffer)|0);
  $45 = HEAP32[2374]|0;
  (_fprintf($45,14555,$vararg_buffer4)|0);
  $46 = HEAP32[2374]|0;
  (_fprintf($46,14565,$vararg_buffer6)|0);
  $47 = HEAP32[2374]|0;
  $48 = $8;
  HEAPF64[$vararg_buffer8>>3] = $48;
  (_fprintf($47,14604,$vararg_buffer8)|0);
  $49 = HEAP32[2374]|0;
  $50 = $7;
  HEAP32[$vararg_buffer10>>2] = $50;
  (_fprintf($49,14665,$vararg_buffer10)|0);
  $51 = HEAP32[2374]|0;
  $52 = $9;
  HEAPF64[$vararg_buffer13>>3] = $52;
  (_fprintf($51,14712,$vararg_buffer13)|0);
  $2 = 1;
  $180 = $2;
  STACKTOP = sp;return ($180|0);
 }
 $53 = $8;
 $54 = 1.0 - $53;
 $55 = $8;
 $56 = $54 / $55;
 $10 = $56;
 $57 = $4;
 $58 = HEAP32[2406]|0;
 $59 = (($57) + ($58<<2)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (_strcmp($60,13774)|0);
 $62 = ($61|0)!=(0);
 if ($62) {
  $63 = $4;
  $64 = HEAP32[2406]|0;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (_gzopen($66,13776)|0);
  $71 = $67;
 } else {
  $68 = HEAP32[2309]|0;
  $69 = (_fileno($68)|0);
  $70 = (_gzdopen($69,13776)|0);
  $71 = $70;
 }
 $11 = $71;
 $72 = $11;
 $73 = ($72|0)==(0|0);
 if ($73) {
  $74 = HEAP32[2374]|0;
  HEAP32[$vararg_buffer16>>2] = 14743;
  (_fprintf($74,14437,$vararg_buffer16)|0);
  $2 = 1;
  $180 = $2;
  STACKTOP = sp;return ($180|0);
 }
 $75 = $11;
 $76 = (_kseq_init($75)|0);
 $12 = $76;
 while(1) {
  $77 = $12;
  $78 = (_kseq_read($77)|0);
  $79 = ($78|0)>=(0);
  if (!($79)) {
   break;
  }
  $14 = 0;
  $15 = 0;
  $16 = 0;
  $17 = 0;
  $18 = 0;
  $19 = 0.0;
  $20 = 0.0;
  $13 = 0;
  while(1) {
   $80 = $13;
   $81 = $12;
   $82 = ((($81)) + 24|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($80>>>0)<($83>>>0);
   if (!($84)) {
    break;
   }
   $85 = $12;
   $86 = ((($85)) + 24|0);
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $13;
   $90 = (($88) + ($89)|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91 << 24 >> 24;
   $93 = (13778 + ($92)|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $5 = $95;
   $96 = $6;
   $97 = ($96|0)!=(0);
   $98 = $5;
   if ($97) {
    $99 = ($98|0)==(1);
    $100 = $5;
    $101 = ($100|0)==(8);
    $or$cond = $99 | $101;
    if ($or$cond) {
     $105 = 1;
    } else {
     $102 = $5;
     $103 = ($102|0)==(9);
     $105 = $103;
    }
    $104 = $105&1;
    $21 = $104;
   } else {
    $106 = ($98|0)==(2);
    $107 = $5;
    $108 = ($107|0)==(4);
    $or$cond3 = $106 | $108;
    if ($or$cond3) {
     $112 = 1;
    } else {
     $109 = $5;
     $110 = ($109|0)==(6);
     $112 = $110;
    }
    $111 = $112&1;
    $21 = $111;
   }
   $113 = $21;
   $114 = $16;
   $115 = (($114) + ($113))|0;
   $16 = $115;
   $116 = $21;
   $117 = ($116|0)!=(0);
   $118 = $19;
   do {
    if ($117) {
     $119 = $118 == 0.0;
     if ($119) {
      $120 = $13;
      $14 = $120;
      $121 = $16;
      $17 = $121;
     }
     $122 = $10;
     $123 = $19;
     $124 = $123 + $122;
     $19 = $124;
     $125 = $19;
     $126 = $20;
     $127 = $125 > $126;
     if ($127) {
      $128 = $19;
      $20 = $128;
      $129 = $13;
      $15 = $129;
      $130 = $16;
      $18 = $130;
     }
    } else {
     $131 = $118 > 0.0;
     if ($131) {
      $132 = $19;
      $133 = $132 + -1.0;
      $19 = $133;
      $134 = $19;
      $135 = $134 < 0.0;
      if (!($135)) {
       $136 = $20;
       $137 = $19;
       $138 = $136 - $137;
       $139 = $9;
       $140 = $138 > $139;
       if (!($140)) {
        break;
       }
      }
      $141 = $15;
      $142 = (($141) + 1)|0;
      $143 = $14;
      $144 = (($142) - ($143))|0;
      $145 = $7;
      $146 = ($144|0)>=($145|0);
      if ($146) {
       $147 = $12;
       $148 = ((($147)) + 8|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = $14;
       $151 = $15;
       $152 = (($151) + 1)|0;
       $153 = $18;
       $154 = $17;
       $155 = (($153) - ($154))|0;
       $156 = (($155) + 1)|0;
       HEAP32[$vararg_buffer19>>2] = $149;
       $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
       HEAP32[$vararg_ptr22>>2] = $150;
       $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
       HEAP32[$vararg_ptr23>>2] = $152;
       $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
       HEAP32[$vararg_ptr24>>2] = $156;
       (_printf(14750,$vararg_buffer19)|0);
      }
      $20 = 0.0;
      $19 = 0.0;
      $157 = $15;
      $13 = $157;
     }
    }
   } while(0);
   $158 = $13;
   $159 = (($158) + 1)|0;
   $13 = $159;
  }
  $160 = $20;
  $161 = $160 > 0.0;
  if (!($161)) {
   continue;
  }
  $162 = $15;
  $163 = (($162) + 1)|0;
  $164 = $14;
  $165 = (($163) - ($164))|0;
  $166 = $7;
  $167 = ($165|0)>=($166|0);
  if (!($167)) {
   continue;
  }
  $168 = $12;
  $169 = ((($168)) + 8|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $14;
  $172 = $15;
  $173 = (($172) + 1)|0;
  $174 = $18;
  $175 = $17;
  $176 = (($174) - ($175))|0;
  $177 = (($176) + 1)|0;
  HEAP32[$vararg_buffer25>>2] = $170;
  $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = $171;
  $vararg_ptr29 = ((($vararg_buffer25)) + 8|0);
  HEAP32[$vararg_ptr29>>2] = $173;
  $vararg_ptr30 = ((($vararg_buffer25)) + 12|0);
  HEAP32[$vararg_ptr30>>2] = $177;
  (_printf(14750,$vararg_buffer25)|0);
 }
 $178 = $12;
 _kseq_destroy($178);
 $179 = $11;
 (_gzclose($179)|0);
 $2 = 0;
 $180 = $2;
 STACKTOP = sp;return ($180|0);
}
function _stk_fqchk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1712|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1712|0);
 $vararg_buffer17 = sp + 1624|0;
 $vararg_buffer14 = sp + 1616|0;
 $vararg_buffer12 = sp + 1608|0;
 $vararg_buffer6 = sp + 1584|0;
 $vararg_buffer3 = sp + 1576|0;
 $vararg_buffer1 = sp + 1568|0;
 $vararg_buffer = sp + 1560|0;
 $16 = sp + 1552|0;
 $17 = sp + 1544|0;
 $18 = sp + 792|0;
 $19 = sp;
 $3 = $0;
 $4 = $1;
 $10 = 0;
 $11 = 2147483647;
 $12 = 0;
 $13 = 33;
 $14 = 0;
 $15 = 20;
 $24 = $16;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $28 = $17;
 $29 = $28;
 HEAP32[$29>>2] = 0;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = 0;
 $20 = 0;
 while(1) {
  $32 = $3;
  $33 = $4;
  $34 = (_getopt($32,$33,14763)|0);
  $8 = $34;
  $35 = ($34|0)>=(0);
  if (!($35)) {
   break;
  }
  $36 = $8;
  $37 = ($36|0)==(113);
  if (!($37)) {
   continue;
  }
  $38 = HEAP32[5168]|0;
  $39 = (_atoi($38)|0);
  $15 = $39;
 }
 $40 = HEAP32[2406]|0;
 $41 = $3;
 $42 = ($40|0)==($41|0);
 if ($42) {
  $43 = HEAP32[2374]|0;
  $44 = $15;
  HEAP32[$vararg_buffer>>2] = $44;
  (_fprintf($43,14766,$vararg_buffer)|0);
  $45 = HEAP32[2374]|0;
  (_fprintf($45,14802,$vararg_buffer1)|0);
  $2 = 1;
  $378 = $2;
  STACKTOP = sp;return ($378|0);
 }
 $46 = $4;
 $47 = HEAP32[2406]|0;
 $48 = (($46) + ($47<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (_strcmp($49,13774)|0);
 $51 = ($50|0)==(0);
 if ($51) {
  $52 = HEAP32[2309]|0;
  $53 = (_fileno($52)|0);
  $54 = (_gzdopen($53,13776)|0);
  $60 = $54;
 } else {
  $55 = $4;
  $56 = HEAP32[2406]|0;
  $57 = (($55) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_gzopen($58,13776)|0);
  $60 = $59;
 }
 $5 = $60;
 $61 = $5;
 $62 = ($61|0)==(0|0);
 if ($62) {
  $63 = HEAP32[2374]|0;
  HEAP32[$vararg_buffer3>>2] = 14863;
  (_fprintf($63,14437,$vararg_buffer3)|0);
  $2 = 1;
  $378 = $2;
  STACKTOP = sp;return ($378|0);
 }
 $64 = $5;
 $65 = (_kseq_init($64)|0);
 $6 = $65;
 $9 = 0;
 while(1) {
  $66 = $9;
  $67 = ($66|0)<=(93);
  if (!($67)) {
   break;
  }
  $68 = $9;
  $69 = (+($68|0));
  $70 = -0.10000000000000001 * $69;
  $71 = (+Math_pow(10.0,(+$70)));
  $72 = $9;
  $73 = (($18) + ($72<<3)|0);
  HEAPF64[$73>>3] = $71;
  $74 = $9;
  $75 = (($74) + 1)|0;
  $9 = $75;
 }
 $76 = ((($18)) + 24|0);
 HEAPF64[$76>>3] = 0.5;
 $77 = ((($18)) + 16|0);
 HEAPF64[$77>>3] = 0.5;
 $78 = ((($18)) + 8|0);
 HEAPF64[$78>>3] = 0.5;
 HEAPF64[$18>>3] = 0.5;
 L22: while(1) {
  $79 = $6;
  $80 = (_kseq_read($79)|0);
  $81 = ($80|0)>=(0);
  $82 = $6;
  if (!($81)) {
   break;
  }
  $83 = ((($82)) + 36|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)==(0);
  if ($85) {
   continue;
  }
  $86 = $17;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + 4)|0;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = (_i64Add(($88|0),($91|0),1,0)|0);
  $93 = tempRet0;
  $94 = $17;
  $95 = $94;
  HEAP32[$95>>2] = $92;
  $96 = (($94) + 4)|0;
  $97 = $96;
  HEAP32[$97>>2] = $93;
  $98 = $6;
  $99 = ((($98)) + 24|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $16;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($101) + 4)|0;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = (_i64Add(($103|0),($106|0),($100|0),0)|0);
  $108 = tempRet0;
  $109 = $16;
  $110 = $109;
  HEAP32[$110>>2] = $107;
  $111 = (($109) + 4)|0;
  $112 = $111;
  HEAP32[$112>>2] = $108;
  $113 = $11;
  $114 = $6;
  $115 = ((($114)) + 24|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($113>>>0)<($116>>>0);
  if ($117) {
   $118 = $11;
   $122 = $118;
  } else {
   $119 = $6;
   $120 = ((($119)) + 24|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121;
  }
  $11 = $122;
  $123 = $10;
  $124 = $6;
  $125 = ((($124)) + 24|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($123>>>0)>($126>>>0);
  if ($127) {
   $128 = $10;
   $132 = $128;
  } else {
   $129 = $6;
   $130 = ((($129)) + 24|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $131;
  }
  $10 = $132;
  $133 = $10;
  $134 = $12;
  $135 = ($133|0)>($134|0);
  if ($135) {
   $136 = $12;
   $21 = $136;
   $137 = $10;
   $12 = $137;
   $138 = $12;
   $139 = (($138) + -1)|0;
   $12 = $139;
   $140 = $12;
   $141 = $140 >> 1;
   $142 = $12;
   $143 = $142 | $141;
   $12 = $143;
   $144 = $12;
   $145 = $144 >> 2;
   $146 = $12;
   $147 = $146 | $145;
   $12 = $147;
   $148 = $12;
   $149 = $148 >> 4;
   $150 = $12;
   $151 = $150 | $149;
   $12 = $151;
   $152 = $12;
   $153 = $152 >> 8;
   $154 = $12;
   $155 = $154 | $153;
   $12 = $155;
   $156 = $12;
   $157 = $156 >> 16;
   $158 = $12;
   $159 = $158 | $157;
   $12 = $159;
   $160 = $12;
   $161 = (($160) + 1)|0;
   $12 = $161;
   $162 = $20;
   $163 = $12;
   $164 = ($163*792)|0;
   $165 = (_realloc($162,$164)|0);
   $20 = $165;
   $166 = $20;
   $167 = $21;
   $168 = (($166) + (($167*792)|0)|0);
   $169 = $12;
   $170 = $21;
   $171 = (($169) - ($170))|0;
   $172 = ($171*792)|0;
   _memset(($168|0),0,($172|0))|0;
  }
  $7 = 0;
  while(1) {
   $173 = $7;
   $174 = $6;
   $175 = ((($174)) + 36|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($173>>>0)<($176>>>0);
   if (!($177)) {
    continue L22;
   }
   $178 = $6;
   $179 = ((($178)) + 36|0);
   $180 = ((($179)) + 8|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $7;
   $183 = (($181) + ($182)|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184 << 24 >> 24;
   $186 = $13;
   $187 = (($185) - ($186))|0;
   $22 = $187;
   $188 = $6;
   $189 = ((($188)) + 24|0);
   $190 = ((($189)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $7;
   $193 = (($191) + ($192)|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194 << 24 >> 24;
   $196 = (14034 + ($195)|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $23 = $198;
   $199 = $23;
   $200 = ($199|0)!=(0);
   $201 = $23;
   $202 = (($201) - 1)|0;
   $203 = $200 ? $202 : 4;
   $23 = $203;
   $204 = $22;
   $205 = ($204|0)<(93);
   $206 = $22;
   $207 = $205 ? $206 : 93;
   $22 = $207;
   $208 = $20;
   $209 = $7;
   $210 = (($208) + (($209*792)|0)|0);
   $211 = $22;
   $212 = (($210) + ($211<<3)|0);
   $213 = $212;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (($213) + 4)|0;
   $217 = $216;
   $218 = HEAP32[$217>>2]|0;
   $219 = (_i64Add(($215|0),($218|0),1,0)|0);
   $220 = tempRet0;
   $221 = $212;
   $222 = $221;
   HEAP32[$222>>2] = $219;
   $223 = (($221) + 4)|0;
   $224 = $223;
   HEAP32[$224>>2] = $220;
   $225 = $20;
   $226 = $7;
   $227 = (($225) + (($226*792)|0)|0);
   $228 = ((($227)) + 752|0);
   $229 = $23;
   $230 = (($228) + ($229<<3)|0);
   $231 = $230;
   $232 = $231;
   $233 = HEAP32[$232>>2]|0;
   $234 = (($231) + 4)|0;
   $235 = $234;
   $236 = HEAP32[$235>>2]|0;
   $237 = (_i64Add(($233|0),($236|0),1,0)|0);
   $238 = tempRet0;
   $239 = $230;
   $240 = $239;
   HEAP32[$240>>2] = $237;
   $241 = (($239) + 4)|0;
   $242 = $241;
   HEAP32[$242>>2] = $238;
   $243 = $7;
   $244 = (($243) + 1)|0;
   $7 = $244;
  }
 }
 _kseq_destroy($82);
 $245 = $5;
 (_gzclose($245)|0);
 _memset(($19|0),0,792)|0;
 $7 = 0;
 while(1) {
  $246 = $7;
  $247 = $10;
  $248 = ($246|0)<($247|0);
  if (!($248)) {
   break;
  }
  $9 = 0;
  while(1) {
   $249 = $9;
   $250 = ($249|0)<=(93);
   if (!($250)) {
    break;
   }
   $251 = $20;
   $252 = $7;
   $253 = (($251) + (($252*792)|0)|0);
   $254 = $9;
   $255 = (($253) + ($254<<3)|0);
   $256 = $255;
   $257 = $256;
   $258 = HEAP32[$257>>2]|0;
   $259 = (($256) + 4)|0;
   $260 = $259;
   $261 = HEAP32[$260>>2]|0;
   $262 = $9;
   $263 = (($19) + ($262<<3)|0);
   $264 = $263;
   $265 = $264;
   $266 = HEAP32[$265>>2]|0;
   $267 = (($264) + 4)|0;
   $268 = $267;
   $269 = HEAP32[$268>>2]|0;
   $270 = (_i64Add(($266|0),($269|0),($258|0),($261|0))|0);
   $271 = tempRet0;
   $272 = $263;
   $273 = $272;
   HEAP32[$273>>2] = $270;
   $274 = (($272) + 4)|0;
   $275 = $274;
   HEAP32[$275>>2] = $271;
   $276 = $9;
   $277 = (($276) + 1)|0;
   $9 = $277;
  }
  $9 = 0;
  while(1) {
   $278 = $9;
   $279 = ($278|0)<=(4);
   if (!($279)) {
    break;
   }
   $280 = $20;
   $281 = $7;
   $282 = (($280) + (($281*792)|0)|0);
   $283 = ((($282)) + 752|0);
   $284 = $9;
   $285 = (($283) + ($284<<3)|0);
   $286 = $285;
   $287 = $286;
   $288 = HEAP32[$287>>2]|0;
   $289 = (($286) + 4)|0;
   $290 = $289;
   $291 = HEAP32[$290>>2]|0;
   $292 = ((($19)) + 752|0);
   $293 = $9;
   $294 = (($292) + ($293<<3)|0);
   $295 = $294;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = (($295) + 4)|0;
   $299 = $298;
   $300 = HEAP32[$299>>2]|0;
   $301 = (_i64Add(($297|0),($300|0),($288|0),($291|0))|0);
   $302 = tempRet0;
   $303 = $294;
   $304 = $303;
   HEAP32[$304>>2] = $301;
   $305 = (($303) + 4)|0;
   $306 = $305;
   HEAP32[$306>>2] = $302;
   $307 = $9;
   $308 = (($307) + 1)|0;
   $9 = $308;
  }
  $309 = $7;
  $310 = (($309) + 1)|0;
  $7 = $310;
 }
 $14 = 0;
 $9 = 0;
 while(1) {
  $311 = $9;
  $312 = ($311|0)<=(93);
  if (!($312)) {
   break;
  }
  $313 = $9;
  $314 = (($19) + ($313<<3)|0);
  $315 = $314;
  $316 = $315;
  $317 = HEAP32[$316>>2]|0;
  $318 = (($315) + 4)|0;
  $319 = $318;
  $320 = HEAP32[$319>>2]|0;
  $321 = ($317|0)!=(0);
  $322 = ($320|0)!=(0);
  $323 = $321 | $322;
  if ($323) {
   $324 = $14;
   $325 = (($324) + 1)|0;
   $14 = $325;
  }
  $326 = $9;
  $327 = (($326) + 1)|0;
  $9 = $327;
 }
 $328 = $11;
 $329 = $10;
 $330 = $16;
 $331 = $330;
 $332 = HEAP32[$331>>2]|0;
 $333 = (($330) + 4)|0;
 $334 = $333;
 $335 = HEAP32[$334>>2]|0;
 $336 = (+($332>>>0)) + (4294967296.0*(+($335|0)));
 $337 = $17;
 $338 = $337;
 $339 = HEAP32[$338>>2]|0;
 $340 = (($337) + 4)|0;
 $341 = $340;
 $342 = HEAP32[$341>>2]|0;
 $343 = (+($339>>>0)) + (4294967296.0*(+($342|0)));
 $344 = $336 / $343;
 $345 = $14;
 HEAP32[$vararg_buffer6>>2] = $328;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $329;
 $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
 HEAPF64[$vararg_ptr10>>3] = $344;
 $vararg_ptr11 = ((($vararg_buffer6)) + 16|0);
 HEAP32[$vararg_ptr11>>2] = $345;
 (_printf(14873,$vararg_buffer6)|0);
 (_printf(14942,$vararg_buffer12)|0);
 $346 = $15;
 $347 = ($346|0)<=(0);
 L60: do {
  if ($347) {
   $9 = 0;
   while(1) {
    $348 = $9;
    $349 = ($348|0)<=(93);
    if (!($349)) {
     break L60;
    }
    $350 = $9;
    $351 = (($19) + ($350<<3)|0);
    $352 = $351;
    $353 = $352;
    $354 = HEAP32[$353>>2]|0;
    $355 = (($352) + 4)|0;
    $356 = $355;
    $357 = HEAP32[$356>>2]|0;
    $358 = ($357|0)>(0);
    $359 = ($354>>>0)>(0);
    $360 = ($357|0)==(0);
    $361 = $360 & $359;
    $362 = $358 | $361;
    if ($362) {
     $363 = $9;
     HEAP32[$vararg_buffer14>>2] = $363;
     (_printf(14983,$vararg_buffer14)|0);
    }
    $364 = $9;
    $365 = (($364) + 1)|0;
    $9 = $365;
   }
  } else {
   (_printf(14990,$vararg_buffer17)|0);
  }
 } while(0);
 (_putchar(10)|0);
 $366 = $15;
 _fqc_aux($19,0,$19,$18,$366);
 $7 = 0;
 while(1) {
  $367 = $7;
  $368 = $10;
  $369 = ($367|0)<($368|0);
  $370 = $20;
  if (!($369)) {
   break;
  }
  $371 = $7;
  $372 = (($370) + (($371*792)|0)|0);
  $373 = $7;
  $374 = (($373) + 1)|0;
  $375 = $15;
  _fqc_aux($372,$374,$19,$18,$375);
  $376 = $7;
  $377 = (($376) + 1)|0;
  $7 = $377;
 }
 _free($370);
 $2 = 0;
 $378 = $2;
 STACKTOP = sp;return ($378|0);
}
function _fqc_aux($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer16 = sp + 88|0;
 $vararg_buffer13 = sp + 80|0;
 $vararg_buffer9 = sp + 64|0;
 $vararg_buffer6 = sp + 56|0;
 $vararg_buffer3 = sp + 48|0;
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $11 = sp + 24|0;
 $12 = sp + 16|0;
 $13 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $11;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = $12;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = $13;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 $14 = 0.0;
 $27 = $6;
 $28 = ($27|0)<=(0);
 if ($28) {
  (_printf(15065,$vararg_buffer)|0);
 } else {
  $29 = $6;
  HEAP32[$vararg_buffer1>>2] = $29;
  (_printf(15069,$vararg_buffer1)|0);
 }
 $10 = 0;
 while(1) {
  $30 = $10;
  $31 = ($30|0)<=(4);
  if (!($31)) {
   break;
  }
  $32 = $5;
  $33 = ((($32)) + 752|0);
  $34 = $10;
  $35 = (($33) + ($34<<3)|0);
  $36 = $35;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + 4)|0;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = $11;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) + 4)|0;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (_i64Add(($44|0),($47|0),($38|0),($41|0))|0);
  $49 = tempRet0;
  $50 = $11;
  $51 = $50;
  HEAP32[$51>>2] = $48;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = $49;
  $54 = $10;
  $55 = (($54) + 1)|0;
  $10 = $55;
 }
 $56 = $11;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = $vararg_buffer3;
 $63 = $62;
 HEAP32[$63>>2] = $58;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = $61;
 (_printf(15072,$vararg_buffer3)|0);
 $10 = 0;
 while(1) {
  $66 = $10;
  $67 = ($66|0)<=(4);
  if (!($67)) {
   break;
  }
  $68 = $5;
  $69 = ((($68)) + 752|0);
  $70 = $10;
  $71 = (($69) + ($70<<3)|0);
  $72 = $71;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($72) + 4)|0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (+($74>>>0)) + (4294967296.0*(+($77|0)));
  $79 = 100.0 * $78;
  $80 = $11;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = (($80) + 4)|0;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (+($82>>>0)) + (4294967296.0*(+($85|0)));
  $87 = $79 / $86;
  HEAPF64[$vararg_buffer6>>3] = $87;
  (_printf(15078,$vararg_buffer6)|0);
  $88 = $10;
  $89 = (($88) + 1)|0;
  $10 = $89;
 }
 $10 = 0;
 while(1) {
  $90 = $10;
  $91 = ($90|0)<=(93);
  if (!($91)) {
   break;
  }
  $92 = $5;
  $93 = $10;
  $94 = (($92) + ($93<<3)|0);
  $95 = $94;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($95) + 4)|0;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = $10;
  $102 = ($101|0)<(0);
  $103 = $102 << 31 >> 31;
  $104 = (___muldi3(($97|0),($100|0),($101|0),($103|0))|0);
  $105 = tempRet0;
  $106 = $12;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (($106) + 4)|0;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (_i64Add(($108|0),($111|0),($104|0),($105|0))|0);
  $113 = tempRet0;
  $114 = $12;
  $115 = $114;
  HEAP32[$115>>2] = $112;
  $116 = (($114) + 4)|0;
  $117 = $116;
  HEAP32[$117>>2] = $113;
  $118 = $5;
  $119 = $10;
  $120 = (($118) + ($119<<3)|0);
  $121 = $120;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = (($121) + 4)|0;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (+($123>>>0)) + (4294967296.0*(+($126|0)));
  $128 = $8;
  $129 = $10;
  $130 = (($128) + ($129<<3)|0);
  $131 = +HEAPF64[$130>>3];
  $132 = $127 * $131;
  $133 = $14;
  $134 = $133 + $132;
  $14 = $134;
  $135 = $10;
  $136 = $9;
  $137 = ($135|0)<($136|0);
  if ($137) {
   $138 = $5;
   $139 = $10;
   $140 = (($138) + ($139<<3)|0);
   $141 = $140;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = (($141) + 4)|0;
   $145 = $144;
   $146 = HEAP32[$145>>2]|0;
   $147 = $13;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = (_i64Add(($149|0),($152|0),($143|0),($146|0))|0);
   $154 = tempRet0;
   $155 = $13;
   $156 = $155;
   HEAP32[$156>>2] = $153;
   $157 = (($155) + 4)|0;
   $158 = $157;
   HEAP32[$158>>2] = $154;
  }
  $159 = $10;
  $160 = (($159) + 1)|0;
  $10 = $160;
 }
 $161 = $12;
 $162 = $161;
 $163 = HEAP32[$162>>2]|0;
 $164 = (($161) + 4)|0;
 $165 = $164;
 $166 = HEAP32[$165>>2]|0;
 $167 = (+($163>>>0)) + (4294967296.0*(+($166|0)));
 $168 = $11;
 $169 = $168;
 $170 = HEAP32[$169>>2]|0;
 $171 = (($168) + 4)|0;
 $172 = $171;
 $173 = HEAP32[$172>>2]|0;
 $174 = (+($170>>>0)) + (4294967296.0*(+($173|0)));
 $175 = $167 / $174;
 $176 = $14;
 $177 = $176 + 9.9999999999999995E-7;
 $178 = $11;
 $179 = $178;
 $180 = HEAP32[$179>>2]|0;
 $181 = (($178) + 4)|0;
 $182 = $181;
 $183 = HEAP32[$182>>2]|0;
 $184 = (+($180>>>0)) + (4294967296.0*(+($183|0)));
 $185 = $184 + 9.9999999999999995E-7;
 $186 = $177 / $185;
 $187 = (+Math_log((+$186)));
 $188 = -4.343 * $187;
 HEAPF64[$vararg_buffer9>>3] = $175;
 $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
 HEAPF64[$vararg_ptr12>>3] = $188;
 (_printf(15084,$vararg_buffer9)|0);
 $189 = $9;
 $190 = ($189|0)<=(0);
 if (!($190)) {
  $228 = $13;
  $229 = $228;
  $230 = HEAP32[$229>>2]|0;
  $231 = (($228) + 4)|0;
  $232 = $231;
  $233 = HEAP32[$232>>2]|0;
  $234 = (+($230>>>0)) + (4294967296.0*(+($233|0)));
  $235 = 100.0 * $234;
  $236 = $11;
  $237 = $236;
  $238 = HEAP32[$237>>2]|0;
  $239 = (($236) + 4)|0;
  $240 = $239;
  $241 = HEAP32[$240>>2]|0;
  $242 = (+($238>>>0)) + (4294967296.0*(+($241|0)));
  $243 = $235 / $242;
  $244 = $11;
  $245 = $244;
  $246 = HEAP32[$245>>2]|0;
  $247 = (($244) + 4)|0;
  $248 = $247;
  $249 = HEAP32[$248>>2]|0;
  $250 = $13;
  $251 = $250;
  $252 = HEAP32[$251>>2]|0;
  $253 = (($250) + 4)|0;
  $254 = $253;
  $255 = HEAP32[$254>>2]|0;
  $256 = (_i64Subtract(($246|0),($249|0),($252|0),($255|0))|0);
  $257 = tempRet0;
  $258 = (+($256>>>0)) + (4294967296.0*(+($257|0)));
  $259 = 100.0 * $258;
  $260 = $11;
  $261 = $260;
  $262 = HEAP32[$261>>2]|0;
  $263 = (($260) + 4)|0;
  $264 = $263;
  $265 = HEAP32[$264>>2]|0;
  $266 = (+($262>>>0)) + (4294967296.0*(+($265|0)));
  $267 = $259 / $266;
  HEAPF64[$vararg_buffer16>>3] = $243;
  $vararg_ptr19 = ((($vararg_buffer16)) + 8|0);
  HEAPF64[$vararg_ptr19>>3] = $267;
  (_printf(15084,$vararg_buffer16)|0);
  (_putchar(10)|0);
  STACKTOP = sp;return;
 }
 $10 = 0;
 while(1) {
  $191 = $10;
  $192 = ($191|0)<=(93);
  if (!($192)) {
   break;
  }
  $193 = $7;
  $194 = $10;
  $195 = (($193) + ($194<<3)|0);
  $196 = $195;
  $197 = $196;
  $198 = HEAP32[$197>>2]|0;
  $199 = (($196) + 4)|0;
  $200 = $199;
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201|0)>(0);
  $203 = ($198>>>0)>(0);
  $204 = ($201|0)==(0);
  $205 = $204 & $203;
  $206 = $202 | $205;
  if ($206) {
   $207 = $5;
   $208 = $10;
   $209 = (($207) + ($208<<3)|0);
   $210 = $209;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = (+($212>>>0)) + (4294967296.0*(+($215|0)));
   $217 = 100.0 * $216;
   $218 = $11;
   $219 = $218;
   $220 = HEAP32[$219>>2]|0;
   $221 = (($218) + 4)|0;
   $222 = $221;
   $223 = HEAP32[$222>>2]|0;
   $224 = (+($220>>>0)) + (4294967296.0*(+($223|0)));
   $225 = $217 / $224;
   HEAPF64[$vararg_buffer13>>3] = $225;
   (_printf(15095,$vararg_buffer13)|0);
  }
  $226 = $10;
  $227 = (($226) + 1)|0;
  $10 = $227;
 }
 (_putchar(10)|0);
 STACKTOP = sp;return;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = 0;
 $3 = $0;
 $4 = $1;
 $5 = HEAP32[2374]|0;
 (_fprintf($5,15004,$vararg_buffer)|0);
 $6 = $3;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = (_usage()|0);
  $2 = $8;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_strcmp($11,15009)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $3;
  $15 = (($14) - 1)|0;
  $16 = $4;
  $17 = ((($16)) + 4|0);
  $18 = (_stk_comp($15,$17)|0);
  $2 = $18;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 $19 = $4;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_strcmp($21,15014)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = $3;
  $25 = (($24) - 1)|0;
  $26 = $4;
  $27 = ((($26)) + 4|0);
  $28 = (_stk_fqchk($25,$27)|0);
  $2 = $28;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 $29 = $4;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_strcmp($31,15020)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = $3;
  $35 = (($34) - 1)|0;
  $36 = $4;
  $37 = ((($36)) + 4|0);
  $38 = (_stk_gc($35,$37)|0);
  $2 = $38;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 } else {
  $39 = HEAP32[2374]|0;
  $40 = $4;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $42;
  (_fprintf($39,15023,$vararg_buffer1)|0);
  $2 = 1;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _kh_init_reg() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,28)|0);
 return ($0|0);
}
function _ks_getuntil2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $13 = $9;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $9;
  HEAP32[$15>>2] = 0;
 }
 $16 = $10;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $8;
  $19 = HEAP32[$18>>2]|0;
  $21 = $19;
 } else {
  $21 = 0;
 }
 $20 = $8;
 HEAP32[$20>>2] = $21;
 while(1) {
  $22 = $6;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)<(0);
  if ($25) {
   label = 7;
   break;
  }
  $26 = $6;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28|0)>=($31|0);
  if ($32) {
   $33 = $6;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)!=(0);
   if ($36) {
    break;
   }
   $37 = $6;
   $38 = ((($37)) + 4|0);
   HEAP32[$38>>2] = 0;
   $39 = $6;
   $40 = ((($39)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = HEAP32[$42>>2]|0;
   $44 = (_gzread($41,$43,16384)|0);
   $45 = $6;
   $46 = ((($45)) + 8|0);
   HEAP32[$46>>2] = $44;
   $47 = $6;
   $48 = ((($47)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0);
   $51 = $6;
   if ($50) {
    label = 11;
    break;
   }
   $53 = ((($51)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(-1);
   if ($55) {
    label = 13;
    break;
   }
  }
  $58 = $7;
  $59 = ($58|0)==(2);
  L15: do {
   if ($59) {
    $60 = $6;
    $61 = ((($60)) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    $12 = $62;
    while(1) {
     $63 = $12;
     $64 = $6;
     $65 = ((($64)) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($63|0)<($66|0);
     if (!($67)) {
      break L15;
     }
     $68 = $6;
     $69 = HEAP32[$68>>2]|0;
     $70 = $12;
     $71 = (($69) + ($70)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = ($73|0)==(10);
     if ($74) {
      break L15;
     }
     $75 = $12;
     $76 = (($75) + 1)|0;
     $12 = $76;
    }
   } else {
    $77 = $7;
    $78 = ($77|0)>(2);
    if ($78) {
     $79 = $6;
     $80 = ((($79)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $12 = $81;
     while(1) {
      $82 = $12;
      $83 = $6;
      $84 = ((($83)) + 8|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($82|0)<($85|0);
      if (!($86)) {
       break L15;
      }
      $87 = $6;
      $88 = HEAP32[$87>>2]|0;
      $89 = $12;
      $90 = (($88) + ($89)|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91&255;
      $93 = $7;
      $94 = ($92|0)==($93|0);
      if ($94) {
       break L15;
      }
      $95 = $12;
      $96 = (($95) + 1)|0;
      $12 = $96;
     }
    }
    $97 = $7;
    $98 = ($97|0)==(0);
    if ($98) {
     $99 = $6;
     $100 = ((($99)) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $12 = $101;
     while(1) {
      $102 = $12;
      $103 = $6;
      $104 = ((($103)) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($102|0)<($105|0);
      if (!($106)) {
       break L15;
      }
      $107 = $6;
      $108 = HEAP32[$107>>2]|0;
      $109 = $12;
      $110 = (($108) + ($109)|0);
      $111 = HEAP8[$110>>0]|0;
      $112 = $111&255;
      $113 = (_isspace($112)|0);
      $114 = ($113|0)!=(0);
      if ($114) {
       break L15;
      }
      $115 = $12;
      $116 = (($115) + 1)|0;
      $12 = $116;
     }
    }
    $117 = $7;
    $118 = ($117|0)==(1);
    if (!($118)) {
     $12 = 0;
     break;
    }
    $119 = $6;
    $120 = ((($119)) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $12 = $121;
    while(1) {
     $122 = $12;
     $123 = $6;
     $124 = ((($123)) + 8|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($122|0)<($125|0);
     if (!($126)) {
      break L15;
     }
     $127 = $6;
     $128 = HEAP32[$127>>2]|0;
     $129 = $12;
     $130 = (($128) + ($129)|0);
     $131 = HEAP8[$130>>0]|0;
     $132 = $131&255;
     $133 = (_isspace($132)|0);
     $134 = ($133|0)!=(0);
     if ($134) {
      $135 = $6;
      $136 = HEAP32[$135>>2]|0;
      $137 = $12;
      $138 = (($136) + ($137)|0);
      $139 = HEAP8[$138>>0]|0;
      $140 = $139&255;
      $141 = ($140|0)!=(32);
      if ($141) {
       break L15;
      }
     }
     $142 = $12;
     $143 = (($142) + 1)|0;
     $12 = $143;
    }
   }
  } while(0);
  $144 = $8;
  $145 = ((($144)) + 4|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $8;
  $148 = HEAP32[$147>>2]|0;
  $149 = (($146) - ($148))|0;
  $150 = $12;
  $151 = $6;
  $152 = ((($151)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($150) - ($153))|0;
  $155 = (($154) + 1)|0;
  $156 = ($149>>>0)<($155>>>0);
  if ($156) {
   $157 = $8;
   $158 = HEAP32[$157>>2]|0;
   $159 = $12;
   $160 = $6;
   $161 = ((($160)) + 4|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($159) - ($162))|0;
   $164 = (($158) + ($163))|0;
   $165 = (($164) + 1)|0;
   $166 = $8;
   $167 = ((($166)) + 4|0);
   HEAP32[$167>>2] = $165;
   $168 = $8;
   $169 = ((($168)) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + -1)|0;
   HEAP32[$169>>2] = $171;
   $172 = $8;
   $173 = ((($172)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $174 >>> 1;
   $176 = $8;
   $177 = ((($176)) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178 | $175;
   HEAP32[$177>>2] = $179;
   $180 = $8;
   $181 = ((($180)) + 4|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $182 >>> 2;
   $184 = $8;
   $185 = ((($184)) + 4|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $186 | $183;
   HEAP32[$185>>2] = $187;
   $188 = $8;
   $189 = ((($188)) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $190 >>> 4;
   $192 = $8;
   $193 = ((($192)) + 4|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $194 | $191;
   HEAP32[$193>>2] = $195;
   $196 = $8;
   $197 = ((($196)) + 4|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198 >>> 8;
   $200 = $8;
   $201 = ((($200)) + 4|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $202 | $199;
   HEAP32[$201>>2] = $203;
   $204 = $8;
   $205 = ((($204)) + 4|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $206 >>> 16;
   $208 = $8;
   $209 = ((($208)) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = $210 | $207;
   HEAP32[$209>>2] = $211;
   $212 = $8;
   $213 = ((($212)) + 4|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (($214) + 1)|0;
   HEAP32[$213>>2] = $215;
   $216 = $8;
   $217 = ((($216)) + 8|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = $8;
   $220 = ((($219)) + 4|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = (_realloc($218,$221)|0);
   $223 = $8;
   $224 = ((($223)) + 8|0);
   HEAP32[$224>>2] = $222;
  }
  $11 = 1;
  $225 = $8;
  $226 = ((($225)) + 8|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = $8;
  $229 = HEAP32[$228>>2]|0;
  $230 = (($227) + ($229)|0);
  $231 = $6;
  $232 = HEAP32[$231>>2]|0;
  $233 = $6;
  $234 = ((($233)) + 4|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($232) + ($235)|0);
  $237 = $12;
  $238 = $6;
  $239 = ((($238)) + 4|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($237) - ($240))|0;
  _memcpy(($230|0),($236|0),($241|0))|0;
  $242 = $8;
  $243 = HEAP32[$242>>2]|0;
  $244 = $12;
  $245 = $6;
  $246 = ((($245)) + 4|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($244) - ($247))|0;
  $249 = (($243) + ($248))|0;
  $250 = $8;
  HEAP32[$250>>2] = $249;
  $251 = $12;
  $252 = (($251) + 1)|0;
  $253 = $6;
  $254 = ((($253)) + 4|0);
  HEAP32[$254>>2] = $252;
  $255 = $12;
  $256 = $6;
  $257 = ((($256)) + 8|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = ($255|0)<($258|0);
  if ($259) {
   label = 39;
   break;
  }
 }
 if ((label|0) == 7) {
  $5 = -3;
  $317 = $5;
  STACKTOP = sp;return ($317|0);
 }
 else if ((label|0) == 11) {
  $52 = ((($51)) + 12|0);
  HEAP32[$52>>2] = 1;
 }
 else if ((label|0) == 13) {
  $56 = $6;
  $57 = ((($56)) + 12|0);
  HEAP32[$57>>2] = 1;
  $5 = -3;
  $317 = $5;
  STACKTOP = sp;return ($317|0);
 }
 else if ((label|0) == 39) {
  $260 = $9;
  $261 = ($260|0)!=(0|0);
  if ($261) {
   $262 = $6;
   $263 = HEAP32[$262>>2]|0;
   $264 = $12;
   $265 = (($263) + ($264)|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = $266&255;
   $268 = $9;
   HEAP32[$268>>2] = $267;
  }
 }
 $269 = $11;
 $270 = ($269|0)!=(0);
 if (!($270)) {
  $271 = $6;
  $272 = ((($271)) + 12|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = ($273|0)!=(0);
  if ($274) {
   $275 = $6;
   $276 = ((($275)) + 4|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = $6;
   $279 = ((($278)) + 8|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = ($277|0)>=($280|0);
   if ($281) {
    $5 = -1;
    $317 = $5;
    STACKTOP = sp;return ($317|0);
   }
  }
 }
 $282 = $8;
 $283 = ((($282)) + 8|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ($284|0)==(0|0);
 if ($285) {
  $286 = $8;
  $287 = ((($286)) + 4|0);
  HEAP32[$287>>2] = 1;
  $288 = (_calloc(1,1)|0);
  $289 = $8;
  $290 = ((($289)) + 8|0);
  HEAP32[$290>>2] = $288;
 } else {
  $291 = $7;
  $292 = ($291|0)==(2);
  if ($292) {
   $293 = $8;
   $294 = HEAP32[$293>>2]|0;
   $295 = ($294>>>0)>(1);
   if ($295) {
    $296 = $8;
    $297 = ((($296)) + 8|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = $8;
    $300 = HEAP32[$299>>2]|0;
    $301 = (($300) - 1)|0;
    $302 = (($298) + ($301)|0);
    $303 = HEAP8[$302>>0]|0;
    $304 = $303 << 24 >> 24;
    $305 = ($304|0)==(13);
    if ($305) {
     $306 = $8;
     $307 = HEAP32[$306>>2]|0;
     $308 = (($307) + -1)|0;
     HEAP32[$306>>2] = $308;
    }
   }
  }
 }
 $309 = $8;
 $310 = ((($309)) + 8|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = $8;
 $313 = HEAP32[$312>>2]|0;
 $314 = (($311) + ($313)|0);
 HEAP8[$314>>0] = 0;
 $315 = $8;
 $316 = HEAP32[$315>>2]|0;
 $5 = $316;
 $317 = $5;
 STACKTOP = sp;return ($317|0);
}
function ___ac_X31_hash_string($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $1 = $9;
 while(1) {
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $13 << 5;
  $15 = $2;
  $16 = (($14) - ($15))|0;
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($16) + ($19))|0;
  $2 = $20;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
 }
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _kh_resize_reg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 32|0;
 $13 = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 1;
 $14 = $3;
 $15 = (($14) + -1)|0;
 $3 = $15;
 $16 = $3;
 $17 = $16 >>> 1;
 $18 = $3;
 $19 = $18 | $17;
 $3 = $19;
 $20 = $3;
 $21 = $20 >>> 2;
 $22 = $3;
 $23 = $22 | $21;
 $3 = $23;
 $24 = $3;
 $25 = $24 >>> 4;
 $26 = $3;
 $27 = $26 | $25;
 $3 = $27;
 $28 = $3;
 $29 = $28 >>> 8;
 $30 = $3;
 $31 = $30 | $29;
 $3 = $31;
 $32 = $3;
 $33 = $32 >>> 16;
 $34 = $3;
 $35 = $34 | $33;
 $3 = $35;
 $36 = $3;
 $37 = (($36) + 1)|0;
 $3 = $37;
 $38 = $3;
 $39 = ($38>>>0)<(4);
 $$ = $39 ? 4 : $37;
 $3 = $$;
 $40 = $2;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $3;
 $44 = (+($43>>>0));
 $45 = $44 * 0.77000000000000001;
 $46 = $45 + 0.5;
 $47 = (~~(($46))>>>0);
 $48 = ($42>>>0)>=($47>>>0);
 if ($48) {
  $5 = 0;
 } else {
  $49 = $3;
  $50 = ($49>>>0)<(16);
  $51 = $3;
  $52 = $51 >>> 4;
  $53 = $50 ? 1 : $52;
  $54 = $53<<2;
  $55 = (_malloc($54)|0);
  $4 = $55;
  $56 = $4;
  $57 = $3;
  $58 = ($57>>>0)<(16);
  $59 = $3;
  $60 = $59 >>> 4;
  $61 = $58 ? 1 : $60;
  $62 = $61<<2;
  _memset(($56|0),-86,($62|0))|0;
  $63 = $2;
  $64 = HEAP32[$63>>2]|0;
  $65 = $3;
  $66 = ($64>>>0)<($65>>>0);
  if ($66) {
   $67 = $2;
   $68 = ((($67)) + 20|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $3;
   $71 = $70<<2;
   $72 = (_realloc($69,$71)|0);
   $73 = $2;
   $74 = ((($73)) + 20|0);
   HEAP32[$74>>2] = $72;
   $75 = $2;
   $76 = ((($75)) + 24|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $3;
   $79 = ($78*12)|0;
   $80 = (_realloc($77,$79)|0);
   $81 = $2;
   $82 = ((($81)) + 24|0);
   HEAP32[$82>>2] = $80;
  }
 }
 $83 = $5;
 $84 = ($83|0)!=(0);
 if (!($84)) {
  STACKTOP = sp;return;
 }
 $5 = 0;
 while(1) {
  $85 = $5;
  $86 = $2;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85|0)!=($87|0);
  $89 = $2;
  if (!($88)) {
   break;
  }
  $90 = ((($89)) + 16|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $5;
  $93 = $92 >>> 4;
  $94 = (($91) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $5;
  $97 = $96 & 15;
  $98 = $97 << 1;
  $99 = $95 >>> $98;
  $100 = $99 & 3;
  $101 = ($100|0)==(0);
  if ($101) {
   $102 = $2;
   $103 = ((($102)) + 20|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $5;
   $106 = (($104) + ($105<<2)|0);
   $107 = HEAP32[$106>>2]|0;
   $6 = $107;
   $108 = $3;
   $109 = (($108) - 1)|0;
   $8 = $109;
   $110 = $2;
   $111 = ((($110)) + 24|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $5;
   $114 = (($112) + (($113*12)|0)|0);
   ;HEAP32[$7>>2]=HEAP32[$114>>2]|0;HEAP32[$7+4>>2]=HEAP32[$114+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$114+8>>2]|0;
   $115 = $5;
   $116 = $115 & 15;
   $117 = $116 << 1;
   $118 = 1 << $117;
   $119 = $2;
   $120 = ((($119)) + 16|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $5;
   $$sink = $122;$$sink3 = $118;$$sink4 = $121;
   while(1) {
    $123 = $$sink >>> 4;
    $124 = (($$sink4) + ($123<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $125 | $$sink3;
    HEAP32[$124>>2] = $126;
    $127 = $6;
    $128 = (___ac_X31_hash_string($127)|0);
    $10 = $128;
    $129 = $10;
    $130 = $8;
    $131 = $129 & $130;
    $11 = $131;
    $132 = $10;
    $133 = $132 >>> 3;
    $134 = $10;
    $135 = $134 << 3;
    $136 = $133 ^ $135;
    $137 = $136 | 1;
    $138 = $8;
    $139 = $137 & $138;
    $9 = $139;
    while(1) {
     $140 = $4;
     $141 = $11;
     $142 = $141 >>> 4;
     $143 = (($140) + ($142<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $11;
     $146 = $145 & 15;
     $147 = $146 << 1;
     $148 = $144 >>> $147;
     $149 = $148 & 2;
     $150 = ($149|0)!=(0);
     $151 = $150 ^ 1;
     $152 = $11;
     if (!($151)) {
      break;
     }
     $153 = $9;
     $154 = (($152) + ($153))|0;
     $155 = $8;
     $156 = $154 & $155;
     $11 = $156;
    }
    $157 = $152 & 15;
    $158 = $157 << 1;
    $159 = 2 << $158;
    $160 = $159 ^ -1;
    $161 = $4;
    $162 = $11;
    $163 = $162 >>> 4;
    $164 = (($161) + ($163<<2)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = $165 & $160;
    HEAP32[$164>>2] = $166;
    $167 = $11;
    $168 = $2;
    $169 = HEAP32[$168>>2]|0;
    $170 = ($167>>>0)<($169>>>0);
    if (!($170)) {
     break;
    }
    $171 = $2;
    $172 = ((($171)) + 16|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $11;
    $175 = $174 >>> 4;
    $176 = (($173) + ($175<<2)|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $11;
    $179 = $178 & 15;
    $180 = $179 << 1;
    $181 = $177 >>> $180;
    $182 = $181 & 3;
    $183 = ($182|0)==(0);
    if (!($183)) {
     break;
    }
    $184 = $2;
    $185 = ((($184)) + 20|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $11;
    $188 = (($186) + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $12 = $189;
    $190 = $6;
    $191 = $2;
    $192 = ((($191)) + 20|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = $11;
    $195 = (($193) + ($194<<2)|0);
    HEAP32[$195>>2] = $190;
    $196 = $12;
    $6 = $196;
    $197 = $2;
    $198 = ((($197)) + 24|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = $11;
    $201 = (($199) + (($200*12)|0)|0);
    ;HEAP32[$13>>2]=HEAP32[$201>>2]|0;HEAP32[$13+4>>2]=HEAP32[$201+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$201+8>>2]|0;
    $202 = $2;
    $203 = ((($202)) + 24|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = $11;
    $206 = (($204) + (($205*12)|0)|0);
    ;HEAP32[$206>>2]=HEAP32[$7>>2]|0;HEAP32[$206+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$206+8>>2]=HEAP32[$7+8>>2]|0;
    ;HEAP32[$7>>2]=HEAP32[$13>>2]|0;HEAP32[$7+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$13+8>>2]|0;
    $207 = $11;
    $208 = $207 & 15;
    $209 = $208 << 1;
    $210 = 1 << $209;
    $211 = $2;
    $212 = ((($211)) + 16|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = $11;
    $$sink = $214;$$sink3 = $210;$$sink4 = $213;
   }
   $215 = $6;
   $216 = $2;
   $217 = ((($216)) + 20|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = $11;
   $220 = (($218) + ($219<<2)|0);
   HEAP32[$220>>2] = $215;
   $221 = $2;
   $222 = ((($221)) + 24|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = $11;
   $225 = (($223) + (($224*12)|0)|0);
   ;HEAP32[$225>>2]=HEAP32[$7>>2]|0;HEAP32[$225+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$225+8>>2]=HEAP32[$7+8>>2]|0;
  }
  $226 = $5;
  $227 = (($226) + 1)|0;
  $5 = $227;
 }
 $228 = HEAP32[$89>>2]|0;
 $229 = $3;
 $230 = ($228>>>0)>($229>>>0);
 if ($230) {
  $231 = $2;
  $232 = ((($231)) + 20|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $3;
  $235 = $234<<2;
  $236 = (_realloc($233,$235)|0);
  $237 = $2;
  $238 = ((($237)) + 20|0);
  HEAP32[$238>>2] = $236;
  $239 = $2;
  $240 = ((($239)) + 24|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $3;
  $243 = ($242*12)|0;
  $244 = (_realloc($241,$243)|0);
  $245 = $2;
  $246 = ((($245)) + 24|0);
  HEAP32[$246>>2] = $244;
 }
 $247 = $2;
 $248 = ((($247)) + 16|0);
 $249 = HEAP32[$248>>2]|0;
 _free($249);
 $250 = $4;
 $251 = $2;
 $252 = ((($251)) + 16|0);
 HEAP32[$252>>2] = $250;
 $253 = $3;
 $254 = $2;
 HEAP32[$254>>2] = $253;
 $255 = $2;
 $256 = ((($255)) + 4|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = $2;
 $259 = ((($258)) + 8|0);
 HEAP32[$259>>2] = $257;
 $260 = $2;
 $261 = HEAP32[$260>>2]|0;
 $262 = (+($261>>>0));
 $263 = $262 * 0.77000000000000001;
 $264 = $263 + 0.5;
 $265 = (~~(($264))>>>0);
 $266 = $2;
 $267 = ((($266)) + 12|0);
 HEAP32[$267>>2] = $265;
 STACKTOP = sp;return;
}
function _usage() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer39 = sp + 160|0;
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer35 = sp + 144|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[2374]|0;
 (_fprintf($0,15101,$vararg_buffer)|0);
 $1 = HEAP32[2374]|0;
 (_fprintf($1,15103,$vararg_buffer1)|0);
 $2 = HEAP32[2374]|0;
 (_fprintf($2,15141,$vararg_buffer3)|0);
 $3 = HEAP32[2374]|0;
 (_fprintf($3,15161,$vararg_buffer5)|0);
 $4 = HEAP32[2374]|0;
 (_fprintf($4,15214,$vararg_buffer7)|0);
 $5 = HEAP32[2374]|0;
 (_fprintf($5,15276,$vararg_buffer9)|0);
 $6 = HEAP32[2374]|0;
 (_fprintf($6,15316,$vararg_buffer11)|0);
 $7 = HEAP32[2374]|0;
 (_fprintf($7,15370,$vararg_buffer13)|0);
 $8 = HEAP32[2374]|0;
 (_fprintf($8,15422,$vararg_buffer15)|0);
 $9 = HEAP32[2374]|0;
 (_fprintf($9,15474,$vararg_buffer17)|0);
 $10 = HEAP32[2374]|0;
 (_fprintf($10,15532,$vararg_buffer19)|0);
 $11 = HEAP32[2374]|0;
 (_fprintf($11,15576,$vararg_buffer21)|0);
 $12 = HEAP32[2374]|0;
 (_fprintf($12,15629,$vararg_buffer23)|0);
 $13 = HEAP32[2374]|0;
 (_fprintf($13,15691,$vararg_buffer25)|0);
 $14 = HEAP32[2374]|0;
 (_fprintf($14,15735,$vararg_buffer27)|0);
 $15 = HEAP32[2374]|0;
 (_fprintf($15,15795,$vararg_buffer29)|0);
 $16 = HEAP32[2374]|0;
 (_fprintf($16,15857,$vararg_buffer31)|0);
 $17 = HEAP32[2374]|0;
 (_fprintf($17,15899,$vararg_buffer33)|0);
 $18 = HEAP32[2374]|0;
 (_fprintf($18,15950,$vararg_buffer35)|0);
 $19 = HEAP32[2374]|0;
 (_fprintf($19,15993,$vararg_buffer37)|0);
 $20 = HEAP32[2374]|0;
 (_fprintf($20,15101,$vararg_buffer39)|0);
 STACKTOP = sp;return 1;
}
function _gzclose($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -2;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(7247);
   if ($4) {
    $5 = (_gzclose_r($0)|0);
    $$0 = $5;
    break;
   } else {
    $6 = (_gzclose_w($0)|0);
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _gzopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_gz_open($0,-1,$1)|0);
 return ($2|0);
}
function _gz_open($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$06574 = 0, $$067 = 0, $$06873 = 0, $$075 = 0, $$1 = 0, $$166 = 0, $$70 = 0, $$off = 0, $$pre = 0, $$pre$i = 0, $$pre78 = 0, $$sink81 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, $switch$split42D = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$067 = 0;
  STACKTOP = sp;return ($$067|0);
 }
 $4 = (_malloc(140)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$067 = 0;
  STACKTOP = sp;return ($$067|0);
 }
 $6 = ((($4)) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 28|0);
 HEAP32[$7>>2] = 8192;
 $8 = ((($4)) + 80|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($4)) + 12|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($4)) + 60|0);
 HEAP32[$10>>2] = -1;
 $11 = ((($4)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($4)) + 40|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP8[$2>>0]|0;
 $14 = ($13<<24>>24)==(0);
 L7: do {
  if (!($14)) {
   $$06574 = 0;$$06873 = $2;$$075 = 0;$16 = $13;$62 = 0;$63 = 0;
   L8: while(1) {
    $15 = $16 << 24 >> 24;
    $$off = (($16) + -48)<<24>>24;
    $17 = ($$off&255)<(10);
    L10: do {
     if ($17) {
      $18 = (($15) + -48)|0;
      HEAP32[$10>>2] = $18;
      $$1 = $$075;$$166 = $$06574;$22 = $63;$23 = $62;
     } else {
      do {
       switch ($15|0) {
       case 43:  {
        label = 10;
        break L8;
        break;
       }
       case 114:  {
        HEAP32[$9>>2] = 7247;
        $$1 = $$075;$$166 = $$06574;$22 = 7247;$23 = $62;
        break L10;
        break;
       }
       case 119:  {
        HEAP32[$9>>2] = 31153;
        $$1 = $$075;$$166 = $$06574;$22 = 31153;$23 = $62;
        break L10;
        break;
       }
       case 97:  {
        HEAP32[$9>>2] = 1;
        $$1 = $$075;$$166 = $$06574;$22 = 1;$23 = $62;
        break L10;
        break;
       }
       case 84:  {
        HEAP32[$12>>2] = 1;
        $$1 = $$075;$$166 = $$06574;$22 = $63;$23 = 1;
        break L10;
        break;
       }
       case 101:  {
        $$1 = $$075;$$166 = 1;$22 = $63;$23 = $62;
        break L10;
        break;
       }
       case 120:  {
        $$1 = 1;$$166 = $$06574;$22 = $63;$23 = $62;
        break L10;
        break;
       }
       case 102:  {
        HEAP32[$11>>2] = 1;
        $$1 = $$075;$$166 = $$06574;$22 = $63;$23 = $62;
        break L10;
        break;
       }
       case 104:  {
        HEAP32[$11>>2] = 2;
        $$1 = $$075;$$166 = $$06574;$22 = $63;$23 = $62;
        break L10;
        break;
       }
       case 82:  {
        HEAP32[$11>>2] = 3;
        $$1 = $$075;$$166 = $$06574;$22 = $63;$23 = $62;
        break L10;
        break;
       }
       case 70:  {
        HEAP32[$11>>2] = 4;
        $$1 = $$075;$$166 = $$06574;$22 = $63;$23 = $62;
        break L10;
        break;
       }
       default: {
        $$1 = $$075;$$166 = $$06574;$22 = $63;$23 = $62;
        break L10;
       }
       }
      } while(0);
     }
    } while(0);
    $19 = ((($$06873)) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     break;
    } else {
     $$06574 = $$166;$$06873 = $19;$$075 = $$1;$16 = $20;$62 = $23;$63 = $22;
    }
   }
   if ((label|0) == 10) {
    _free($4);
    $$067 = 0;
    STACKTOP = sp;return ($$067|0);
   }
   $switch$split2D = ($22|0)<(7247);
   L29: do {
    if ($switch$split2D) {
     switch ($22|0) {
     case 0:  {
      break L7;
      break;
     }
     default: {
     }
     }
    } else {
     switch ($22|0) {
     case 7247:  {
      break;
     }
     default: {
      break L29;
     }
     }
     $24 = ($23|0)==(0);
     if ($24) {
      HEAP32[$12>>2] = 1;
      break;
     }
     _free($4);
     $$067 = 0;
     STACKTOP = sp;return ($$067|0);
    }
   } while(0);
   $25 = (_strlen($0)|0);
   $26 = (($25) + 1)|0;
   $27 = (_malloc($26)|0);
   $28 = ((($4)) + 20|0);
   HEAP32[$28>>2] = $27;
   $29 = ($27|0)==(0|0);
   if ($29) {
    _free($4);
    $$067 = 0;
    STACKTOP = sp;return ($$067|0);
   }
   HEAP32[$vararg_buffer>>2] = $0;
   (_snprintf($27,$26,16046,$vararg_buffer)|0);
   $30 = HEAP32[$9>>2]|0;
   $31 = ($1|0)>(-1);
   do {
    if ($31) {
     $32 = ((($4)) + 16|0);
     HEAP32[$32>>2] = $1;
     $46 = $30;$47 = $1;
    } else {
     $33 = ($$166|0)!=(0);
     $34 = $33 ? 557056 : 32768;
     $35 = ($30|0)==(7247);
     $36 = ($$1|0)!=(0);
     $37 = $36 ? 193 : 65;
     $38 = ($30|0)==(31153);
     $39 = $38 ? 512 : 1024;
     $40 = $39 | $37;
     $$70 = $35 ? 0 : $40;
     $41 = $$70 | $34;
     HEAP32[$vararg_buffer1>>2] = 438;
     $42 = (_open($0,$41,$vararg_buffer1)|0);
     $43 = ((($4)) + 16|0);
     HEAP32[$43>>2] = $42;
     $44 = ($42|0)==(-1);
     if (!($44)) {
      $$pre = HEAP32[$9>>2]|0;
      $46 = $$pre;$47 = $42;
      break;
     }
     $45 = HEAP32[$28>>2]|0;
     _free($45);
     _free($4);
     $$067 = 0;
     STACKTOP = sp;return ($$067|0);
    }
   } while(0);
   $switch$split42D = ($46|0)<(7247);
   L50: do {
    if ($switch$split42D) {
     switch ($46|0) {
     case 1:  {
      break;
     }
     default: {
      $$sink81 = $4;
      label = 35;
      break L50;
     }
     }
     HEAP32[$9>>2] = 31153;
     $$sink81 = $4;
     label = 35;
    } else {
     switch ($46|0) {
     case 7247:  {
      break;
     }
     default: {
      $$sink81 = $4;
      label = 35;
      break L50;
     }
     }
     $48 = (_lseek($47,0,1)|0);
     $49 = ((($4)) + 48|0);
     $50 = ($48|0)==(-1);
     $$ = $50 ? 0 : $48;
     HEAP32[$49>>2] = $$;
     $$pre78 = HEAP32[$9>>2]|0;
     HEAP32[$4>>2] = 0;
     $51 = ($$pre78|0)==(7247);
     if ($51) {
      $52 = ((($4)) + 52|0);
      HEAP32[$52>>2] = 0;
      $53 = ((($4)) + 56|0);
      HEAP32[$53>>2] = 0;
      $54 = ((($4)) + 44|0);
      $$sink81 = $54;
      label = 35;
     }
    }
   } while(0);
   if ((label|0) == 35) {
    HEAP32[$$sink81>>2] = 0;
   }
   $55 = ((($4)) + 72|0);
   HEAP32[$55>>2] = 0;
   $56 = HEAP32[$8>>2]|0;
   $57 = ($56|0)==(0|0);
   $$pre$i = ((($4)) + 76|0);
   if (!($57)) {
    $58 = HEAP32[$$pre$i>>2]|0;
    $59 = ($58|0)==(-4);
    if (!($59)) {
     _free($56);
    }
    HEAP32[$8>>2] = 0;
   }
   HEAP32[$$pre$i>>2] = 0;
   $60 = ((($4)) + 8|0);
   HEAP32[$60>>2] = 0;
   $61 = ((($4)) + 88|0);
   HEAP32[$61>>2] = 0;
   $$067 = $4;
   STACKTOP = sp;return ($$067|0);
  }
 } while(0);
 _free($4);
 $$067 = 0;
 STACKTOP = sp;return ($$067|0);
}
function _gzdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ($0|0)==(-1);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_malloc(19)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   HEAP32[$vararg_buffer>>2] = $0;
   (_snprintf($3,19,16049,$vararg_buffer)|0);
   $5 = (_gz_open($3,$0,$1)|0);
   _free($3);
   $$0 = $5;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _gz_error($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ((($0)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($0)) + 76|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(-4);
  if (!($8)) {
   _free($4);
  }
  HEAP32[$3>>2] = 0;
 }
 switch ($1|0) {
 case 0: case -5:  {
  break;
 }
 default: {
  HEAP32[$0>>2] = 0;
 }
 }
 $9 = ((($0)) + 76|0);
 HEAP32[$9>>2] = $1;
 $10 = ($2|0)==(0|0);
 $11 = ($1|0)==(-4);
 $or$cond3 = $11 | $10;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $12 = ((($0)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_strlen($13)|0);
 $15 = (_strlen($2)|0);
 $16 = (($14) + 3)|0;
 $17 = (($16) + ($15))|0;
 $18 = (_malloc($17)|0);
 HEAP32[$3>>2] = $18;
 $19 = ($18|0)==(0|0);
 if ($19) {
  HEAP32[$9>>2] = -4;
  STACKTOP = sp;return;
 } else {
  $20 = (_strlen($13)|0);
  $21 = (_strlen($2)|0);
  $22 = (($20) + 3)|0;
  $23 = (($22) + ($21))|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 16064;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  (_snprintf($18,$23,16057,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _gzread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$018$ph$i71 = 0, $$050 = 0, $$051 = 0, $$053 = 0, $$053$ = 0, $$059 = 0, $$1 = 0, $$152 = 0, $$154 = 0, $$2 = 0, $$3 = 0, $$pre$phi85Z2D = 0, $$pre$phi89Z2D = 0, $$pre$phi91Z2D = 0, $$pre$phi93Z2D = 0, $$pre$phiZ2D = 0, $$pre82 = 0, $$pre86 = 0, $$pre90 = 0;
 var $$pre92 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(7247);
 if (!($6)) {
  $$0 = -1;
  return ($$0|0);
 }
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case -5: case 0:  {
  break;
 }
 default: {
  $$0 = -1;
  return ($$0|0);
 }
 }
 $9 = ($2|0)<(0);
 if ($9) {
  _gz_error($0,-3,16067);
  $$0 = -1;
  return ($$0|0);
 }
 $10 = ($2|0)==(0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ((($0)) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 L17: do {
  if ($13) {
   $$pre82 = ((($0)) + 52|0);
   $$pre86 = ((($0)) + 88|0);
   $$pre90 = ((($0)) + 8|0);
   $$pre92 = ((($0)) + 4|0);
   $$pre$phi85Z2D = $$pre82;$$pre$phi89Z2D = $$pre86;$$pre$phi91Z2D = $$pre90;$$pre$phi93Z2D = $$pre92;$$pre$phiZ2D = $0;
  } else {
   HEAP32[$11>>2] = 0;
   $14 = ((($0)) + 68|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($0)) + 88|0);
   $17 = ((($0)) + 52|0);
   $18 = ((($0)) + 4|0);
   $19 = ((($0)) + 8|0);
   $20 = ($15|0)==(0);
   if ($20) {
    $$pre$phi85Z2D = $17;$$pre$phi89Z2D = $16;$$pre$phi91Z2D = $19;$$pre$phi93Z2D = $18;$$pre$phiZ2D = $0;
   } else {
    $$018$ph$i71 = $15;
    L20: while(1) {
     while(1) {
      $26 = HEAP32[$0>>2]|0;
      $27 = ($26|0)==(0);
      if (!($27)) {
       break;
      }
      $38 = HEAP32[$17>>2]|0;
      $39 = ($38|0)==(0);
      if (!($39)) {
       $40 = HEAP32[$16>>2]|0;
       $41 = ($40|0)==(0);
       if ($41) {
        $$pre$phi85Z2D = $17;$$pre$phi89Z2D = $16;$$pre$phi91Z2D = $19;$$pre$phi93Z2D = $18;$$pre$phiZ2D = $0;
        break L17;
       }
      }
      $42 = (_gz_fetch($0)|0);
      $43 = ($42|0)==(-1);
      if ($43) {
       $$0 = -1;
       break L20;
      }
     }
     $28 = ($26|0)<(0);
     $29 = ($26|0)>($$018$ph$i71|0);
     $or$cond$i = $28 | $29;
     $30 = $or$cond$i ? $$018$ph$i71 : $26;
     $31 = (($26) - ($30))|0;
     HEAP32[$0>>2] = $31;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($30)|0);
     HEAP32[$18>>2] = $33;
     $34 = HEAP32[$19>>2]|0;
     $35 = (($34) + ($30))|0;
     HEAP32[$19>>2] = $35;
     $36 = (($$018$ph$i71) - ($30))|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$pre$phi85Z2D = $17;$$pre$phi89Z2D = $16;$$pre$phi91Z2D = $19;$$pre$phi93Z2D = $18;$$pre$phiZ2D = $0;
      break L17;
     } else {
      $$018$ph$i71 = $36;
     }
    }
    return ($$0|0);
   }
  }
 } while(0);
 $21 = ((($0)) + 44|0);
 $22 = ((($0)) + 24|0);
 $23 = ((($0)) + 16|0);
 $24 = ((($0)) + 100|0);
 $25 = ((($0)) + 96|0);
 $$050 = $1;$$051 = 0;$$053 = $2;
 L31: while(1) {
  $44 = HEAP32[$$pre$phiZ2D>>2]|0;
  $45 = ($44|0)==(0);
  L33: do {
   if ($45) {
    $52 = HEAP32[$$pre$phi85Z2D>>2]|0;
    $53 = ($52|0)==(0);
    if (!($53)) {
     $54 = HEAP32[$$pre$phi89Z2D>>2]|0;
     $55 = ($54|0)==(0);
     if ($55) {
      label = 21;
      break L31;
     }
    }
    $57 = HEAP32[$21>>2]|0;
    $58 = ($57|0)==(0);
    if (!($58)) {
     $59 = HEAP32[$22>>2]|0;
     $60 = $59 << 1;
     $61 = ($$053>>>0)<($60>>>0);
     if (!($61)) {
      $64 = ($57|0)==(1);
      if ($64) {
       $$059 = 0;
      } else {
       HEAP32[$24>>2] = $$053;
       HEAP32[$25>>2] = $$050;
       $76 = (_gz_decomp($0)|0);
       $77 = ($76|0)==(-1);
       if ($77) {
        $$0 = -1;
        label = 36;
        break L31;
       }
       $78 = HEAP32[$$pre$phiZ2D>>2]|0;
       $$2 = $78;$$sink = 0;
       label = 33;
       break;
      }
      while(1) {
       $65 = HEAP32[$23>>2]|0;
       $66 = (($$050) + ($$059)|0);
       $67 = (($$053) - ($$059))|0;
       $68 = (_read($65,$66,$67)|0);
       $69 = ($68|0)<(1);
       if ($69) {
        break;
       }
       $70 = (($68) + ($$059))|0;
       $71 = ($70>>>0)<($$053>>>0);
       if ($71) {
        $$059 = $70;
       } else {
        $$3 = $70;
        label = 34;
        break L33;
       }
      }
      $72 = ($68|0)<(0);
      if ($72) {
       label = 30;
       break L31;
      }
      HEAP32[$$pre$phi85Z2D>>2] = 1;
      $$3 = $$059;
      label = 34;
      break;
     }
    }
    $62 = (_gz_fetch($0)|0);
    $63 = ($62|0)==(-1);
    if ($63) {
     $$0 = -1;
     label = 36;
     break L31;
    } else {
     $$1 = $$050;$$152 = $$051;$$154 = $$053;
    }
   } else {
    $46 = ($44>>>0)>($$053>>>0);
    $$053$ = $46 ? $$053 : $44;
    $47 = HEAP32[$$pre$phi93Z2D>>2]|0;
    _memcpy(($$050|0),($47|0),($$053$|0))|0;
    $48 = HEAP32[$$pre$phi93Z2D>>2]|0;
    $49 = (($48) + ($$053$)|0);
    HEAP32[$$pre$phi93Z2D>>2] = $49;
    $50 = HEAP32[$$pre$phiZ2D>>2]|0;
    $51 = (($50) - ($$053$))|0;
    $$2 = $$053$;$$sink = $51;
    label = 33;
   }
  } while(0);
  if ((label|0) == 33) {
   label = 0;
   HEAP32[$$pre$phiZ2D>>2] = $$sink;
   $$3 = $$2;
   label = 34;
  }
  if ((label|0) == 34) {
   label = 0;
   $79 = (($$053) - ($$3))|0;
   $80 = (($$050) + ($$3)|0);
   $81 = (($$3) + ($$051))|0;
   $82 = HEAP32[$$pre$phi91Z2D>>2]|0;
   $83 = (($82) + ($$3))|0;
   HEAP32[$$pre$phi91Z2D>>2] = $83;
   $$1 = $80;$$152 = $81;$$154 = $79;
  }
  $84 = ($$154|0)==(0);
  if ($84) {
   $$0 = $$152;
   label = 36;
   break;
  } else {
   $$050 = $$1;$$051 = $$152;$$053 = $$154;
  }
 }
 if ((label|0) == 21) {
  $56 = ((($0)) + 56|0);
  HEAP32[$56>>2] = 1;
  $$0 = $$051;
  return ($$0|0);
 }
 else if ((label|0) == 30) {
  $73 = (___errno_location()|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (_strerror($74)|0);
  _gz_error($0,-1,$75);
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 36) {
  return ($$0|0);
 }
 return (0)|0;
}
function _gz_fetch($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = ((($0)) + 52|0);
 $3 = ((($0)) + 88|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 100|0);
 $6 = ((($0)) + 36|0);
 $7 = ((($0)) + 96|0);
 L1: while(1) {
  $8 = HEAP32[$1>>2]|0;
  switch ($8|0) {
  case 1:  {
   label = 5;
   break L1;
   break;
  }
  case 0:  {
   $9 = (_gz_look($0)|0);
   $10 = ($9|0)==(-1);
   if ($10) {
    $$0 = -1;
    label = 16;
    break L1;
   }
   $11 = HEAP32[$1>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$0 = 0;
    label = 16;
    break L1;
   }
   break;
  }
  case 2:  {
   $32 = HEAP32[$4>>2]|0;
   $33 = $32 << 1;
   HEAP32[$5>>2] = $33;
   $34 = HEAP32[$6>>2]|0;
   HEAP32[$7>>2] = $34;
   $35 = (_gz_decomp($0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 16;
    break L1;
   }
   break;
  }
  default: {
  }
  }
  $37 = HEAP32[$0>>2]|0;
  $38 = ($37|0)==(0);
  if (!($38)) {
   $$0 = 0;
   label = 16;
   break;
  }
  $39 = HEAP32[$2>>2]|0;
  $40 = ($39|0)==(0);
  if ($40) {
   continue;
  }
  $41 = HEAP32[$3>>2]|0;
  $42 = ($41|0)==(0);
  if ($42) {
   $$0 = 0;
   label = 16;
   break;
  }
 }
 if ((label|0) == 5) {
  $13 = HEAP32[$6>>2]|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = $14 << 1;
  HEAP32[$0>>2] = 0;
  $16 = ((($0)) + 16|0);
  $19 = 0;
  while(1) {
   $17 = HEAP32[$16>>2]|0;
   $18 = (($13) + ($19)|0);
   $20 = (($15) - ($19))|0;
   $21 = (_read($17,$18,$20)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    label = 8;
    break;
   }
   $23 = HEAP32[$0>>2]|0;
   $24 = (($23) + ($21))|0;
   HEAP32[$0>>2] = $24;
   $25 = ($24>>>0)<($15>>>0);
   if ($25) {
    $19 = $24;
   } else {
    break;
   }
  }
  do {
   if ((label|0) == 8) {
    $26 = ($21|0)<(0);
    if (!($26)) {
     HEAP32[$2>>2] = 1;
     break;
    }
    $27 = (___errno_location()|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (_strerror($28)|0);
    _gz_error($0,-1,$29);
    $$0 = -1;
    return ($$0|0);
   }
  } while(0);
  $30 = HEAP32[$6>>2]|0;
  $31 = ((($0)) + 4|0);
  HEAP32[$31>>2] = $30;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 16) {
  return ($$0|0);
 }
 return (0)|0;
}
function _gz_decomp($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$032 = 0, $$037 = 0, $$1 = 0, $$138$ph = 0, $$pre = 0, $$pre29$i = 0, $$pre68 = 0, $$pre69 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 84|0);
 $2 = ((($0)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 88|0);
 $5 = ((($0)) + 76|0);
 $6 = ((($0)) + 52|0);
 $$pre29$i = ((($0)) + 32|0);
 $7 = ((($0)) + 24|0);
 $8 = ((($0)) + 16|0);
 $$032 = 0;
 L1: while(1) {
  $9 = HEAP32[$4>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = HEAP32[$5>>2]|0;
   switch ($11|0) {
   case -5: case 0:  {
    break;
   }
   default: {
    $$0 = -1;
    label = 20;
    break L1;
   }
   }
   $12 = HEAP32[$6>>2]|0;
   $13 = ($12|0)==(0);
   if (!($13)) {
    label = 12;
    break;
   }
   $$pre = HEAP32[$$pre29$i>>2]|0;
   $$pre68 = HEAP32[$7>>2]|0;
   $$037 = 0;
   while(1) {
    $14 = HEAP32[$8>>2]|0;
    $15 = (($$pre) + ($$037)|0);
    $16 = (($$pre68) - ($$037))|0;
    $17 = (_read($14,$15,$16)|0);
    $18 = ($17|0)<(1);
    if ($18) {
     label = 8;
     break;
    }
    $19 = (($17) + ($$037))|0;
    $20 = ($19>>>0)<($$pre68>>>0);
    if ($20) {
     $$037 = $19;
    } else {
     $$138$ph = $19;
     break;
    }
   }
   if ((label|0) == 8) {
    label = 0;
    $21 = ($17|0)<(0);
    if ($21) {
     label = 10;
     break;
    }
    HEAP32[$6>>2] = 1;
    $$138$ph = $$037;
   }
   $25 = HEAP32[$4>>2]|0;
   $26 = (($25) + ($$138$ph))|0;
   HEAP32[$4>>2] = $26;
   $27 = HEAP32[$$pre29$i>>2]|0;
   HEAP32[$1>>2] = $27;
   $28 = ($26|0)==(0);
   if ($28) {
    label = 12;
    break;
   }
  }
  $29 = (_inflate($1,0)|0);
  switch ($29|0) {
  case 2: case -2:  {
   label = 14;
   break L1;
   break;
  }
  case -4:  {
   label = 15;
   break L1;
   break;
  }
  case -3:  {
   label = 16;
   break L1;
   break;
  }
  default: {
  }
  }
  $33 = HEAP32[$2>>2]|0;
  $34 = ($33|0)!=(0);
  $35 = ($29|0)!=(1);
  $36 = $35 & $34;
  if ($36) {
   $$032 = $29;
  } else {
   $$1 = $29;$38 = $33;
   break;
  }
 }
 if ((label|0) == 10) {
  $22 = (___errno_location()|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_strerror($23)|0);
  _gz_error($0,-1,$24);
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 12) {
  _gz_error($0,-5,16104);
  $$pre69 = HEAP32[$2>>2]|0;
  $$1 = $$032;$38 = $$pre69;
 }
 else if ((label|0) == 14) {
  _gz_error($0,-2,16127);
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 15) {
  _gz_error($0,-4,16227);
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 16) {
  $30 = ((($0)) + 108|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  $$ = $32 ? 16166 : $31;
  _gz_error($0,-3,$$);
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 20) {
  return ($$0|0);
 }
 $37 = (($3) - ($38))|0;
 HEAP32[$0>>2] = $37;
 $39 = ((($0)) + 96|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (0 - ($37))|0;
 $42 = (($40) + ($41)|0);
 $43 = ((($0)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = ($$1|0)==(1);
 if (!($44)) {
  $$0 = 0;
  return ($$0|0);
 }
 $45 = ((($0)) + 44|0);
 HEAP32[$45>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _gz_look($0) {
 $0 = $0|0;
 var $$0 = 0, $$054 = 0, $$1$ph = 0, $$pr56 = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $$pre29$i = 0, $$pre63 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 84|0);
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = ((($0)) + 28|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_malloc($6)|0);
   $8 = ((($0)) + 32|0);
   HEAP32[$8>>2] = $7;
   $9 = $6 << 1;
   $10 = (_malloc($9)|0);
   $11 = ((($0)) + 36|0);
   HEAP32[$11>>2] = $10;
   $12 = ($7|0)==(0|0);
   $13 = ($10|0)==(0|0);
   $or$cond = $12 | $13;
   if (!($or$cond)) {
    HEAP32[$2>>2] = $6;
    $16 = ((($0)) + 116|0);
    HEAP32[$16>>2] = 0;
    $17 = ((($0)) + 120|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($0)) + 124|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($0)) + 88|0);
    HEAP32[$19>>2] = 0;
    HEAP32[$1>>2] = 0;
    $20 = (_inflateInit2_($1,31,16241,56)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $$pre$phiZ2D = $19;
     break;
    }
    $22 = HEAP32[$11>>2]|0;
    _free($22);
    $23 = HEAP32[$8>>2]|0;
    _free($23);
    HEAP32[$2>>2] = 0;
    _gz_error($0,-4,16227);
    $$0 = -1;
    return ($$0|0);
   }
   if ($13) {
    $14 = $7;
   } else {
    _free($10);
    $$pre = HEAP32[$8>>2]|0;
    $14 = $$pre;
   }
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    _free($14);
   }
   _gz_error($0,-4,16227);
   $$0 = -1;
   return ($$0|0);
  } else {
   $$pre63 = ((($0)) + 88|0);
   $$pre$phiZ2D = $$pre63;
  }
 } while(0);
 $24 = HEAP32[$$pre$phiZ2D>>2]|0;
 $25 = ($24>>>0)<(2);
 L17: do {
  if ($25) {
   $26 = ((($0)) + 76|0);
   $27 = HEAP32[$26>>2]|0;
   switch ($27|0) {
   case -5: case 0:  {
    break;
   }
   default: {
    $$0 = -1;
    return ($$0|0);
   }
   }
   $28 = ((($0)) + 52|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = ($24|0)==(0);
    $$pre29$i = ((($0)) + 32|0);
    if ($31) {
     $37 = 0;
    } else {
     $32 = HEAP32[$1>>2]|0;
     $33 = HEAP32[$$pre29$i>>2]|0;
     $34 = HEAP8[$32>>0]|0;
     HEAP8[$33>>0] = $34;
     $$pre$i = HEAP32[$$pre$phiZ2D>>2]|0;
     $37 = $$pre$i;
    }
    $35 = HEAP32[$$pre29$i>>2]|0;
    $36 = (($35) + ($37)|0);
    $38 = HEAP32[$2>>2]|0;
    $39 = (($38) - ($37))|0;
    $40 = ((($0)) + 16|0);
    $$054 = 0;
    while(1) {
     $41 = HEAP32[$40>>2]|0;
     $42 = (($36) + ($$054)|0);
     $43 = (($39) - ($$054))|0;
     $44 = (_read($41,$42,$43)|0);
     $45 = ($44|0)<(1);
     if ($45) {
      label = 19;
      break;
     }
     $46 = (($44) + ($$054))|0;
     $47 = ($46>>>0)<($39>>>0);
     if ($47) {
      $$054 = $46;
     } else {
      $$1$ph = $46;
      break;
     }
    }
    do {
     if ((label|0) == 19) {
      $48 = ($44|0)<(0);
      if (!($48)) {
       HEAP32[$28>>2] = 1;
       $$1$ph = $$054;
       break;
      }
      $49 = (___errno_location()|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (_strerror($50)|0);
      _gz_error($0,-1,$51);
      $$0 = -1;
      return ($$0|0);
     }
    } while(0);
    $52 = HEAP32[$$pre$phiZ2D>>2]|0;
    $53 = (($52) + ($$1$ph))|0;
    HEAP32[$$pre$phiZ2D>>2] = $53;
    $54 = HEAP32[$$pre29$i>>2]|0;
    HEAP32[$1>>2] = $54;
    $$pr56 = $53;
   } else {
    $$pr56 = $24;
   }
   switch ($$pr56|0) {
   case 1:  {
    $71 = 1;
    break L17;
    break;
   }
   case 0:  {
    $$0 = 0;
    break;
   }
   default: {
    $74 = $$pr56;
    label = 24;
    break L17;
   }
   }
   return ($$0|0);
  } else {
   $74 = $24;
   label = 24;
  }
 } while(0);
 if ((label|0) == 24) {
  $55 = HEAP32[$1>>2]|0;
  $56 = HEAP8[$55>>0]|0;
  $57 = ($56<<24>>24)==(31);
  if ($57) {
   $58 = ((($55)) + 1|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = ($59<<24>>24)==(-117);
   if ($60) {
    (_inflateReset($1)|0);
    $61 = ((($0)) + 44|0);
    HEAP32[$61>>2] = 2;
    $62 = ((($0)) + 40|0);
    HEAP32[$62>>2] = 0;
    $$0 = 0;
    return ($$0|0);
   } else {
    $71 = $74;
   }
  } else {
   $71 = $74;
  }
 }
 $63 = ((($0)) + 40|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(0);
 if ($65) {
  HEAP32[$$pre$phiZ2D>>2] = 0;
  $66 = ((($0)) + 52|0);
  HEAP32[$66>>2] = 1;
  HEAP32[$0>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 } else {
  $67 = ((($0)) + 36|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($0)) + 4|0);
  HEAP32[$69>>2] = $68;
  $70 = HEAP32[$1>>2]|0;
  _memcpy(($68|0),($70|0),($71|0))|0;
  $72 = HEAP32[$$pre$phiZ2D>>2]|0;
  HEAP32[$0>>2] = $72;
  HEAP32[$$pre$phiZ2D>>2] = 0;
  $73 = ((($0)) + 44|0);
  HEAP32[$73>>2] = 1;
  HEAP32[$63>>2] = 1;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gzclose_r($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(7247);
 if (!($4)) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($0)) + 84|0);
  (_inflateEnd($8)|0);
  $9 = ((($0)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = ((($0)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
 }
 $13 = ((($0)) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(-5);
 $16 = $15 ? -5 : 0;
 _gz_error($0,0,0);
 $17 = ((($0)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 $19 = ((($0)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_close($20)|0);
 _free($0);
 $22 = ($21|0)!=(0);
 $23 = $22 ? -1 : $16;
 $$0 = $23;
 return ($$0|0);
}
function _gz_init($0) {
 $0 = $0|0;
 var $$0 = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 84|0);
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_malloc($3)|0);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  _gz_error($0,-4,16227);
  $$0 = -1;
  return ($$0|0);
 }
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($0)) + 24|0);
  HEAP32[$10>>2] = $3;
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (_malloc($3)|0);
 $12 = ((($0)) + 36|0);
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)==(0|0);
 if ($13) {
  _free($4);
  _gz_error($0,-4,16227);
  $$0 = -1;
  return ($$0|0);
 }
 $14 = ((($0)) + 116|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 120|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 124|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 64|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_deflateInit2_($1,$18,8,31,8,$20,16241,56)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = HEAP32[$12>>2]|0;
  _free($23);
  $24 = HEAP32[$5>>2]|0;
  _free($24);
  _gz_error($0,-4,16227);
  $$0 = -1;
  return ($$0|0);
 }
 $$pr = HEAP32[$7>>2]|0;
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($0)) + 24|0);
 HEAP32[$26>>2] = $25;
 $27 = ($$pr|0)==(0);
 if (!($27)) {
  $$0 = 0;
  return ($$0|0);
 }
 $28 = ((($0)) + 100|0);
 HEAP32[$28>>2] = $25;
 $29 = HEAP32[$12>>2]|0;
 $30 = ((($0)) + 96|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($0)) + 4|0);
 HEAP32[$31>>2] = $29;
 $$0 = 0;
 return ($$0|0);
}
function _gz_comp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$050 = 0, $$pre = 0, $$pre63 = 0, $$pre65 = 0, $$pre66 = 0, $$pre68 = 0, $$pre70 = 0, $$pre72 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $or$cond = 0, $or$cond51 = 0, $or$cond51$us = 0, $or$cond51$us56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 84|0);
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_gz_init($0)|0);
  $7 = ($6|0)==(-1);
  if ($7) {
   $$0 = -1;
   return ($$0|0);
  }
 }
 $8 = ((($0)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $55 = ((($0)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$2>>2]|0;
  $58 = ((($0)) + 88|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (_write($56,$57,$59)|0);
  $61 = ($60|0)<(0);
  if (!($61)) {
   $62 = HEAP32[$58>>2]|0;
   $63 = ($60|0)==($62|0);
   if ($63) {
    HEAP32[$58>>2] = 0;
    $$0 = 0;
    return ($$0|0);
   }
  }
  $64 = (___errno_location()|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_strerror($65)|0);
  _gz_error($0,-1,$66);
  $$0 = -1;
  return ($$0|0);
 }
 $11 = ((($0)) + 100|0);
 $12 = ((($0)) + 96|0);
 $13 = ((($0)) + 4|0);
 $14 = ((($0)) + 36|0);
 $15 = ((($0)) + 16|0);
 L14: do {
  switch ($1|0) {
  case 0:  {
   $$pre66 = HEAP32[$11>>2]|0;
   $16 = $$pre66;
   while(1) {
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = HEAP32[$12>>2]|0;
     $19 = HEAP32[$13>>2]|0;
     $20 = $19;
     $21 = (($18) - ($20))|0;
     $22 = ($21|0)==(0);
     if ($22) {
      label = 12;
     } else {
      $23 = HEAP32[$15>>2]|0;
      $24 = (_write($23,$19,$21)|0);
      $25 = ($24|0)>(-1);
      $26 = ($24|0)==($21|0);
      $or$cond51$us = $25 & $26;
      if (!($or$cond51$us)) {
       label = 31;
       break L14;
      }
      $$pre68 = HEAP32[$11>>2]|0;
      $27 = ($$pre68|0)==(0);
      if ($27) {
       label = 12;
      } else {
       $$pre70 = HEAP32[$12>>2]|0;
       $30 = $$pre70;$93 = $$pre68;
      }
     }
     if ((label|0) == 12) {
      label = 0;
      $28 = HEAP32[$3>>2]|0;
      HEAP32[$11>>2] = $28;
      $29 = HEAP32[$14>>2]|0;
      HEAP32[$12>>2] = $29;
      $30 = $29;$93 = $28;
     }
     HEAP32[$13>>2] = $30;
     $34 = $93;
    } else {
     $34 = $16;
    }
    $31 = (_deflate($2,0)|0);
    $32 = ($31|0)==(-2);
    if ($32) {
     label = 37;
     break L14;
    }
    $33 = HEAP32[$11>>2]|0;
    $35 = ($34|0)==($33|0);
    if ($35) {
     label = 39;
     break;
    } else {
     $16 = $33;
    }
   }
   break;
  }
  case 4:  {
   $$pre = HEAP32[$11>>2]|0;
   $$050 = 0;$67 = $$pre;
   while(1) {
    $68 = ($67|0)==(0);
    $69 = ($$050|0)==(1);
    $or$cond = $68 | $69;
    if ($or$cond) {
     $70 = HEAP32[$12>>2]|0;
     $71 = HEAP32[$13>>2]|0;
     $72 = $71;
     $73 = (($70) - ($72))|0;
     $74 = ($73|0)==(0);
     if ($74) {
      $82 = $67;
     } else {
      $75 = HEAP32[$15>>2]|0;
      $76 = (_write($75,$71,$73)|0);
      $77 = ($76|0)>(-1);
      $78 = ($76|0)==($73|0);
      $or$cond51 = $77 & $78;
      if (!($or$cond51)) {
       label = 31;
       break L14;
      }
      $$pre63 = HEAP32[$11>>2]|0;
      $82 = $$pre63;
     }
     $83 = ($82|0)==(0);
     if ($83) {
      $84 = HEAP32[$3>>2]|0;
      HEAP32[$11>>2] = $84;
      $85 = HEAP32[$14>>2]|0;
      HEAP32[$12>>2] = $85;
      $86 = $85;$94 = $84;
     } else {
      $$pre65 = HEAP32[$12>>2]|0;
      $86 = $$pre65;$94 = $82;
     }
     HEAP32[$13>>2] = $86;
     $90 = $94;
    } else {
     $90 = $67;
    }
    $87 = (_deflate($2,4)|0);
    $88 = ($87|0)==(-2);
    if ($88) {
     label = 37;
     break L14;
    }
    $89 = HEAP32[$11>>2]|0;
    $91 = ($90|0)==($89|0);
    if ($91) {
     label = 39;
     break;
    } else {
     $$050 = $87;$67 = $89;
    }
   }
   break;
  }
  default: {
   while(1) {
    $36 = HEAP32[$12>>2]|0;
    $37 = HEAP32[$13>>2]|0;
    $38 = $37;
    $39 = (($36) - ($38))|0;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP32[$15>>2]|0;
     $42 = (_write($41,$37,$39)|0);
     $43 = ($42|0)>(-1);
     $44 = ($42|0)==($39|0);
     $or$cond51$us56 = $43 & $44;
     if (!($or$cond51$us56)) {
      label = 31;
      break L14;
     }
    }
    $45 = HEAP32[$11>>2]|0;
    $46 = ($45|0)==(0);
    if ($46) {
     $47 = HEAP32[$3>>2]|0;
     HEAP32[$11>>2] = $47;
     $48 = HEAP32[$14>>2]|0;
     HEAP32[$12>>2] = $48;
     $49 = $48;$53 = $47;
    } else {
     $$pre72 = HEAP32[$12>>2]|0;
     $49 = $$pre72;$53 = $45;
    }
    HEAP32[$13>>2] = $49;
    $50 = (_deflate($2,$1)|0);
    $51 = ($50|0)==(-2);
    if ($51) {
     label = 37;
     break L14;
    }
    $52 = HEAP32[$11>>2]|0;
    $54 = ($53|0)==($52|0);
    if ($54) {
     label = 39;
     break;
    }
   }
  }
  }
 } while(0);
 if ((label|0) == 31) {
  $79 = (___errno_location()|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (_strerror($80)|0);
  _gz_error($0,-1,$81);
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 37) {
  _gz_error($0,-2,16188);
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 39) {
  $92 = ($1|0)==(4);
  if (!($92)) {
   $$0 = 0;
   return ($$0|0);
  }
  (_deflateReset($2)|0);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _gzclose_w($0) {
 $0 = $0|0;
 var $$$1 = 0, $$0 = 0, $$023 = 0, $$02629$i = 0, $$02728$i = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(31153);
 if (!($4)) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($0)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 L7: do {
  if ($7) {
   $$023 = 0;
  } else {
   HEAP32[$5>>2] = 0;
   $8 = ((($0)) + 68|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($0)) + 88|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    label = 6;
   } else {
    $13 = (_gz_comp($0,0)|0);
    $14 = ($13|0)==(-1);
    if (!($14)) {
     label = 6;
    }
   }
   L11: do {
    if ((label|0) == 6) {
     $15 = ($9|0)==(0);
     if ($15) {
      $$023 = 0;
      break L7;
     }
     $16 = ((($0)) + 24|0);
     $17 = ((($0)) + 32|0);
     $18 = ((($0)) + 84|0);
     $19 = ((($0)) + 8|0);
     $$02629$i = $9;$$02728$i = 0;
     while(1) {
      $22 = HEAP32[$16>>2]|0;
      $23 = ($22|0)<(0);
      $24 = ($22|0)>($$02629$i|0);
      $or$cond$i = $23 | $24;
      $25 = $or$cond$i ? $$02629$i : $22;
      if (!($$02728$i)) {
       $26 = HEAP32[$17>>2]|0;
       _memset(($26|0),0,($25|0))|0;
      }
      HEAP32[$10>>2] = $25;
      $27 = HEAP32[$17>>2]|0;
      HEAP32[$18>>2] = $27;
      $28 = HEAP32[$19>>2]|0;
      $29 = (($28) + ($25))|0;
      HEAP32[$19>>2] = $29;
      $30 = (_gz_comp($0,0)|0);
      $31 = ($30|0)==(-1);
      $20 = (($$02629$i) - ($25))|0;
      if ($31) {
       break L11;
      }
      $21 = ($20|0)==(0);
      if ($21) {
       $$023 = 0;
       break L7;
      } else {
       $$02629$i = $20;$$02728$i = 1;
      }
     }
    }
   } while(0);
   $32 = ((($0)) + 76|0);
   $33 = HEAP32[$32>>2]|0;
   $$023 = $33;
  }
 } while(0);
 $34 = (_gz_comp($0,4)|0);
 $35 = ($34|0)==(-1);
 if ($35) {
  $36 = ((($0)) + 76|0);
  $37 = HEAP32[$36>>2]|0;
  $$1 = $37;
 } else {
  $$1 = $$023;
 }
 $38 = ((($0)) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 if (!($40)) {
  $41 = ((($0)) + 40|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = ((($0)) + 84|0);
   (_deflateEnd($44)|0);
   $45 = ((($0)) + 36|0);
   $46 = HEAP32[$45>>2]|0;
   _free($46);
  }
  $47 = ((($0)) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  _free($48);
 }
 _gz_error($0,0,0);
 $49 = ((($0)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 _free($50);
 $51 = ((($0)) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (_close($52)|0);
 $54 = ($53|0)==(-1);
 $$$1 = $54 ? -1 : $$1;
 _free($0);
 $$0 = $$$1;
 return ($$0|0);
}
function _inflateReset($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($3)) + 40|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 48|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 28|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 24|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($3)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = $13 & 1;
  $16 = ((($0)) + 48|0);
  HEAP32[$16>>2] = $15;
 }
 HEAP32[$3>>2] = 0;
 $17 = ((($3)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($3)) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = 32768;
 $20 = ((($3)) + 32|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($3)) + 56|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($3)) + 60|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($3)) + 1328|0);
 $24 = ((($3)) + 108|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($3)) + 80|0);
 HEAP32[$25>>2] = $23;
 $26 = ((($3)) + 76|0);
 HEAP32[$26>>2] = $23;
 $27 = ((($3)) + 7104|0);
 HEAP32[$27>>2] = 1;
 $28 = ((($3)) + 7108|0);
 HEAP32[$28>>2] = -1;
 $$0 = 0;
 return ($$0|0);
}
function _inflateReset2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$027 = 0, $$028 = 0, $$pre = 0, $$pre30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = -2;
  return ($$0|0);
 }
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -2;
  return ($$0|0);
 }
 $6 = ($1|0)<(0);
 if ($6) {
  $7 = (0 - ($1))|0;
  $$027 = 0;$$028 = $7;
 } else {
  $8 = $1 >>> 4;
  $9 = (($8) + 1)|0;
  $10 = ($1|0)<(48);
  $11 = $1 & 15;
  $$ = $10 ? $11 : $1;
  $$027 = $9;$$028 = $$;
 }
 $12 = ($$028|0)==(0);
 $13 = $$028 & -8;
 $14 = ($13|0)==(8);
 $or$cond = $12 | $14;
 if (!($or$cond)) {
  $$0 = -2;
  return ($$0|0);
 }
 $15 = ((($4)) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 $$pre30 = ((($4)) + 36|0);
 if ($17) {
  label = 9;
 } else {
  $18 = HEAP32[$$pre30>>2]|0;
  $19 = ($18|0)==($$028|0);
  if ($19) {
   label = 9;
  } else {
   $21 = ((($0)) + 36|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 40|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_vii[$22 & 15]($24,$16);
   HEAP32[$15>>2] = 0;
   $$pre = HEAP32[$3>>2]|0;
   $25 = ((($4)) + 8|0);
   HEAP32[$25>>2] = $$027;
   HEAP32[$$pre30>>2] = $$028;
   $26 = ($$pre|0)==(0|0);
   if ($26) {
    $$0 = -2;
    return ($$0|0);
   } else {
    $28 = $$pre;
   }
  }
 }
 if ((label|0) == 9) {
  $20 = ((($4)) + 8|0);
  HEAP32[$20>>2] = $$027;
  HEAP32[$$pre30>>2] = $$028;
  $28 = $4;
 }
 $27 = ((($28)) + 40|0);
 HEAP32[$27>>2] = 0;
 $29 = ((($28)) + 44|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($28)) + 48|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($28)) + 28|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($0)) + 20|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($0)) + 24|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($28)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0);
 if (!($37)) {
  $38 = ((($0)) + 48|0);
  $39 = $36 & 1;
  HEAP32[$38>>2] = $39;
 }
 HEAP32[$28>>2] = 0;
 $40 = ((($28)) + 4|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($28)) + 12|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($28)) + 20|0);
 HEAP32[$42>>2] = 32768;
 $43 = ((($28)) + 32|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($28)) + 56|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($28)) + 60|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($28)) + 1328|0);
 $47 = ((($28)) + 108|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($28)) + 80|0);
 HEAP32[$48>>2] = $46;
 $49 = ((($28)) + 76|0);
 HEAP32[$49>>2] = $46;
 $50 = ((($28)) + 7104|0);
 HEAP32[$50>>2] = 1;
 $51 = ((($28)) + 7108|0);
 HEAP32[$51>>2] = -1;
 $$0 = 0;
 return ($$0|0);
}
function _inflateInit2_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0|0);
 if ($4) {
  $$0 = -6;
  return ($$0|0);
 }
 $5 = HEAP8[$2>>0]|0;
 $6 = ($5<<24>>24)!=(49);
 $7 = ($3|0)!=(56);
 $or$cond = $7 | $6;
 if ($or$cond) {
  $$0 = -6;
  return ($$0|0);
 }
 $8 = ($0|0)==(0|0);
 if ($8) {
  $$0 = -2;
  return ($$0|0);
 }
 $9 = ((($0)) + 24|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$10>>2] = 10;
  $13 = ((($0)) + 40|0);
  HEAP32[$13>>2] = 0;
  $19 = 10;
 } else {
  $19 = $11;
 }
 $14 = ((($0)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$14>>2] = 11;
 }
 $17 = ((($0)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $20 = (FUNCTION_TABLE_iiii[$19 & 15]($18,1,7116)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$0 = -4;
  return ($$0|0);
 }
 $22 = ((($0)) + 28|0);
 HEAP32[$22>>2] = $20;
 $23 = ((($20)) + 52|0);
 HEAP32[$23>>2] = 0;
 $24 = (_inflateReset2($0,$1)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  $$0 = 0;
  return ($$0|0);
 }
 $26 = HEAP32[$14>>2]|0;
 $27 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vii[$26 & 15]($27,$20);
 HEAP32[$22>>2] = 0;
 $$0 = $24;
 return ($$0|0);
}
function _inflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$48985 = 0, $$$7918 = 0, $$$8 = 0, $$$i = 0, $$0 = 0, $$0$be = 0, $$01048$be = 0, $$01050 = 0, $$01050$be = 0, $$01109 = 0, $$0907 = 0, $$0921 = 0, $$0921$be = 0, $$0926 = 0, $$0926$be = 0, $$0937 = 0, $$0937$be = 0, $$0992 = 0, $$0992$$8919 = 0, $$0992$be = 0;
 var $$0993 = 0, $$0993$be = 0, $$1$ph = 0, $$10 = 0, $$101003 = 0, $$101060 = 0, $$10936 = 0, $$10947 = 0, $$11 = 0, $$11049 = 0, $$11051$lcssa = 0, $$110511883 = 0, $$111004 = 0, $$111061 = 0, $$11948 = 0, $$12$lcssa = 0, $$121005 = 0, $$121062 = 0, $$121876 = 0, $$12949$lcssa = 0;
 var $$129491875 = 0, $$13 = 0, $$131006 = 0, $$131063 = 0, $$13950 = 0, $$141007 = 0, $$141064 = 0, $$141820 = 0, $$14951$lcssa = 0, $$149511819 = 0, $$15 = 0, $$151008 = 0, $$151065 = 0, $$15952 = 0, $$16 = 0, $$161009$lcssa = 0, $$1610091874 = 0, $$161066$lcssa = 0, $$1610661873 = 0, $$16953 = 0;
 var $$17 = 0, $$171010 = 0, $$171067 = 0, $$17954 = 0, $$18$lcssa = 0, $$181011$lcssa = 0, $$1810111818 = 0, $$181068$lcssa = 0, $$1810681817 = 0, $$18955$lcssa = 0, $$19$lcssa = 0, $$1909 = 0, $$191012 = 0, $$191069 = 0, $$1912 = 0, $$191809 = 0, $$1922 = 0, $$1927$lcssa = 0, $$19271886 = 0, $$1938$lcssa = 0;
 var $$19381885 = 0, $$1994$lcssa = 0, $$19941884 = 0, $$19956$lcssa = 0, $$199561808 = 0, $$2 = 0, $$20 = 0, $$201013 = 0, $$201070 = 0, $$20957 = 0, $$21 = 0, $$21052$lcssa = 0, $$210521836 = 0, $$211014 = 0, $$211071 = 0, $$21958 = 0, $$22$lcssa = 0, $$221015$lcssa = 0, $$221072$lcssa = 0, $$221610 = 0;
 var $$22959$lcssa = 0, $$229591609 = 0, $$23$lcssa = 0, $$23$ph2385 = 0, $$231016$lcssa = 0, $$2310161807 = 0, $$231073$lcssa = 0, $$2310731806 = 0, $$231630 = 0, $$23960$lcssa = 0, $$23960$ph2384 = 0, $$239601629 = 0, $$24$lcssa = 0, $$241017 = 0, $$241074 = 0, $$24961$lcssa = 0, $$25$be = 0, $$25$lcssa2389 = 0, $$25$ph = 0, $$251018 = 0;
 var $$251018$ = 0, $$251075 = 0, $$251695 = 0, $$25962$be = 0, $$25962$lcssa2388 = 0, $$25962$ph = 0, $$259621694 = 0, $$26$lcssa = 0, $$261019$lcssa = 0, $$2610191608 = 0, $$261076$lcssa = 0, $$2610761607 = 0, $$261648 = 0, $$26963$lcssa = 0, $$269631647 = 0, $$27$lcssa = 0, $$271020$lcssa = 0, $$271020$ph2383 = 0, $$2710201628 = 0, $$271077$lcssa = 0;
 var $$271077$ph2382 = 0, $$2710771627 = 0, $$271674 = 0, $$27964$lcssa = 0, $$279641673 = 0, $$28$lcssa = 0, $$281021$lcssa = 0, $$281078$lcssa = 0, $$281664 = 0, $$28965$lcssa = 0, $$289651663 = 0, $$29$lcssa = 0, $$2910 = 0, $$291022$be = 0, $$291022$lcssa2387 = 0, $$291022$ph = 0, $$2910221693 = 0, $$291079$be = 0, $$291079$lcssa2386 = 0, $$291079$ph = 0;
 var $$2910791692 = 0, $$2913 = 0, $$291684 = 0, $$2923 = 0, $$2928$lcssa = 0, $$29281839 = 0, $$29391838 = 0, $$2995$lcssa = 0, $$29951837 = 0, $$29966$lcssa = 0, $$299661683 = 0, $$3 = 0, $$30 = 0, $$301023$lcssa = 0, $$3010231646 = 0, $$301080$lcssa = 0, $$3010801645 = 0, $$30967 = 0, $$31 = 0, $$31053$lcssa = 0;
 var $$310531846 = 0, $$311024$lcssa = 0, $$3110241672 = 0, $$311081$lcssa = 0, $$3110811671 = 0, $$31968 = 0, $$321025$lcssa = 0, $$3210251662 = 0, $$321082$lcssa = 0, $$3210821661 = 0, $$33 = 0, $$331026$lcssa = 0, $$3310261682 = 0, $$331083$lcssa = 0, $$3310831681 = 0, $$33970 = 0, $$34 = 0, $$341027 = 0, $$341084 = 0, $$34971 = 0;
 var $$35$lcssa = 0, $$351028 = 0, $$351085 = 0, $$351712 = 0, $$35972$lcssa = 0, $$359721711 = 0, $$36$lcssa = 0, $$361734 = 0, $$36973$lcssa = 0, $$369731733 = 0, $$37 = 0, $$371030 = 0, $$371087 = 0, $$37974 = 0, $$38 = 0, $$381031 = 0, $$381088 = 0, $$38975 = 0, $$39$lcssa = 0, $$391032$lcssa = 0;
 var $$3910321710 = 0, $$391089$lcssa = 0, $$3910891709 = 0, $$391747 = 0, $$39291849 = 0, $$3940$lcssa = 0, $$39401848 = 0, $$3996$lcssa = 0, $$39961847 = 0, $$39976$lcssa = 0, $$399761746 = 0, $$4 = 0, $$40 = 0, $$401033$lcssa = 0, $$4010331732 = 0, $$401090$lcssa = 0, $$4010901731 = 0, $$40977 = 0, $$41$lcssa = 0, $$41$ph = 0;
 var $$41054$lcssa = 0, $$410541855 = 0, $$411034 = 0, $$411091 = 0, $$411764 = 0, $$41978$lcssa = 0, $$41978$ph = 0, $$419781763 = 0, $$42$lcssa = 0, $$421035 = 0, $$421092 = 0, $$421785 = 0, $$42979$lcssa = 0, $$429791784 = 0, $$43 = 0, $$431036$lcssa = 0, $$4310361745 = 0, $$431093$lcssa = 0, $$4310931744 = 0, $$43980 = 0;
 var $$44 = 0, $$441037 = 0, $$441094 = 0, $$44981 = 0, $$45$lcssa = 0, $$451038$lcssa = 0, $$451038$ph = 0, $$4510381762 = 0, $$451095$lcssa = 0, $$451095$ph = 0, $$4510951761 = 0, $$451798 = 0, $$45982$lcssa = 0, $$459821797 = 0, $$46 = 0, $$461039$lcssa = 0, $$4610391783 = 0, $$461096$lcssa = 0, $$4610961782 = 0, $$46983 = 0;
 var $$47 = 0, $$471040 = 0, $$471097 = 0, $$47984 = 0, $$48$lcssa = 0, $$481041 = 0, $$481098 = 0, $$481593 = 0, $$48985$lcssa = 0, $$489851592 = 0, $$49 = 0, $$491042$lcssa = 0, $$4910421796 = 0, $$491099$lcssa = 0, $$4910991795 = 0, $$4915 = 0, $$4925 = 0, $$49301858 = 0, $$4941$lcssa = 0, $$49411857 = 0;
 var $$4997$lcssa = 0, $$49971856 = 0, $$49986 = 0, $$5$ph = 0, $$50 = 0, $$501043 = 0, $$501100 = 0, $$50987 = 0, $$51$lcssa = 0, $$51055 = 0, $$511044 = 0, $$511101 = 0, $$511600 = 0, $$51988$lcssa = 0, $$519881599 = 0, $$52 = 0, $$521045$lcssa = 0, $$5210451591 = 0, $$521102$lcssa = 0, $$5211021590 = 0;
 var $$52989 = 0, $$531046 = 0, $$531103 = 0, $$54 = 0, $$54$i = 0, $$54$ph = 0, $$541047 = 0, $$541104 = 0, $$54991 = 0, $$54991$ph = 0, $$55$lcssa = 0, $$551105$lcssa = 0, $$5511051597 = 0, $$551598 = 0, $$56 = 0, $$561106 = 0, $$58 = 0, $$58$ph = 0, $$581108 = 0, $$581108$ph = 0;
 var $$5916 = 0, $$5931 = 0, $$5942 = 0, $$5998 = 0, $$6 = 0, $$61056$lcssa = 0, $$610561864 = 0, $$69321867 = 0, $$6943$lcssa = 0, $$69431866 = 0, $$6999$lcssa = 0, $$69991865 = 0, $$7 = 0, $$71000 = 0, $$71057 = 0, $$7918 = 0, $$7933 = 0, $$7944 = 0, $$8 = 0, $$8$ph = 0;
 var $$81001 = 0, $$81001$ = 0, $$81058 = 0, $$8919 = 0, $$8934 = 0, $$8945 = 0, $$91002 = 0, $$91059 = 0, $$9935 = 0, $$9946 = 0, $$lcssa = 0, $$lcssa1194 = 0, $$lcssa1245 = 0, $$lcssa1257 = 0, $$lcssa1271 = 0, $$lcssa1283 = 0, $$ph = 0, $$pn = 0, $$pn2371 = 0, $$pn2373 = 0;
 var $$pr1117$pre = 0, $$pre = 0, $$pre2354 = 0, $$pre2355 = 0, $$pre2356 = 0, $$pre2357 = 0, $$pre2359 = 0, $$pre2362 = 0, $$pre2364 = 0, $$pre2366 = 0, $$pre2368 = 0, $$pre2369 = 0, $$sink = 0, $$sink1115 = 0, $$sink1115$in = 0, $$sink1116 = 0, $$sroa$061$0 = 0, $$sroa$061$0$$sroa_idx = 0, $$sroa$061$0$$sroa_idx74 = 0, $$sroa$061$0$copyload = 0;
 var $$sroa$061$0$copyload71$lcssa = 0, $$sroa$061$0$copyload71$lcssa$in = 0, $$sroa$061$0$copyload73$lcssa = 0, $$sroa$061$0$copyload73$lcssa$in = 0, $$sroa$061$0$copyload75 = 0, $$sroa$061$1 = 0, $$sroa$1878$0 = 0, $$sroa$1878$0$$sroa_idx = 0, $$sroa$1878$0$$sroa_idx1780 = 0, $$sroa$1878$0$$sroa_idx79 = 0, $$sroa$1878$0$$sroa_idx791757 = 0, $$sroa$1878$0$$sroa_idx81 = 0, $$sroa$1878$0$$sroa_idx811705 = 0, $$sroa$1878$0$$sroa_idx83 = 0, $$sroa$1878$0$$sroa_idx831729 = 0, $$sroa$1878$0$$sroa_idx85 = 0, $$sroa$1878$0$$sroa_idx851640 = 0, $$sroa$1878$0$copyload = 0, $$sroa$1878$0$copyload$lcssa = 0, $$sroa$1878$0$copyload1781 = 0;
 var $$sroa$1878$0$copyload80 = 0, $$sroa$1878$0$copyload80$lcssa = 0, $$sroa$1878$0$copyload801758 = 0, $$sroa$1878$0$copyload82 = 0, $$sroa$1878$0$copyload82$lcssa = 0, $$sroa$1878$0$copyload821706 = 0, $$sroa$1878$0$copyload84 = 0, $$sroa$1878$0$copyload84$lcssa = 0, $$sroa$1878$0$copyload841730 = 0, $$sroa$1878$0$copyload86 = 0, $$sroa$1878$0$copyload861641 = 0, $$sroa$1878$1 = 0, $$sroa$42$0 = 0, $$sroa$42$0$$sroa_idx108 = 0, $$sroa$42$0$$sroa_idx114 = 0, $$sroa$42$0$copyload = 0, $$sroa$42$0$copyload111$lcssa = 0, $$sroa$42$0$copyload111$lcssa$in = 0, $$sroa$42$0$copyload113$lcssa = 0, $$sroa$42$0$copyload113$lcssa$in = 0;
 var $$sroa$42$0$copyload115 = 0, $$sroa$42$0$copyload117$lcssa = 0, $$sroa$42$0$copyload117$lcssa$in = 0, $$sroa$42$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond = 0, $or$cond = 0, $or$cond11 = 0, $or$cond1110 = 0, $or$cond1111 = 0, $or$cond1114 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond2821 = 0, $or$cond7 = 0, $or$cond9 = 0, $scevgep2353 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$01109 = -2;
  STACKTOP = sp;return ($$01109|0);
 }
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$01109 = -2;
  STACKTOP = sp;return ($$01109|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$01109 = -2;
  STACKTOP = sp;return ($$01109|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $$01109 = -2;
   STACKTOP = sp;return ($$01109|0);
  }
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ($15|0)==(11);
 if ($16) {
  HEAP32[$5>>2] = 12;
  $916 = 12;
 } else {
  $916 = $15;
 }
 $17 = ((($0)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($5)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($5)) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($5)) + 8|0);
 $26 = ((($5)) + 24|0);
 $27 = ((($2)) + 1|0);
 $28 = ((($5)) + 16|0);
 $29 = ((($5)) + 32|0);
 $30 = ((($0)) + 24|0);
 $31 = ((($5)) + 36|0);
 $32 = ((($5)) + 20|0);
 $33 = ((($0)) + 48|0);
 $34 = ((($5)) + 64|0);
 $35 = ((($5)) + 12|0);
 $36 = (($1) + -5)|0;
 $37 = ($36>>>0)<(2);
 $38 = ((($5)) + 4|0);
 $39 = ((($5)) + 76|0);
 $40 = ((($5)) + 84|0);
 $41 = ((($5)) + 80|0);
 $42 = ((($5)) + 88|0);
 $43 = ($1|0)==(6);
 $44 = ((($5)) + 7108|0);
 $45 = ((($5)) + 72|0);
 $46 = ((($5)) + 7112|0);
 $47 = ((($5)) + 68|0);
 $48 = ((($5)) + 44|0);
 $49 = ((($5)) + 7104|0);
 $50 = ((($5)) + 48|0);
 $51 = ((($5)) + 40|0);
 $$sink1115$in = ((($5)) + 52|0);
 $52 = ((($0)) + 20|0);
 $53 = ((($5)) + 28|0);
 $54 = ((($2)) + 2|0);
 $55 = ((($2)) + 3|0);
 $56 = ((($5)) + 104|0);
 $57 = ((($5)) + 96|0);
 $58 = ((($5)) + 100|0);
 $59 = ((($5)) + 624|0);
 $60 = ((($5)) + 1328|0);
 $61 = ((($5)) + 108|0);
 $62 = ((($5)) + 112|0);
 $63 = ((($5)) + 752|0);
 $64 = ((($5)) + 92|0);
 $$0 = 0;$$01050 = $10;$$0921 = $18;$$0926 = $24;$$0937 = $22;$$0992 = $18;$$0993 = $20;$338 = $8;$65 = $916;
 L17: while(1) {
  L19: do {
   switch ($65|0) {
   case 28:  {
    $$54$ph = $$0926;$$54991$ph = $$0937;$$58$ph = $$0993;$$581108$ph = $$01050;$$8$ph = 1;$$ph = $$0992;
    label = 281;
    break L17;
    break;
   }
   case 29:  {
    $$4925 = $$0921;$$54 = $$0926;$$54991 = $$0937;$$58 = $$0993;$$581108 = $$01050;$$8 = -3;$814 = $$0992;
    break L17;
    break;
   }
   case 30:  {
    label = 303;
    break L17;
    break;
   }
   case 0:  {
    $69 = HEAP32[$25>>2]|0;
    $70 = ($69|0)==(0);
    if ($70) {
     HEAP32[$5>>2] = 12;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$01050;$$0921$be = $$0921;$$0926$be = $$0926;$$0937$be = $$0937;$$0992$be = $$0992;$$0993$be = $$0993;
     break L19;
    }
    $71 = ($$0926>>>0)<(16);
    if ($71) {
     $$110511883 = $$01050;$$19271886 = $$0926;$$19381885 = $$0937;$$19941884 = $$0993;
     while(1) {
      $72 = ($$19941884|0)==(0);
      if ($72) {
       $$4925 = $$0921;$$54 = $$19271886;$$54991 = $$19381885;$$58 = 0;$$581108 = $$110511883;$$8 = $$0;$814 = $$0992;
       break L17;
      }
      $73 = (($$19941884) + -1)|0;
      $74 = ((($$110511883)) + 1|0);
      $75 = HEAP8[$$110511883>>0]|0;
      $76 = $75&255;
      $77 = $76 << $$19271886;
      $78 = (($77) + ($$19381885))|0;
      $79 = (($$19271886) + 8)|0;
      $80 = ($79>>>0)<(16);
      if ($80) {
       $$110511883 = $74;$$19271886 = $79;$$19381885 = $78;$$19941884 = $73;
      } else {
       $$11051$lcssa = $74;$$1927$lcssa = $79;$$1938$lcssa = $78;$$1994$lcssa = $73;
       break;
      }
     }
    } else {
     $$11051$lcssa = $$01050;$$1927$lcssa = $$0926;$$1938$lcssa = $$0937;$$1994$lcssa = $$0993;
    }
    $81 = $69 & 2;
    $82 = ($81|0)!=(0);
    $83 = ($$1938$lcssa|0)==(35615);
    $or$cond = $83 & $82;
    if ($or$cond) {
     $84 = (_crc32(0,0,0)|0);
     HEAP32[$26>>2] = $84;
     HEAP8[$2>>0] = 31;
     HEAP8[$27>>0] = -117;
     $85 = (_crc32($84,$2,2)|0);
     HEAP32[$26>>2] = $85;
     HEAP32[$5>>2] = 1;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = 0;$$0937$be = 0;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
     break L19;
    }
    HEAP32[$28>>2] = 0;
    $86 = HEAP32[$29>>2]|0;
    $87 = ($86|0)==(0|0);
    if (!($87)) {
     $88 = ((($86)) + 48|0);
     HEAP32[$88>>2] = -1;
    }
    $89 = $69 & 1;
    $90 = ($89|0)==(0);
    if (!($90)) {
     $91 = $$1938$lcssa << 8;
     $92 = $91 & 65280;
     $93 = $$1938$lcssa >>> 8;
     $94 = (($92) + ($93))|0;
     $95 = (($94>>>0) % 31)&-1;
     $96 = ($95|0)==(0);
     if ($96) {
      $97 = $$1938$lcssa & 15;
      $98 = ($97|0)==(8);
      if (!($98)) {
       HEAP32[$30>>2] = 16270;
       HEAP32[$5>>2] = 29;
       $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = $$1927$lcssa;$$0937$be = $$1938$lcssa;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
       break L19;
      }
      $99 = $$1938$lcssa >>> 4;
      $100 = (($$1927$lcssa) + -4)|0;
      $101 = $99 & 15;
      $102 = (($101) + 8)|0;
      $103 = HEAP32[$31>>2]|0;
      $104 = ($103|0)==(0);
      if ($104) {
       HEAP32[$31>>2] = $102;
      } else {
       $105 = ($102>>>0)>($103>>>0);
       if ($105) {
        HEAP32[$30>>2] = 16297;
        HEAP32[$5>>2] = 29;
        $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = $100;$$0937$be = $99;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
        break L19;
       }
      }
      $106 = 256 << $101;
      HEAP32[$32>>2] = $106;
      $107 = (_adler32(0,0,0)|0);
      HEAP32[$26>>2] = $107;
      HEAP32[$33>>2] = $107;
      $108 = $$1938$lcssa >>> 12;
      $109 = $108 & 2;
      $110 = $109 ^ 11;
      HEAP32[$5>>2] = $110;
      $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = 0;$$0937$be = 0;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
      break L19;
     }
    }
    HEAP32[$30>>2] = 16247;
    HEAP32[$5>>2] = 29;
    $$0$be = $$0;$$01048$be = $338;$$01050$be = $$11051$lcssa;$$0921$be = $$0921;$$0926$be = $$1927$lcssa;$$0937$be = $$1938$lcssa;$$0992$be = $$0992;$$0993$be = $$1994$lcssa;
    break;
   }
   case 1:  {
    $68 = ($$0926>>>0)<(16);
    if ($68) {
     $$210521836 = $$01050;$$29281839 = $$0926;$$29391838 = $$0937;$$29951837 = $$0993;
     while(1) {
      $111 = ($$29951837|0)==(0);
      if ($111) {
       $$4925 = $$0921;$$54 = $$29281839;$$54991 = $$29391838;$$58 = 0;$$581108 = $$210521836;$$8 = $$0;$814 = $$0992;
       break L17;
      }
      $112 = (($$29951837) + -1)|0;
      $113 = ((($$210521836)) + 1|0);
      $114 = HEAP8[$$210521836>>0]|0;
      $115 = $114&255;
      $116 = $115 << $$29281839;
      $117 = (($116) + ($$29391838))|0;
      $118 = (($$29281839) + 8)|0;
      $119 = ($118>>>0)<(16);
      if ($119) {
       $$210521836 = $113;$$29281839 = $118;$$29391838 = $117;$$29951837 = $112;
      } else {
       $$21052$lcssa = $113;$$2928$lcssa = $118;$$2995$lcssa = $112;$120 = $117;
       break;
      }
     }
    } else {
     $$21052$lcssa = $$01050;$$2928$lcssa = $$0926;$$2995$lcssa = $$0993;$120 = $$0937;
    }
    HEAP32[$28>>2] = $120;
    $121 = $120 & 255;
    $122 = ($121|0)==(8);
    if (!($122)) {
     HEAP32[$30>>2] = 16270;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$21052$lcssa;$$0921$be = $$0921;$$0926$be = $$2928$lcssa;$$0937$be = $120;$$0992$be = $$0992;$$0993$be = $$2995$lcssa;
     break L19;
    }
    $123 = $120 & 57344;
    $124 = ($123|0)==(0);
    if (!($124)) {
     HEAP32[$30>>2] = 16317;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$21052$lcssa;$$0921$be = $$0921;$$0926$be = $$2928$lcssa;$$0937$be = $120;$$0992$be = $$0992;$$0993$be = $$2995$lcssa;
     break L19;
    }
    $125 = HEAP32[$29>>2]|0;
    $126 = ($125|0)==(0|0);
    if (!($126)) {
     $127 = $120 >>> 8;
     $128 = $127 & 1;
     HEAP32[$125>>2] = $128;
    }
    $129 = $120 & 512;
    $130 = ($129|0)==(0);
    if (!($130)) {
     $131 = $120&255;
     HEAP8[$2>>0] = $131;
     $132 = $120 >>> 8;
     $133 = $132&255;
     HEAP8[$27>>0] = $133;
     $134 = HEAP32[$26>>2]|0;
     $135 = (_crc32($134,$2,2)|0);
     HEAP32[$26>>2] = $135;
    }
    HEAP32[$5>>2] = 2;
    $$310531846 = $$21052$lcssa;$$39291849 = 0;$$39401848 = 0;$$39961847 = $$2995$lcssa;
    label = 47;
    break;
   }
   case 2:  {
    $136 = ($$0926>>>0)<(32);
    if ($136) {
     $$310531846 = $$01050;$$39291849 = $$0926;$$39401848 = $$0937;$$39961847 = $$0993;
     label = 47;
    } else {
     $$31053$lcssa = $$01050;$$3940$lcssa = $$0937;$$3996$lcssa = $$0993;
     label = 49;
    }
    break;
   }
   case 3:  {
    $161 = ($$0926>>>0)<(16);
    if ($161) {
     $$410541855 = $$01050;$$49301858 = $$0926;$$49411857 = $$0937;$$49971856 = $$0993;
     label = 55;
    } else {
     $$41054$lcssa = $$01050;$$4941$lcssa = $$0937;$$4997$lcssa = $$0993;
     label = 57;
    }
    break;
   }
   case 4:  {
    $$51055 = $$01050;$$5931 = $$0926;$$5942 = $$0937;$$5998 = $$0993;
    label = 62;
    break;
   }
   case 5:  {
    $$81001 = $$0993;$$81058 = $$01050;$$8934 = $$0926;$$8945 = $$0937;
    label = 73;
    break;
   }
   case 6:  {
    $$111004 = $$0993;$$111061 = $$01050;$$9935 = $$0926;$$9946 = $$0937;
    label = 83;
    break;
   }
   case 7:  {
    $$10936 = $$0926;$$10947 = $$0937;$$131006 = $$0993;$$131063 = $$01050;
    label = 96;
    break;
   }
   case 8:  {
    $$11 = $$0926;$$11948 = $$0937;$$151008 = $$0993;$$151065 = $$01050;
    label = 109;
    break;
   }
   case 9:  {
    $67 = ($$0926>>>0)<(32);
    if ($67) {
     $$141820 = $$0926;$$149511819 = $$0937;$$1810111818 = $$0993;$$1810681817 = $$01050;
     while(1) {
      $326 = ($$1810111818|0)==(0);
      if ($326) {
       $$4925 = $$0921;$$54 = $$141820;$$54991 = $$149511819;$$58 = 0;$$581108 = $$1810681817;$$8 = $$0;$814 = $$0992;
       break L17;
      }
      $327 = (($$1810111818) + -1)|0;
      $328 = ((($$1810681817)) + 1|0);
      $329 = HEAP8[$$1810681817>>0]|0;
      $330 = $329&255;
      $331 = $330 << $$141820;
      $332 = (($331) + ($$149511819))|0;
      $333 = (($$141820) + 8)|0;
      $334 = ($333>>>0)<(32);
      if ($334) {
       $$141820 = $333;$$149511819 = $332;$$1810111818 = $327;$$1810681817 = $328;
      } else {
       $$14951$lcssa = $332;$$181011$lcssa = $327;$$181068$lcssa = $328;
       break;
      }
     }
    } else {
     $$14951$lcssa = $$0937;$$181011$lcssa = $$0993;$$181068$lcssa = $$01050;
    }
    $335 = (_llvm_bswap_i32(($$14951$lcssa|0))|0);
    HEAP32[$26>>2] = $335;
    HEAP32[$33>>2] = $335;
    HEAP32[$5>>2] = 10;
    $$15 = 0;$$15952 = 0;$$191012 = $$181011$lcssa;$$191069 = $$181068$lcssa;
    label = 121;
    break;
   }
   case 10:  {
    $$15 = $$0926;$$15952 = $$0937;$$191012 = $$0993;$$191069 = $$01050;
    label = 121;
    break;
   }
   case 11:  {
    $$16 = $$0926;$$16953 = $$0937;$$201013 = $$0993;$$201070 = $$01050;
    label = 124;
    break;
   }
   case 12:  {
    $$17 = $$0926;$$17954 = $$0937;$$211014 = $$0993;$$211071 = $$01050;
    label = 125;
    break;
   }
   case 13:  {
    $360 = $$0926 & 7;
    $361 = $$0937 >>> $360;
    $362 = (($$0926) - ($360))|0;
    $363 = ($362>>>0)<(32);
    if ($363) {
     $$191809 = $362;$$199561808 = $361;$$2310161807 = $$0993;$$2310731806 = $$01050;
     while(1) {
      $364 = ($$2310161807|0)==(0);
      if ($364) {
       $$4925 = $$0921;$$54 = $$191809;$$54991 = $$199561808;$$58 = 0;$$581108 = $$2310731806;$$8 = $$0;$814 = $$0992;
       break L17;
      }
      $365 = (($$2310161807) + -1)|0;
      $366 = ((($$2310731806)) + 1|0);
      $367 = HEAP8[$$2310731806>>0]|0;
      $368 = $367&255;
      $369 = $368 << $$191809;
      $370 = (($369) + ($$199561808))|0;
      $371 = (($$191809) + 8)|0;
      $372 = ($371>>>0)<(32);
      if ($372) {
       $$191809 = $371;$$199561808 = $370;$$2310161807 = $365;$$2310731806 = $366;
      } else {
       $$19$lcssa = $371;$$19956$lcssa = $370;$$231016$lcssa = $365;$$231073$lcssa = $366;
       break;
      }
     }
    } else {
     $$19$lcssa = $362;$$19956$lcssa = $361;$$231016$lcssa = $$0993;$$231073$lcssa = $$01050;
    }
    $373 = $$19956$lcssa & 65535;
    $374 = $$19956$lcssa >>> 16;
    $375 = $374 ^ 65535;
    $376 = ($373|0)==($375|0);
    if ($376) {
     HEAP32[$34>>2] = $373;
     HEAP32[$5>>2] = 14;
     if ($43) {
      $$54$ph = 0;$$54991$ph = 0;$$58$ph = $$231016$lcssa;$$581108$ph = $$231073$lcssa;$$8$ph = $$0;$$ph = $$0992;
      label = 281;
      break L17;
     } else {
      $$20 = 0;$$20957 = 0;$$241017 = $$231016$lcssa;$$241074 = $$231073$lcssa;
      label = 144;
      break L19;
     }
    } else {
     HEAP32[$30>>2] = 16381;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$231073$lcssa;$$0921$be = $$0921;$$0926$be = $$19$lcssa;$$0937$be = $$19956$lcssa;$$0992$be = $$0992;$$0993$be = $$231016$lcssa;
     break L19;
    }
    break;
   }
   case 14:  {
    $$20 = $$0926;$$20957 = $$0937;$$241017 = $$0993;$$241074 = $$01050;
    label = 144;
    break;
   }
   case 15:  {
    $$21 = $$0926;$$21958 = $$0937;$$251018 = $$0993;$$251075 = $$01050;
    label = 145;
    break;
   }
   case 16:  {
    $66 = ($$0926>>>0)<(14);
    if ($66) {
     $$221610 = $$0926;$$229591609 = $$0937;$$2610191608 = $$0993;$$2610761607 = $$01050;
     while(1) {
      $388 = ($$2610191608|0)==(0);
      if ($388) {
       $$4925 = $$0921;$$54 = $$221610;$$54991 = $$229591609;$$58 = 0;$$581108 = $$2610761607;$$8 = $$0;$814 = $$0992;
       break L17;
      }
      $389 = (($$2610191608) + -1)|0;
      $390 = ((($$2610761607)) + 1|0);
      $391 = HEAP8[$$2610761607>>0]|0;
      $392 = $391&255;
      $393 = $392 << $$221610;
      $394 = (($393) + ($$229591609))|0;
      $395 = (($$221610) + 8)|0;
      $396 = ($395>>>0)<(14);
      if ($396) {
       $$221610 = $395;$$229591609 = $394;$$2610191608 = $389;$$2610761607 = $390;
      } else {
       $$22$lcssa = $395;$$22959$lcssa = $394;$$261019$lcssa = $389;$$261076$lcssa = $390;
       break;
      }
     }
    } else {
     $$22$lcssa = $$0926;$$22959$lcssa = $$0937;$$261019$lcssa = $$0993;$$261076$lcssa = $$01050;
    }
    $397 = $$22959$lcssa & 31;
    $398 = (($397) + 257)|0;
    HEAP32[$57>>2] = $398;
    $399 = $$22959$lcssa >>> 5;
    $400 = $399 & 31;
    $401 = (($400) + 1)|0;
    HEAP32[$58>>2] = $401;
    $402 = $$22959$lcssa >>> 10;
    $403 = $402 & 15;
    $404 = (($403) + 4)|0;
    HEAP32[$64>>2] = $404;
    $405 = $$22959$lcssa >>> 14;
    $406 = (($$22$lcssa) + -14)|0;
    $407 = ($398>>>0)>(286);
    $408 = ($400>>>0)>(29);
    $or$cond2821 = $407 | $408;
    if ($or$cond2821) {
     HEAP32[$30>>2] = 16410;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$261076$lcssa;$$0921$be = $$0921;$$0926$be = $406;$$0937$be = $405;$$0992$be = $$0992;$$0993$be = $$261019$lcssa;
     break L19;
    } else {
     HEAP32[$56>>2] = 0;
     HEAP32[$5>>2] = 17;
     $$23$ph2385 = $406;$$23960$ph2384 = $405;$$271020$ph2383 = $$261019$lcssa;$$271077$ph2382 = $$261076$lcssa;$431 = $404;$917 = 0;
     label = 155;
     break L19;
    }
    break;
   }
   case 17:  {
    $$pre2355 = HEAP32[$56>>2]|0;
    $$pre2356 = HEAP32[$64>>2]|0;
    $409 = ($$pre2355>>>0)<($$pre2356>>>0);
    if ($409) {
     $$23$ph2385 = $$0926;$$23960$ph2384 = $$0937;$$271020$ph2383 = $$0993;$$271077$ph2382 = $$01050;$431 = $$pre2356;$917 = $$pre2355;
     label = 155;
    } else {
     $$23$lcssa = $$0926;$$23960$lcssa = $$0937;$$271020$lcssa = $$0993;$$271077$lcssa = $$01050;$$lcssa = $$pre2355;
     label = 156;
    }
    break;
   }
   case 18:  {
    $$pre2357 = HEAP32[$56>>2]|0;
    $$1$ph = $$0;$$25$ph = $$0926;$$25962$ph = $$0937;$$291022$ph = $$0993;$$291079$ph = $$01050;$443 = $$pre2357;
    label = 166;
    break;
   }
   case 19:  {
    $$2 = $$0;$$33 = $$0926;$$33970 = $$0937;$$371030 = $$0993;$$371087 = $$01050;
    label = 199;
    break;
   }
   case 20:  {
    $$3 = $$0;$$34 = $$0926;$$34971 = $$0937;$$381031 = $$0993;$$381088 = $$01050;
    label = 200;
    break;
   }
   case 21:  {
    $$pre2362 = HEAP32[$45>>2]|0;
    $$38 = $$0926;$$38975 = $$0937;$$4 = $$0;$$421035 = $$0993;$$421092 = $$01050;$628 = $$pre2362;
    label = 218;
    break;
   }
   case 22:  {
    $$41$ph = $$0926;$$41978$ph = $$0937;$$451038$ph = $$0993;$$451095$ph = $$01050;$$5$ph = $$0;
    label = 225;
    break;
   }
   case 23:  {
    $$pre2368 = HEAP32[$45>>2]|0;
    $$44 = $$0926;$$44981 = $$0937;$$481041 = $$0993;$$481098 = $$01050;$$6 = $$0;$709 = $$pre2368;
    label = 237;
    break;
   }
   case 24:  {
    $$47 = $$0926;$$47984 = $$0937;$$511044 = $$0993;$$511101 = $$01050;$$7 = $$0;
    label = 243;
    break;
   }
   case 25:  {
    $762 = ($$0992|0)==(0);
    if ($762) {
     $$54$ph = $$0926;$$54991$ph = $$0937;$$58$ph = $$0993;$$581108$ph = $$01050;$$8$ph = $$0;$$ph = 0;
     label = 281;
     break L17;
    }
    $763 = HEAP32[$34>>2]|0;
    $764 = $763&255;
    $765 = ((($338)) + 1|0);
    HEAP8[$338>>0] = $764;
    $766 = (($$0992) + -1)|0;
    HEAP32[$5>>2] = 20;
    $$0$be = $$0;$$01048$be = $765;$$01050$be = $$01050;$$0921$be = $$0921;$$0926$be = $$0926;$$0937$be = $$0937;$$0992$be = $766;$$0993$be = $$0993;
    break;
   }
   case 26:  {
    $767 = HEAP32[$25>>2]|0;
    $768 = ($767|0)==(0);
    if ($768) {
     $$1922 = $$0921;$$49 = $$0926;$$49986 = $$0937;$$531046 = $$0993;$$531103 = $$01050;
    } else {
     $769 = ($$0926>>>0)<(32);
     if ($769) {
      $$481593 = $$0926;$$489851592 = $$0937;$$5210451591 = $$0993;$$5211021590 = $$01050;
      while(1) {
       $770 = ($$5210451591|0)==(0);
       if ($770) {
        $$4925 = $$0921;$$54 = $$481593;$$54991 = $$489851592;$$58 = 0;$$581108 = $$5211021590;$$8 = $$0;$814 = $$0992;
        break L17;
       }
       $771 = (($$5210451591) + -1)|0;
       $772 = ((($$5211021590)) + 1|0);
       $773 = HEAP8[$$5211021590>>0]|0;
       $774 = $773&255;
       $775 = $774 << $$481593;
       $776 = (($775) + ($$489851592))|0;
       $777 = (($$481593) + 8)|0;
       $778 = ($777>>>0)<(32);
       if ($778) {
        $$481593 = $777;$$489851592 = $776;$$5210451591 = $771;$$5211021590 = $772;
       } else {
        $$48$lcssa = $777;$$48985$lcssa = $776;$$521045$lcssa = $771;$$521102$lcssa = $772;
        break;
       }
      }
     } else {
      $$48$lcssa = $$0926;$$48985$lcssa = $$0937;$$521045$lcssa = $$0993;$$521102$lcssa = $$01050;
     }
     $779 = (($$0921) - ($$0992))|0;
     $780 = HEAP32[$52>>2]|0;
     $781 = (($780) + ($779))|0;
     HEAP32[$52>>2] = $781;
     $782 = HEAP32[$53>>2]|0;
     $783 = (($782) + ($779))|0;
     HEAP32[$53>>2] = $783;
     $784 = ($779|0)==(0);
     if ($784) {
      $$pre2354 = HEAP32[$26>>2]|0;
      $797 = $$pre2354;
     } else {
      $785 = HEAP32[$28>>2]|0;
      $786 = ($785|0)==(0);
      $787 = HEAP32[$26>>2]|0;
      $788 = (0 - ($779))|0;
      $789 = (($338) + ($788)|0);
      if ($786) {
       $791 = (_adler32($787,$789,$779)|0);
       $792 = $791;
      } else {
       $790 = (_crc32($787,$789,$779)|0);
       $792 = $790;
      }
      HEAP32[$26>>2] = $792;
      HEAP32[$33>>2] = $792;
      $797 = $792;
     }
     $793 = HEAP32[$28>>2]|0;
     $794 = ($793|0)==(0);
     $795 = (_llvm_bswap_i32(($$48985$lcssa|0))|0);
     $$$48985 = $794 ? $795 : $$48985$lcssa;
     $796 = ($$$48985|0)==($797|0);
     if ($796) {
      $$1922 = $$0992;$$49 = 0;$$49986 = 0;$$531046 = $$521045$lcssa;$$531103 = $$521102$lcssa;
     } else {
      HEAP32[$30>>2] = 16584;
      HEAP32[$5>>2] = 29;
      $$0$be = $$0;$$01048$be = $338;$$01050$be = $$521102$lcssa;$$0921$be = $$0992;$$0926$be = $$48$lcssa;$$0937$be = $$48985$lcssa;$$0992$be = $$0992;$$0993$be = $$521045$lcssa;
      break L19;
     }
    }
    HEAP32[$5>>2] = 27;
    $$2923 = $$1922;$$50 = $$49;$$50987 = $$49986;$$541047 = $$531046;$$541104 = $$531103;
    label = 273;
    break;
   }
   case 27:  {
    $$2923 = $$0921;$$50 = $$0926;$$50987 = $$0937;$$541047 = $$0993;$$541104 = $$01050;
    label = 273;
    break;
   }
   default: {
    $$01109 = -2;
    label = 304;
    break L17;
   }
   }
  } while(0);
  if ((label|0) == 47) {
   while(1) {
    label = 0;
    $137 = ($$39961847|0)==(0);
    if ($137) {
     $$4925 = $$0921;$$54 = $$39291849;$$54991 = $$39401848;$$58 = 0;$$581108 = $$310531846;$$8 = $$0;$814 = $$0992;
     break L17;
    }
    $138 = (($$39961847) + -1)|0;
    $139 = ((($$310531846)) + 1|0);
    $140 = HEAP8[$$310531846>>0]|0;
    $141 = $140&255;
    $142 = $141 << $$39291849;
    $143 = (($142) + ($$39401848))|0;
    $144 = (($$39291849) + 8)|0;
    $145 = ($144>>>0)<(32);
    if ($145) {
     $$310531846 = $139;$$39291849 = $144;$$39401848 = $143;$$39961847 = $138;
     label = 47;
    } else {
     $$31053$lcssa = $139;$$3940$lcssa = $143;$$3996$lcssa = $138;
     label = 49;
     break;
    }
   }
  }
  else if ((label|0) == 121) {
   label = 0;
   $336 = HEAP32[$35>>2]|0;
   $337 = ($336|0)==(0);
   if ($337) {
    label = 122;
    break;
   }
   $339 = (_adler32(0,0,0)|0);
   HEAP32[$26>>2] = $339;
   HEAP32[$33>>2] = $339;
   HEAP32[$5>>2] = 11;
   $$16 = $$15;$$16953 = $$15952;$$201013 = $$191012;$$201070 = $$191069;
   label = 124;
  }
  else if ((label|0) == 144) {
   label = 0;
   HEAP32[$5>>2] = 15;
   $$21 = $$20;$$21958 = $$20957;$$251018 = $$241017;$$251075 = $$241074;
   label = 145;
  }
  else if ((label|0) == 155) {
   label = 0;
   $$231630 = $$23$ph2385;$$239601629 = $$23960$ph2384;$$2710201628 = $$271020$ph2383;$$2710771627 = $$271077$ph2382;$423 = $917;
   while(1) {
    $411 = ($$231630>>>0)<(3);
    if ($411) {
     $412 = ($$2710201628|0)==(0);
     if ($412) {
      $$4925 = $$0921;$$54 = $$231630;$$54991 = $$239601629;$$58 = 0;$$581108 = $$2710771627;$$8 = $$0;$814 = $$0992;
      break L17;
     }
     $413 = (($$231630) + 8)|0;
     $414 = HEAP8[$$2710771627>>0]|0;
     $415 = $414&255;
     $416 = $415 << $$231630;
     $417 = (($416) + ($$239601629))|0;
     $418 = ((($$2710771627)) + 1|0);
     $419 = (($$2710201628) + -1)|0;
     $$24$lcssa = $413;$$24961$lcssa = $417;$$281021$lcssa = $419;$$281078$lcssa = $418;
    } else {
     $$24$lcssa = $$231630;$$24961$lcssa = $$239601629;$$281021$lcssa = $$2710201628;$$281078$lcssa = $$2710771627;
    }
    $420 = $$24961$lcssa & 7;
    $421 = $420&65535;
    $422 = (($423) + 1)|0;
    HEAP32[$56>>2] = $422;
    $424 = (12212 + ($423<<1)|0);
    $425 = HEAP16[$424>>1]|0;
    $426 = $425&65535;
    $427 = (((($5)) + 112|0) + ($426<<1)|0);
    HEAP16[$427>>1] = $421;
    $428 = $$24961$lcssa >>> 3;
    $429 = (($$24$lcssa) + -3)|0;
    $430 = ($422>>>0)<($431>>>0);
    if ($430) {
     $$231630 = $429;$$239601629 = $428;$$2710201628 = $$281021$lcssa;$$2710771627 = $$281078$lcssa;$423 = $422;
    } else {
     $$23$lcssa = $429;$$23960$lcssa = $428;$$271020$lcssa = $$281021$lcssa;$$271077$lcssa = $$281078$lcssa;$$lcssa = $422;
     label = 156;
     break;
    }
   }
  }
  else if ((label|0) == 273) {
   label = 0;
   $798 = HEAP32[$25>>2]|0;
   $799 = ($798|0)==(0);
   if ($799) {
    $$52 = $$50;$$52989 = $$50987;$$56 = $$541047;$$561106 = $$541104;
    label = 280;
    break;
   }
   $800 = HEAP32[$28>>2]|0;
   $801 = ($800|0)==(0);
   if ($801) {
    $$52 = $$50;$$52989 = $$50987;$$56 = $$541047;$$561106 = $$541104;
    label = 280;
    break;
   }
   $802 = ($$50>>>0)<(32);
   if ($802) {
    $$511600 = $$50;$$519881599 = $$50987;$$5511051597 = $$541104;$$551598 = $$541047;
    while(1) {
     $803 = ($$551598|0)==(0);
     if ($803) {
      $$4925 = $$2923;$$54 = $$511600;$$54991 = $$519881599;$$58 = 0;$$581108 = $$5511051597;$$8 = $$0;$814 = $$0992;
      break L17;
     }
     $804 = (($$551598) + -1)|0;
     $805 = ((($$5511051597)) + 1|0);
     $806 = HEAP8[$$5511051597>>0]|0;
     $807 = $806&255;
     $808 = $807 << $$511600;
     $809 = (($808) + ($$519881599))|0;
     $810 = (($$511600) + 8)|0;
     $811 = ($810>>>0)<(32);
     if ($811) {
      $$511600 = $810;$$519881599 = $809;$$5511051597 = $805;$$551598 = $804;
     } else {
      $$51$lcssa = $810;$$51988$lcssa = $809;$$55$lcssa = $804;$$551105$lcssa = $805;
      break;
     }
    }
   } else {
    $$51$lcssa = $$50;$$51988$lcssa = $$50987;$$55$lcssa = $$541047;$$551105$lcssa = $$541104;
   }
   $812 = HEAP32[$53>>2]|0;
   $813 = ($$51988$lcssa|0)==($812|0);
   if ($813) {
    $$52 = 0;$$52989 = 0;$$56 = $$55$lcssa;$$561106 = $$551105$lcssa;
    label = 280;
    break;
   }
   HEAP32[$30>>2] = 16605;
   HEAP32[$5>>2] = 29;
   $$0$be = $$0;$$01048$be = $338;$$01050$be = $$551105$lcssa;$$0921$be = $$2923;$$0926$be = $$51$lcssa;$$0937$be = $$51988$lcssa;$$0992$be = $$0992;$$0993$be = $$55$lcssa;
  }
  do {
   if ((label|0) == 49) {
    label = 0;
    $146 = HEAP32[$29>>2]|0;
    $147 = ($146|0)==(0|0);
    if (!($147)) {
     $148 = ((($146)) + 4|0);
     HEAP32[$148>>2] = $$3940$lcssa;
    }
    $149 = HEAP32[$28>>2]|0;
    $150 = $149 & 512;
    $151 = ($150|0)==(0);
    if (!($151)) {
     $152 = $$3940$lcssa&255;
     HEAP8[$2>>0] = $152;
     $153 = $$3940$lcssa >>> 8;
     $154 = $153&255;
     HEAP8[$27>>0] = $154;
     $155 = $$3940$lcssa >>> 16;
     $156 = $155&255;
     HEAP8[$54>>0] = $156;
     $157 = $$3940$lcssa >>> 24;
     $158 = $157&255;
     HEAP8[$55>>0] = $158;
     $159 = HEAP32[$26>>2]|0;
     $160 = (_crc32($159,$2,4)|0);
     HEAP32[$26>>2] = $160;
    }
    HEAP32[$5>>2] = 3;
    $$410541855 = $$31053$lcssa;$$49301858 = 0;$$49411857 = 0;$$49971856 = $$3996$lcssa;
    label = 55;
   }
   else if ((label|0) == 124) {
    label = 0;
    if ($37) {
     $$54$ph = $$16;$$54991$ph = $$16953;$$58$ph = $$201013;$$581108$ph = $$201070;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break L17;
    } else {
     $$17 = $$16;$$17954 = $$16953;$$211014 = $$201013;$$211071 = $$201070;
     label = 125;
    }
   }
   else if ((label|0) == 145) {
    label = 0;
    $377 = HEAP32[$34>>2]|0;
    $378 = ($377|0)==(0);
    if ($378) {
     HEAP32[$5>>2] = 11;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$251075;$$0921$be = $$0921;$$0926$be = $$21;$$0937$be = $$21958;$$0992$be = $$0992;$$0993$be = $$251018;
     break;
    }
    $379 = ($377>>>0)>($$251018>>>0);
    $$251018$ = $379 ? $$251018 : $377;
    $380 = ($$251018$>>>0)>($$0992>>>0);
    $$4915 = $380 ? $$0992 : $$251018$;
    $381 = ($$4915|0)==(0);
    if ($381) {
     $$54$ph = $$21;$$54991$ph = $$21958;$$58$ph = $$251018;$$581108$ph = $$251075;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break L17;
    }
    _memcpy(($338|0),($$251075|0),($$4915|0))|0;
    $382 = (($$251018) - ($$4915))|0;
    $383 = (($$251075) + ($$4915)|0);
    $384 = (($$0992) - ($$4915))|0;
    $385 = (($338) + ($$4915)|0);
    $386 = HEAP32[$34>>2]|0;
    $387 = (($386) - ($$4915))|0;
    HEAP32[$34>>2] = $387;
    $$0$be = $$0;$$01048$be = $385;$$01050$be = $383;$$0921$be = $$0921;$$0926$be = $$21;$$0937$be = $$21958;$$0992$be = $384;$$0993$be = $382;
   }
   else if ((label|0) == 156) {
    label = 0;
    $410 = ($$lcssa>>>0)<(19);
    if ($410) {
     $433 = $$lcssa;
     while(1) {
      $432 = (($433) + 1)|0;
      $434 = (12212 + ($433<<1)|0);
      $435 = HEAP16[$434>>1]|0;
      $436 = $435&65535;
      $437 = (((($5)) + 112|0) + ($436<<1)|0);
      HEAP16[$437>>1] = 0;
      $exitcond = ($432|0)==(19);
      if ($exitcond) {
       break;
      } else {
       $433 = $432;
      }
     }
     HEAP32[$56>>2] = 19;
    }
    HEAP32[$61>>2] = $60;
    HEAP32[$39>>2] = $60;
    HEAP32[$40>>2] = 7;
    $438 = (_inflate_table(0,$62,19,$61,$40,$63)|0);
    $439 = ($438|0)==(0);
    if ($439) {
     HEAP32[$56>>2] = 0;
     HEAP32[$5>>2] = 18;
     $$1$ph = 0;$$25$ph = $$23$lcssa;$$25962$ph = $$23960$lcssa;$$291022$ph = $$271020$lcssa;$$291079$ph = $$271077$lcssa;$443 = 0;
     label = 166;
     break;
    } else {
     HEAP32[$30>>2] = 16446;
     HEAP32[$5>>2] = 29;
     $$0$be = $438;$$01048$be = $338;$$01050$be = $$271077$lcssa;$$0921$be = $$0921;$$0926$be = $$23$lcssa;$$0937$be = $$23960$lcssa;$$0992$be = $$0992;$$0993$be = $$271020$lcssa;
     break;
    }
   }
  } while(0);
  L161: do {
   if ((label|0) == 55) {
    while(1) {
     label = 0;
     $162 = ($$49971856|0)==(0);
     if ($162) {
      $$4925 = $$0921;$$54 = $$49301858;$$54991 = $$49411857;$$58 = 0;$$581108 = $$410541855;$$8 = $$0;$814 = $$0992;
      break L17;
     }
     $163 = (($$49971856) + -1)|0;
     $164 = ((($$410541855)) + 1|0);
     $165 = HEAP8[$$410541855>>0]|0;
     $166 = $165&255;
     $167 = $166 << $$49301858;
     $168 = (($167) + ($$49411857))|0;
     $169 = (($$49301858) + 8)|0;
     $170 = ($169>>>0)<(16);
     if ($170) {
      $$410541855 = $164;$$49301858 = $169;$$49411857 = $168;$$49971856 = $163;
      label = 55;
     } else {
      $$41054$lcssa = $164;$$4941$lcssa = $168;$$4997$lcssa = $163;
      label = 57;
      break;
     }
    }
   }
   else if ((label|0) == 125) {
    label = 0;
    $340 = HEAP32[$38>>2]|0;
    $341 = ($340|0)==(0);
    if (!($341)) {
     $343 = $$17 & 7;
     $344 = $$17954 >>> $343;
     $345 = (($$17) - ($343))|0;
     HEAP32[$5>>2] = 26;
     $$0$be = $$0;$$01048$be = $338;$$01050$be = $$211071;$$0921$be = $$0921;$$0926$be = $345;$$0937$be = $344;$$0992$be = $$0992;$$0993$be = $$211014;
     break;
    }
    $342 = ($$17>>>0)<(3);
    if ($342) {
     $346 = ($$211014|0)==(0);
     if ($346) {
      $$54$ph = $$17;$$54991$ph = $$17954;$$58$ph = 0;$$581108$ph = $$211071;$$8$ph = $$0;$$ph = $$0992;
      label = 281;
      break L17;
     }
     $347 = (($$17) + 8)|0;
     $348 = HEAP8[$$211071>>0]|0;
     $349 = $348&255;
     $350 = $349 << $$17;
     $351 = (($350) + ($$17954))|0;
     $352 = ((($$211071)) + 1|0);
     $353 = (($$211014) + -1)|0;
     $$18$lcssa = $347;$$18955$lcssa = $351;$$221015$lcssa = $353;$$221072$lcssa = $352;
    } else {
     $$18$lcssa = $$17;$$18955$lcssa = $$17954;$$221015$lcssa = $$211014;$$221072$lcssa = $$211071;
    }
    $354 = $$18955$lcssa & 1;
    HEAP32[$38>>2] = $354;
    $355 = $$18955$lcssa >>> 1;
    $trunc = $355&255;
    $trunc$clear = $trunc & 3;
    switch ($trunc$clear<<24>>24) {
    case 0:  {
     $$sink = 13;
     label = 136;
     break;
    }
    case 1:  {
     HEAP32[$39>>2] = 10036;
     HEAP32[$40>>2] = 9;
     HEAP32[$41>>2] = 12084;
     HEAP32[$42>>2] = 5;
     HEAP32[$5>>2] = 19;
     if ($43) {
      label = 132;
      break L17;
     }
     break;
    }
    case 2:  {
     $$sink = 16;
     label = 136;
     break;
    }
    case 3:  {
     HEAP32[$30>>2] = 16362;
     $$sink = 29;
     label = 136;
     break;
    }
    default: {
     label = 135;
     break L17;
    }
    }
    if ((label|0) == 136) {
     label = 0;
     HEAP32[$5>>2] = $$sink;
    }
    $358 = $$18955$lcssa >>> 3;
    $359 = (($$18$lcssa) + -3)|0;
    $$0$be = $$0;$$01048$be = $338;$$01050$be = $$221072$lcssa;$$0921$be = $$0921;$$0926$be = $359;$$0937$be = $358;$$0992$be = $$0992;$$0993$be = $$221015$lcssa;
   }
   else if ((label|0) == 166) {
    label = 0;
    $440 = HEAP32[$57>>2]|0;
    $441 = HEAP32[$58>>2]|0;
    $442 = (($441) + ($440))|0;
    $444 = ($443>>>0)<($442>>>0);
    do {
     if ($444) {
      $$251695 = $$25$ph;$$259621694 = $$25962$ph;$$2910221693 = $$291022$ph;$$2910791692 = $$291079$ph;$467 = $443;$532 = $440;$533 = $441;
      L182: while(1) {
       $445 = HEAP32[$39>>2]|0;
       $446 = HEAP32[$40>>2]|0;
       $447 = 1 << $446;
       $448 = (($447) + -1)|0;
       $449 = $448 & $$259621694;
       $$sroa$1878$0$$sroa_idx851640 = (((($445) + ($449<<2)|0)) + 1|0);
       $$sroa$1878$0$copyload861641 = HEAP8[$$sroa$1878$0$$sroa_idx851640>>0]|0;
       $450 = $$sroa$1878$0$copyload861641&255;
       $451 = ($$251695>>>0)<($450>>>0);
       if ($451) {
        $$261648 = $$251695;$$269631647 = $$259621694;$$3010231646 = $$2910221693;$$3010801645 = $$2910791692;
        while(1) {
         $452 = ($$3010231646|0)==(0);
         if ($452) {
          $$4925 = $$0921;$$54 = $$261648;$$54991 = $$269631647;$$58 = 0;$$581108 = $$3010801645;$$8 = $$1$ph;$814 = $$0992;
          break L17;
         }
         $453 = (($$3010231646) + -1)|0;
         $454 = ((($$3010801645)) + 1|0);
         $455 = HEAP8[$$3010801645>>0]|0;
         $456 = $455&255;
         $457 = $456 << $$261648;
         $458 = (($457) + ($$269631647))|0;
         $459 = (($$261648) + 8)|0;
         $460 = $448 & $458;
         $$sroa$1878$0$$sroa_idx85 = (((($445) + ($460<<2)|0)) + 1|0);
         $$sroa$1878$0$copyload86 = HEAP8[$$sroa$1878$0$$sroa_idx85>>0]|0;
         $461 = $$sroa$1878$0$copyload86&255;
         $462 = ($459>>>0)<($461>>>0);
         if ($462) {
          $$261648 = $459;$$269631647 = $458;$$3010231646 = $453;$$3010801645 = $454;
         } else {
          $$26$lcssa = $459;$$26963$lcssa = $458;$$301023$lcssa = $453;$$301080$lcssa = $454;$$lcssa1194 = $461;$$pn2373 = $460;
          break;
         }
        }
       } else {
        $$26$lcssa = $$251695;$$26963$lcssa = $$259621694;$$301023$lcssa = $$2910221693;$$301080$lcssa = $$2910791692;$$lcssa1194 = $450;$$pn2373 = $449;
       }
       $$sroa$42$0$copyload117$lcssa$in = (((($445) + ($$pn2373<<2)|0)) + 2|0);
       $$sroa$42$0$copyload117$lcssa = HEAP16[$$sroa$42$0$copyload117$lcssa$in>>1]|0;
       $463 = ($$sroa$42$0$copyload117$lcssa&65535)<(16);
       if ($463) {
        $464 = $$26963$lcssa >>> $$lcssa1194;
        $465 = (($$26$lcssa) - ($$lcssa1194))|0;
        $466 = (($467) + 1)|0;
        HEAP32[$56>>2] = $466;
        $468 = (((($5)) + 112|0) + ($467<<1)|0);
        HEAP16[$468>>1] = $$sroa$42$0$copyload117$lcssa;
        $$25$be = $465;$$25962$be = $464;$$291022$be = $$301023$lcssa;$$291079$be = $$301080$lcssa;
       } else {
        switch ($$sroa$42$0$copyload117$lcssa<<16>>16) {
        case 16:  {
         $476 = (($$lcssa1194) + 2)|0;
         $477 = ($$26$lcssa>>>0)<($476>>>0);
         if ($477) {
          $$271674 = $$26$lcssa;$$279641673 = $$26963$lcssa;$$3110241672 = $$301023$lcssa;$$3110811671 = $$301080$lcssa;
          while(1) {
           $480 = ($$3110241672|0)==(0);
           if ($480) {
            $$4925 = $$0921;$$54 = $$271674;$$54991 = $$279641673;$$58 = 0;$$581108 = $$3110811671;$$8 = $$1$ph;$814 = $$0992;
            break L17;
           }
           $481 = (($$3110241672) + -1)|0;
           $482 = ((($$3110811671)) + 1|0);
           $483 = HEAP8[$$3110811671>>0]|0;
           $484 = $483&255;
           $485 = $484 << $$271674;
           $486 = (($485) + ($$279641673))|0;
           $487 = (($$271674) + 8)|0;
           $488 = ($487>>>0)<($476>>>0);
           if ($488) {
            $$271674 = $487;$$279641673 = $486;$$3110241672 = $481;$$3110811671 = $482;
           } else {
            $$27$lcssa = $487;$$27964$lcssa = $486;$$311024$lcssa = $481;$$311081$lcssa = $482;
            break;
           }
          }
         } else {
          $$27$lcssa = $$26$lcssa;$$27964$lcssa = $$26963$lcssa;$$311024$lcssa = $$301023$lcssa;$$311081$lcssa = $$301080$lcssa;
         }
         $489 = $$27964$lcssa >>> $$lcssa1194;
         $490 = (($$27$lcssa) - ($$lcssa1194))|0;
         $491 = ($467|0)==(0);
         if ($491) {
          $$31 = $490;$$31968 = $489;$$351028 = $$311024$lcssa;$$351085 = $$311081$lcssa;
          label = 190;
          break L182;
         }
         $492 = (($467) + -1)|0;
         $493 = (((($5)) + 112|0) + ($492<<1)|0);
         $494 = HEAP16[$493>>1]|0;
         $495 = $494&65535;
         $496 = $489 & 3;
         $497 = (($496) + 3)|0;
         $498 = $489 >>> 2;
         $499 = (($490) + -2)|0;
         $$0907 = $495;$$30 = $499;$$30967 = $498;$$341027 = $$311024$lcssa;$$341084 = $$311081$lcssa;$$5916 = $497;
         break;
        }
        case 17:  {
         $474 = (($$lcssa1194) + 3)|0;
         $475 = ($$26$lcssa>>>0)<($474>>>0);
         if ($475) {
          $$281664 = $$26$lcssa;$$289651663 = $$26963$lcssa;$$3210251662 = $$301023$lcssa;$$3210821661 = $$301080$lcssa;
          while(1) {
           $500 = ($$3210251662|0)==(0);
           if ($500) {
            $$4925 = $$0921;$$54 = $$281664;$$54991 = $$289651663;$$58 = 0;$$581108 = $$3210821661;$$8 = $$1$ph;$814 = $$0992;
            break L17;
           }
           $501 = (($$3210251662) + -1)|0;
           $502 = ((($$3210821661)) + 1|0);
           $503 = HEAP8[$$3210821661>>0]|0;
           $504 = $503&255;
           $505 = $504 << $$281664;
           $506 = (($505) + ($$289651663))|0;
           $507 = (($$281664) + 8)|0;
           $508 = ($507>>>0)<($474>>>0);
           if ($508) {
            $$281664 = $507;$$289651663 = $506;$$3210251662 = $501;$$3210821661 = $502;
           } else {
            $$28$lcssa = $507;$$28965$lcssa = $506;$$321025$lcssa = $501;$$321082$lcssa = $502;
            break;
           }
          }
         } else {
          $$28$lcssa = $$26$lcssa;$$28965$lcssa = $$26963$lcssa;$$321025$lcssa = $$301023$lcssa;$$321082$lcssa = $$301080$lcssa;
         }
         $509 = $$28965$lcssa >>> $$lcssa1194;
         $510 = $509 & 7;
         $511 = (($510) + 3)|0;
         $512 = $509 >>> 3;
         $513 = (-3 - ($$lcssa1194))|0;
         $514 = (($513) + ($$28$lcssa))|0;
         $$0907 = 0;$$30 = $514;$$30967 = $512;$$341027 = $$321025$lcssa;$$341084 = $$321082$lcssa;$$5916 = $511;
         break;
        }
        default: {
         $478 = (($$lcssa1194) + 7)|0;
         $479 = ($$26$lcssa>>>0)<($478>>>0);
         if ($479) {
          $$291684 = $$26$lcssa;$$299661683 = $$26963$lcssa;$$3310261682 = $$301023$lcssa;$$3310831681 = $$301080$lcssa;
          while(1) {
           $515 = ($$3310261682|0)==(0);
           if ($515) {
            $$4925 = $$0921;$$54 = $$291684;$$54991 = $$299661683;$$58 = 0;$$581108 = $$3310831681;$$8 = $$1$ph;$814 = $$0992;
            break L17;
           }
           $516 = (($$3310261682) + -1)|0;
           $517 = ((($$3310831681)) + 1|0);
           $518 = HEAP8[$$3310831681>>0]|0;
           $519 = $518&255;
           $520 = $519 << $$291684;
           $521 = (($520) + ($$299661683))|0;
           $522 = (($$291684) + 8)|0;
           $523 = ($522>>>0)<($478>>>0);
           if ($523) {
            $$291684 = $522;$$299661683 = $521;$$3310261682 = $516;$$3310831681 = $517;
           } else {
            $$29$lcssa = $522;$$29966$lcssa = $521;$$331026$lcssa = $516;$$331083$lcssa = $517;
            break;
           }
          }
         } else {
          $$29$lcssa = $$26$lcssa;$$29966$lcssa = $$26963$lcssa;$$331026$lcssa = $$301023$lcssa;$$331083$lcssa = $$301080$lcssa;
         }
         $524 = $$29966$lcssa >>> $$lcssa1194;
         $525 = $524 & 127;
         $526 = (($525) + 11)|0;
         $527 = $524 >>> 7;
         $528 = (-7 - ($$lcssa1194))|0;
         $529 = (($528) + ($$29$lcssa))|0;
         $$0907 = 0;$$30 = $529;$$30967 = $527;$$341027 = $$331026$lcssa;$$341084 = $$331083$lcssa;$$5916 = $526;
        }
        }
        $530 = (($467) + ($$5916))|0;
        $531 = (($533) + ($532))|0;
        $534 = ($530>>>0)>($531>>>0);
        if ($534) {
         $$31 = $$30;$$31968 = $$30967;$$351028 = $$341027;$$351085 = $$341084;
         label = 190;
         break;
        }
        $535 = $$0907&65535;
        $536 = (($$5916) + -1)|0;
        $537 = (($467) + 1)|0;
        HEAP32[$56>>2] = $537;
        $538 = (((($5)) + 112|0) + ($467<<1)|0);
        HEAP16[$538>>1] = $535;
        $539 = ($536|0)==(0);
        if ($539) {
         $$25$be = $$30;$$25962$be = $$30967;$$291022$be = $$341027;$$291079$be = $$341084;
        } else {
         $541 = $536;
         while(1) {
          $$pre2359 = HEAP32[$56>>2]|0;
          $540 = (($541) + -1)|0;
          $542 = (($$pre2359) + 1)|0;
          HEAP32[$56>>2] = $542;
          $543 = (((($5)) + 112|0) + ($$pre2359<<1)|0);
          HEAP16[$543>>1] = $535;
          $544 = ($540|0)==(0);
          if ($544) {
           $$25$be = $$30;$$25962$be = $$30967;$$291022$be = $$341027;$$291079$be = $$341084;
           break;
          } else {
           $541 = $540;
          }
         }
        }
       }
       $469 = HEAP32[$56>>2]|0;
       $470 = HEAP32[$57>>2]|0;
       $471 = HEAP32[$58>>2]|0;
       $472 = (($471) + ($470))|0;
       $473 = ($469>>>0)<($472>>>0);
       if ($473) {
        $$251695 = $$25$be;$$259621694 = $$25962$be;$$2910221693 = $$291022$be;$$2910791692 = $$291079$be;$467 = $469;$532 = $470;$533 = $471;
       } else {
        label = 191;
        break;
       }
      }
      if ((label|0) == 190) {
       label = 0;
       HEAP32[$30>>2] = 16471;
       HEAP32[$5>>2] = 29;
       $$0$be = $$1$ph;$$01048$be = $338;$$01050$be = $$351085;$$0921$be = $$0921;$$0926$be = $$31;$$0937$be = $$31968;$$0992$be = $$0992;$$0993$be = $$351028;
       break L161;
      }
      else if ((label|0) == 191) {
       label = 0;
       $$pr1117$pre = HEAP32[$5>>2]|0;
       $545 = ($$pr1117$pre|0)==(29);
       if ($545) {
        $$0$be = $$1$ph;$$01048$be = $338;$$01050$be = $$291079$be;$$0921$be = $$0921;$$0926$be = $$25$be;$$0937$be = $$25962$be;$$0992$be = $$0992;$$0993$be = $$291022$be;
        break L161;
       } else {
        $$25$lcssa2389 = $$25$be;$$25962$lcssa2388 = $$25962$be;$$291022$lcssa2387 = $$291022$be;$$291079$lcssa2386 = $$291079$be;$548 = $470;
        break;
       }
      }
     } else {
      $$25$lcssa2389 = $$25$ph;$$25962$lcssa2388 = $$25962$ph;$$291022$lcssa2387 = $$291022$ph;$$291079$lcssa2386 = $$291079$ph;$548 = $440;
     }
    } while(0);
    $546 = HEAP16[$59>>1]|0;
    $547 = ($546<<16>>16)==(0);
    if ($547) {
     HEAP32[$30>>2] = 16497;
     HEAP32[$5>>2] = 29;
     $$0$be = $$1$ph;$$01048$be = $338;$$01050$be = $$291079$lcssa2386;$$0921$be = $$0921;$$0926$be = $$25$lcssa2389;$$0937$be = $$25962$lcssa2388;$$0992$be = $$0992;$$0993$be = $$291022$lcssa2387;
     break;
    }
    HEAP32[$61>>2] = $60;
    HEAP32[$39>>2] = $60;
    HEAP32[$40>>2] = 9;
    $549 = (_inflate_table(1,$62,$548,$61,$40,$63)|0);
    $550 = ($549|0)==(0);
    if (!($550)) {
     HEAP32[$30>>2] = 16534;
     HEAP32[$5>>2] = 29;
     $$0$be = $549;$$01048$be = $338;$$01050$be = $$291079$lcssa2386;$$0921$be = $$0921;$$0926$be = $$25$lcssa2389;$$0937$be = $$25962$lcssa2388;$$0992$be = $$0992;$$0993$be = $$291022$lcssa2387;
     break;
    }
    $551 = HEAP32[$61>>2]|0;
    HEAP32[$41>>2] = $551;
    HEAP32[$42>>2] = 6;
    $552 = HEAP32[$57>>2]|0;
    $553 = (((($5)) + 112|0) + ($552<<1)|0);
    $554 = HEAP32[$58>>2]|0;
    $555 = (_inflate_table(2,$553,$554,$61,$42,$63)|0);
    $556 = ($555|0)==(0);
    if ($556) {
     HEAP32[$5>>2] = 19;
     if ($43) {
      $$54$ph = $$25$lcssa2389;$$54991$ph = $$25962$lcssa2388;$$58$ph = $$291022$lcssa2387;$$581108$ph = $$291079$lcssa2386;$$8$ph = 0;$$ph = $$0992;
      label = 281;
      break L17;
     } else {
      $$2 = 0;$$33 = $$25$lcssa2389;$$33970 = $$25962$lcssa2388;$$371030 = $$291022$lcssa2387;$$371087 = $$291079$lcssa2386;
      label = 199;
      break;
     }
    } else {
     HEAP32[$30>>2] = 16562;
     HEAP32[$5>>2] = 29;
     $$0$be = $555;$$01048$be = $338;$$01050$be = $$291079$lcssa2386;$$0921$be = $$0921;$$0926$be = $$25$lcssa2389;$$0937$be = $$25962$lcssa2388;$$0992$be = $$0992;$$0993$be = $$291022$lcssa2387;
     break;
    }
   }
  } while(0);
  if ((label|0) == 57) {
   label = 0;
   $171 = HEAP32[$29>>2]|0;
   $172 = ($171|0)==(0|0);
   if (!($172)) {
    $173 = $$4941$lcssa >>> 8;
    $174 = ((($171)) + 8|0);
    $175 = $$4941$lcssa & 255;
    HEAP32[$174>>2] = $175;
    $176 = ((($171)) + 12|0);
    HEAP32[$176>>2] = $173;
   }
   $177 = HEAP32[$28>>2]|0;
   $178 = $177 & 512;
   $179 = ($178|0)==(0);
   if (!($179)) {
    $180 = $$4941$lcssa&255;
    HEAP8[$2>>0] = $180;
    $181 = $$4941$lcssa >>> 8;
    $182 = $181&255;
    HEAP8[$27>>0] = $182;
    $183 = HEAP32[$26>>2]|0;
    $184 = (_crc32($183,$2,2)|0);
    HEAP32[$26>>2] = $184;
   }
   HEAP32[$5>>2] = 4;
   $$51055 = $$41054$lcssa;$$5931 = 0;$$5942 = 0;$$5998 = $$4997$lcssa;
   label = 62;
  }
  else if ((label|0) == 199) {
   label = 0;
   HEAP32[$5>>2] = 20;
   $$3 = $$2;$$34 = $$33;$$34971 = $$33970;$$381031 = $$371030;$$381088 = $$371087;
   label = 200;
  }
  do {
   if ((label|0) == 62) {
    label = 0;
    $185 = HEAP32[$28>>2]|0;
    $186 = $185 & 1024;
    $187 = ($186|0)==(0);
    if ($187) {
     $208 = HEAP32[$29>>2]|0;
     $209 = ($208|0)==(0|0);
     if ($209) {
      $$71000 = $$5998;$$71057 = $$51055;$$7933 = $$5931;$$7944 = $$5942;
     } else {
      $210 = ((($208)) + 16|0);
      HEAP32[$210>>2] = 0;
      $$71000 = $$5998;$$71057 = $$51055;$$7933 = $$5931;$$7944 = $$5942;
     }
    } else {
     $188 = ($$5931>>>0)<(16);
     if ($188) {
      $$610561864 = $$51055;$$69321867 = $$5931;$$69431866 = $$5942;$$69991865 = $$5998;
      while(1) {
       $189 = ($$69991865|0)==(0);
       if ($189) {
        $$4925 = $$0921;$$54 = $$69321867;$$54991 = $$69431866;$$58 = 0;$$581108 = $$610561864;$$8 = $$0;$814 = $$0992;
        break L17;
       }
       $190 = (($$69991865) + -1)|0;
       $191 = ((($$610561864)) + 1|0);
       $192 = HEAP8[$$610561864>>0]|0;
       $193 = $192&255;
       $194 = $193 << $$69321867;
       $195 = (($194) + ($$69431866))|0;
       $196 = (($$69321867) + 8)|0;
       $197 = ($196>>>0)<(16);
       if ($197) {
        $$610561864 = $191;$$69321867 = $196;$$69431866 = $195;$$69991865 = $190;
       } else {
        $$61056$lcssa = $191;$$6943$lcssa = $195;$$6999$lcssa = $190;
        break;
       }
      }
     } else {
      $$61056$lcssa = $$51055;$$6943$lcssa = $$5942;$$6999$lcssa = $$5998;
     }
     HEAP32[$34>>2] = $$6943$lcssa;
     $198 = HEAP32[$29>>2]|0;
     $199 = ($198|0)==(0|0);
     if (!($199)) {
      $200 = ((($198)) + 20|0);
      HEAP32[$200>>2] = $$6943$lcssa;
     }
     $201 = $185 & 512;
     $202 = ($201|0)==(0);
     if ($202) {
      $$71000 = $$6999$lcssa;$$71057 = $$61056$lcssa;$$7933 = 0;$$7944 = 0;
     } else {
      $203 = $$6943$lcssa&255;
      HEAP8[$2>>0] = $203;
      $204 = $$6943$lcssa >>> 8;
      $205 = $204&255;
      HEAP8[$27>>0] = $205;
      $206 = HEAP32[$26>>2]|0;
      $207 = (_crc32($206,$2,2)|0);
      HEAP32[$26>>2] = $207;
      $$71000 = $$6999$lcssa;$$71057 = $$61056$lcssa;$$7933 = 0;$$7944 = 0;
     }
    }
    HEAP32[$5>>2] = 5;
    $$81001 = $$71000;$$81058 = $$71057;$$8934 = $$7933;$$8945 = $$7944;
    label = 73;
   }
   else if ((label|0) == 200) {
    label = 0;
    $557 = ($$381031>>>0)>(5);
    $558 = ($$0992>>>0)>(257);
    $or$cond7 = $558 & $557;
    if ($or$cond7) {
     HEAP32[$7>>2] = $338;
     HEAP32[$17>>2] = $$0992;
     HEAP32[$0>>2] = $$381088;
     HEAP32[$19>>2] = $$381031;
     HEAP32[$21>>2] = $$34971;
     HEAP32[$23>>2] = $$34;
     _inflate_fast($0,$$0921);
     $559 = HEAP32[$7>>2]|0;
     $560 = HEAP32[$17>>2]|0;
     $561 = HEAP32[$0>>2]|0;
     $562 = HEAP32[$19>>2]|0;
     $563 = HEAP32[$21>>2]|0;
     $564 = HEAP32[$23>>2]|0;
     $565 = HEAP32[$5>>2]|0;
     $566 = ($565|0)==(11);
     if (!($566)) {
      $$0$be = $$3;$$01048$be = $559;$$01050$be = $561;$$0921$be = $$0921;$$0926$be = $564;$$0937$be = $563;$$0992$be = $560;$$0993$be = $562;
      break;
     }
     HEAP32[$44>>2] = -1;
     $$0$be = $$3;$$01048$be = $559;$$01050$be = $561;$$0921$be = $$0921;$$0926$be = $564;$$0937$be = $563;$$0992$be = $560;$$0993$be = $562;
     break;
    }
    HEAP32[$44>>2] = 0;
    $567 = HEAP32[$39>>2]|0;
    $568 = HEAP32[$40>>2]|0;
    $569 = 1 << $568;
    $570 = (($569) + -1)|0;
    $571 = $570 & $$34971;
    $$sroa$1878$0$$sroa_idx811705 = (((($567) + ($571<<2)|0)) + 1|0);
    $$sroa$1878$0$copyload821706 = HEAP8[$$sroa$1878$0$$sroa_idx811705>>0]|0;
    $572 = $$sroa$1878$0$copyload821706&255;
    $573 = ($$34>>>0)<($572>>>0);
    if ($573) {
     $$351712 = $$34;$$359721711 = $$34971;$$3910321710 = $$381031;$$3910891709 = $$381088;
     while(1) {
      $574 = ($$3910321710|0)==(0);
      if ($574) {
       $$4925 = $$0921;$$54 = $$351712;$$54991 = $$359721711;$$58 = 0;$$581108 = $$3910891709;$$8 = $$3;$814 = $$0992;
       break L17;
      }
      $575 = (($$3910321710) + -1)|0;
      $576 = ((($$3910891709)) + 1|0);
      $577 = HEAP8[$$3910891709>>0]|0;
      $578 = $577&255;
      $579 = $578 << $$351712;
      $580 = (($579) + ($$359721711))|0;
      $581 = (($$351712) + 8)|0;
      $582 = $570 & $580;
      $$sroa$1878$0$$sroa_idx81 = (((($567) + ($582<<2)|0)) + 1|0);
      $$sroa$1878$0$copyload82 = HEAP8[$$sroa$1878$0$$sroa_idx81>>0]|0;
      $583 = $$sroa$1878$0$copyload82&255;
      $584 = ($581>>>0)<($583>>>0);
      if ($584) {
       $$351712 = $581;$$359721711 = $580;$$3910321710 = $575;$$3910891709 = $576;
      } else {
       $$35$lcssa = $581;$$35972$lcssa = $580;$$391032$lcssa = $575;$$391089$lcssa = $576;$$lcssa1245 = $583;$$pn2371 = $582;$$sroa$1878$0$copyload82$lcssa = $$sroa$1878$0$copyload82;
       break;
      }
     }
    } else {
     $$35$lcssa = $$34;$$35972$lcssa = $$34971;$$391032$lcssa = $$381031;$$391089$lcssa = $$381088;$$lcssa1245 = $572;$$pn2371 = $571;$$sroa$1878$0$copyload82$lcssa = $$sroa$1878$0$copyload821706;
    }
    $$sroa$42$0$copyload113$lcssa$in = (((($567) + ($$pn2371<<2)|0)) + 2|0);
    $$sroa$061$0$copyload73$lcssa$in = (($567) + ($$pn2371<<2)|0);
    $$sroa$42$0$copyload113$lcssa = HEAP16[$$sroa$42$0$copyload113$lcssa$in>>1]|0;
    $$sroa$061$0$copyload73$lcssa = HEAP8[$$sroa$061$0$copyload73$lcssa$in>>0]|0;
    $585 = $$sroa$061$0$copyload73$lcssa&255;
    $586 = ($$sroa$061$0$copyload73$lcssa<<24>>24)!=(0);
    $587 = $585 & 240;
    $588 = ($587|0)==(0);
    $or$cond1114 = $586 & $588;
    if ($or$cond1114) {
     $589 = $$sroa$42$0$copyload113$lcssa&65535;
     $590 = (($$lcssa1245) + ($585))|0;
     $591 = 1 << $590;
     $592 = (($591) + -1)|0;
     $593 = $$35972$lcssa & $592;
     $594 = $593 >>> $$lcssa1245;
     $595 = (($594) + ($589))|0;
     $$sroa$1878$0$$sroa_idx831729 = (((($567) + ($595<<2)|0)) + 1|0);
     $$sroa$1878$0$copyload841730 = HEAP8[$$sroa$1878$0$$sroa_idx831729>>0]|0;
     $596 = $$sroa$1878$0$copyload841730&255;
     $597 = (($$lcssa1245) + ($596))|0;
     $598 = ($597>>>0)>($$35$lcssa>>>0);
     if ($598) {
      $$361734 = $$35$lcssa;$$369731733 = $$35972$lcssa;$$4010331732 = $$391032$lcssa;$$4010901731 = $$391089$lcssa;
      while(1) {
       $599 = ($$4010331732|0)==(0);
       if ($599) {
        $$4925 = $$0921;$$54 = $$361734;$$54991 = $$369731733;$$58 = 0;$$581108 = $$4010901731;$$8 = $$3;$814 = $$0992;
        break L17;
       }
       $600 = (($$4010331732) + -1)|0;
       $601 = ((($$4010901731)) + 1|0);
       $602 = HEAP8[$$4010901731>>0]|0;
       $603 = $602&255;
       $604 = $603 << $$361734;
       $605 = (($604) + ($$369731733))|0;
       $606 = (($$361734) + 8)|0;
       $607 = $605 & $592;
       $608 = $607 >>> $$lcssa1245;
       $609 = (($608) + ($589))|0;
       $$sroa$1878$0$$sroa_idx83 = (((($567) + ($609<<2)|0)) + 1|0);
       $$sroa$1878$0$copyload84 = HEAP8[$$sroa$1878$0$$sroa_idx83>>0]|0;
       $610 = $$sroa$1878$0$copyload84&255;
       $611 = (($$lcssa1245) + ($610))|0;
       $612 = ($611>>>0)>($606>>>0);
       if ($612) {
        $$361734 = $606;$$369731733 = $605;$$4010331732 = $600;$$4010901731 = $601;
       } else {
        $$36$lcssa = $606;$$36973$lcssa = $605;$$401033$lcssa = $600;$$401090$lcssa = $601;$$lcssa1257 = $609;$$sroa$1878$0$copyload84$lcssa = $$sroa$1878$0$copyload84;
        break;
       }
      }
     } else {
      $$36$lcssa = $$35$lcssa;$$36973$lcssa = $$35972$lcssa;$$401033$lcssa = $$391032$lcssa;$$401090$lcssa = $$391089$lcssa;$$lcssa1257 = $595;$$sroa$1878$0$copyload84$lcssa = $$sroa$1878$0$copyload841730;
     }
     $$sroa$42$0$$sroa_idx114 = (((($567) + ($$lcssa1257<<2)|0)) + 2|0);
     $$sroa$42$0$copyload115 = HEAP16[$$sroa$42$0$$sroa_idx114>>1]|0;
     $$sroa$061$0$$sroa_idx74 = (($567) + ($$lcssa1257<<2)|0);
     $$sroa$061$0$copyload75 = HEAP8[$$sroa$061$0$$sroa_idx74>>0]|0;
     $613 = $$36973$lcssa >>> $$lcssa1245;
     $614 = (($$36$lcssa) - ($$lcssa1245))|0;
     HEAP32[$44>>2] = $$lcssa1245;
     $$37 = $614;$$37974 = $613;$$411034 = $$401033$lcssa;$$411091 = $$401090$lcssa;$$sroa$061$0 = $$sroa$061$0$copyload75;$$sroa$1878$0 = $$sroa$1878$0$copyload84$lcssa;$$sroa$42$0 = $$sroa$42$0$copyload115;$619 = $$lcssa1245;
    } else {
     $$37 = $$35$lcssa;$$37974 = $$35972$lcssa;$$411034 = $$391032$lcssa;$$411091 = $$391089$lcssa;$$sroa$061$0 = $$sroa$061$0$copyload73$lcssa;$$sroa$1878$0 = $$sroa$1878$0$copyload82$lcssa;$$sroa$42$0 = $$sroa$42$0$copyload113$lcssa;$619 = 0;
    }
    $615 = $$sroa$1878$0&255;
    $616 = $$37974 >>> $615;
    $617 = (($$37) - ($615))|0;
    $618 = (($619) + ($615))|0;
    HEAP32[$44>>2] = $618;
    $620 = $$sroa$42$0&65535;
    HEAP32[$34>>2] = $620;
    $621 = $$sroa$061$0&255;
    $622 = ($$sroa$061$0<<24>>24)==(0);
    if ($622) {
     HEAP32[$5>>2] = 25;
     $$0$be = $$3;$$01048$be = $338;$$01050$be = $$411091;$$0921$be = $$0921;$$0926$be = $617;$$0937$be = $616;$$0992$be = $$0992;$$0993$be = $$411034;
     break;
    }
    $623 = $621 & 32;
    $624 = ($623|0)==(0);
    if (!($624)) {
     HEAP32[$44>>2] = -1;
     HEAP32[$5>>2] = 11;
     $$0$be = $$3;$$01048$be = $338;$$01050$be = $$411091;$$0921$be = $$0921;$$0926$be = $617;$$0937$be = $616;$$0992$be = $$0992;$$0993$be = $$411034;
     break;
    }
    $625 = $621 & 64;
    $626 = ($625|0)==(0);
    if ($626) {
     $627 = $621 & 15;
     HEAP32[$45>>2] = $627;
     HEAP32[$5>>2] = 21;
     $$38 = $617;$$38975 = $616;$$4 = $$3;$$421035 = $$411034;$$421092 = $$411091;$628 = $627;
     label = 218;
     break;
    } else {
     HEAP32[$30>>2] = 16744;
     HEAP32[$5>>2] = 29;
     $$0$be = $$3;$$01048$be = $338;$$01050$be = $$411091;$$0921$be = $$0921;$$0926$be = $617;$$0937$be = $616;$$0992$be = $$0992;$$0993$be = $$411034;
     break;
    }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $211 = HEAP32[$28>>2]|0;
   $212 = $211 & 1024;
   $213 = ($212|0)==(0);
   if ($213) {
    $$101003 = $$81001;$$101060 = $$81058;
   } else {
    $214 = HEAP32[$34>>2]|0;
    $215 = ($214>>>0)>($$81001>>>0);
    $$81001$ = $215 ? $$81001 : $214;
    $216 = ($$81001$|0)==(0);
    if ($216) {
     $$91002 = $$81001;$$91059 = $$81058;$241 = $214;
    } else {
     $217 = HEAP32[$29>>2]|0;
     $218 = ($217|0)==(0|0);
     if ($218) {
      $233 = $211;
     } else {
      $219 = ((($217)) + 16|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = ($220|0)==(0|0);
      if ($221) {
       $233 = $211;
      } else {
       $222 = ((($217)) + 20|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($223) - ($214))|0;
       $225 = (($220) + ($224)|0);
       $226 = (($224) + ($$81001$))|0;
       $227 = ((($217)) + 24|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = ($226>>>0)>($228>>>0);
       $230 = (($228) - ($224))|0;
       $231 = $229 ? $230 : $$81001$;
       _memcpy(($225|0),($$81058|0),($231|0))|0;
       $$pre2369 = HEAP32[$28>>2]|0;
       $233 = $$pre2369;
      }
     }
     $232 = $233 & 512;
     $234 = ($232|0)==(0);
     if (!($234)) {
      $235 = HEAP32[$26>>2]|0;
      $236 = (_crc32($235,$$81058,$$81001$)|0);
      HEAP32[$26>>2] = $236;
     }
     $237 = (($$81001) - ($$81001$))|0;
     $238 = (($$81058) + ($$81001$)|0);
     $239 = HEAP32[$34>>2]|0;
     $240 = (($239) - ($$81001$))|0;
     HEAP32[$34>>2] = $240;
     $$91002 = $237;$$91059 = $238;$241 = $240;
    }
    $242 = ($241|0)==(0);
    if ($242) {
     $$101003 = $$91002;$$101060 = $$91059;
    } else {
     $$54$ph = $$8934;$$54991$ph = $$8945;$$58$ph = $$91002;$$581108$ph = $$91059;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break;
    }
   }
   HEAP32[$34>>2] = 0;
   HEAP32[$5>>2] = 6;
   $$111004 = $$101003;$$111061 = $$101060;$$9935 = $$8934;$$9946 = $$8945;
   label = 83;
  }
  else if ((label|0) == 218) {
   label = 0;
   $629 = ($628|0)==(0);
   if ($629) {
    $$pre2364 = HEAP32[$34>>2]|0;
    $$40 = $$38;$$40977 = $$38975;$$441037 = $$421035;$$441094 = $$421092;$649 = $$pre2364;
   } else {
    $630 = ($$38>>>0)<($628>>>0);
    if ($630) {
     $$391747 = $$38;$$399761746 = $$38975;$$4310361745 = $$421035;$$4310931744 = $$421092;
     while(1) {
      $631 = ($$4310361745|0)==(0);
      if ($631) {
       $$4925 = $$0921;$$54 = $$391747;$$54991 = $$399761746;$$58 = 0;$$581108 = $$4310931744;$$8 = $$4;$814 = $$0992;
       break L17;
      }
      $632 = (($$4310361745) + -1)|0;
      $633 = ((($$4310931744)) + 1|0);
      $634 = HEAP8[$$4310931744>>0]|0;
      $635 = $634&255;
      $636 = $635 << $$391747;
      $637 = (($636) + ($$399761746))|0;
      $638 = (($$391747) + 8)|0;
      $639 = ($638>>>0)<($628>>>0);
      if ($639) {
       $$391747 = $638;$$399761746 = $637;$$4310361745 = $632;$$4310931744 = $633;
      } else {
       $$39$lcssa = $638;$$39976$lcssa = $637;$$431036$lcssa = $632;$$431093$lcssa = $633;
       break;
      }
     }
    } else {
     $$39$lcssa = $$38;$$39976$lcssa = $$38975;$$431036$lcssa = $$421035;$$431093$lcssa = $$421092;
    }
    $640 = 1 << $628;
    $641 = (($640) + -1)|0;
    $642 = $641 & $$39976$lcssa;
    $643 = HEAP32[$34>>2]|0;
    $644 = (($643) + ($642))|0;
    HEAP32[$34>>2] = $644;
    $645 = $$39976$lcssa >>> $628;
    $646 = (($$39$lcssa) - ($628))|0;
    $647 = HEAP32[$44>>2]|0;
    $648 = (($647) + ($628))|0;
    HEAP32[$44>>2] = $648;
    $$40 = $646;$$40977 = $645;$$441037 = $$431036$lcssa;$$441094 = $$431093$lcssa;$649 = $644;
   }
   HEAP32[$46>>2] = $649;
   HEAP32[$5>>2] = 22;
   $$41$ph = $$40;$$41978$ph = $$40977;$$451038$ph = $$441037;$$451095$ph = $$441094;$$5$ph = $$4;
   label = 225;
  }
  do {
   if ((label|0) == 83) {
    label = 0;
    $243 = HEAP32[$28>>2]|0;
    $244 = $243 & 2048;
    $245 = ($244|0)==(0);
    if ($245) {
     $270 = HEAP32[$29>>2]|0;
     $271 = ($270|0)==(0|0);
     if ($271) {
      $$121005 = $$111004;$$121062 = $$111061;
     } else {
      $272 = ((($270)) + 28|0);
      HEAP32[$272>>2] = 0;
      $$121005 = $$111004;$$121062 = $$111061;
     }
    } else {
     $246 = ($$111004|0)==(0);
     if ($246) {
      $$54$ph = $$9935;$$54991$ph = $$9946;$$58$ph = 0;$$581108$ph = $$111061;$$8$ph = $$0;$$ph = $$0992;
      label = 281;
      break L17;
     } else {
      $$1912 = 0;
     }
     while(1) {
      $247 = (($$1912) + 1)|0;
      $248 = (($$111061) + ($$1912)|0);
      $249 = HEAP8[$248>>0]|0;
      $250 = HEAP32[$29>>2]|0;
      $251 = ($250|0)==(0|0);
      if (!($251)) {
       $252 = ((($250)) + 28|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = ($253|0)==(0|0);
       if (!($254)) {
        $255 = HEAP32[$34>>2]|0;
        $256 = ((($250)) + 32|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = ($255>>>0)<($257>>>0);
        if ($258) {
         $259 = (($253) + ($255)|0);
         $260 = (($255) + 1)|0;
         HEAP32[$34>>2] = $260;
         HEAP8[$259>>0] = $249;
        }
       }
      }
      $261 = ($249<<24>>24)!=(0);
      $262 = ($$111004>>>0)>($247>>>0);
      $or$cond1110 = $261 & $262;
      if ($or$cond1110) {
       $$1912 = $247;
      } else {
       break;
      }
     }
     $263 = HEAP32[$28>>2]|0;
     $264 = $263 & 512;
     $265 = ($264|0)==(0);
     if (!($265)) {
      $266 = HEAP32[$26>>2]|0;
      $267 = (_crc32($266,$$111061,$247)|0);
      HEAP32[$26>>2] = $267;
     }
     $268 = (($$111004) - ($247))|0;
     $269 = (($$111061) + ($247)|0);
     if ($261) {
      $$54$ph = $$9935;$$54991$ph = $$9946;$$58$ph = $268;$$581108$ph = $269;$$8$ph = $$0;$$ph = $$0992;
      label = 281;
      break L17;
     } else {
      $$121005 = $268;$$121062 = $269;
     }
    }
    HEAP32[$34>>2] = 0;
    HEAP32[$5>>2] = 7;
    $$10936 = $$9935;$$10947 = $$9946;$$131006 = $$121005;$$131063 = $$121062;
    label = 96;
   }
   else if ((label|0) == 225) {
    label = 0;
    $650 = HEAP32[$41>>2]|0;
    $651 = HEAP32[$42>>2]|0;
    $652 = 1 << $651;
    $653 = (($652) + -1)|0;
    $654 = $653 & $$41978$ph;
    $$sroa$1878$0$$sroa_idx791757 = (((($650) + ($654<<2)|0)) + 1|0);
    $$sroa$1878$0$copyload801758 = HEAP8[$$sroa$1878$0$$sroa_idx791757>>0]|0;
    $655 = $$sroa$1878$0$copyload801758&255;
    $656 = ($$41$ph>>>0)<($655>>>0);
    if ($656) {
     $$411764 = $$41$ph;$$419781763 = $$41978$ph;$$4510381762 = $$451038$ph;$$4510951761 = $$451095$ph;
     while(1) {
      $657 = ($$4510381762|0)==(0);
      if ($657) {
       $$4925 = $$0921;$$54 = $$411764;$$54991 = $$419781763;$$58 = 0;$$581108 = $$4510951761;$$8 = $$5$ph;$814 = $$0992;
       break L17;
      }
      $658 = (($$4510381762) + -1)|0;
      $659 = ((($$4510951761)) + 1|0);
      $660 = HEAP8[$$4510951761>>0]|0;
      $661 = $660&255;
      $662 = $661 << $$411764;
      $663 = (($662) + ($$419781763))|0;
      $664 = (($$411764) + 8)|0;
      $665 = $653 & $663;
      $$sroa$1878$0$$sroa_idx79 = (((($650) + ($665<<2)|0)) + 1|0);
      $$sroa$1878$0$copyload80 = HEAP8[$$sroa$1878$0$$sroa_idx79>>0]|0;
      $666 = $$sroa$1878$0$copyload80&255;
      $667 = ($664>>>0)<($666>>>0);
      if ($667) {
       $$411764 = $664;$$419781763 = $663;$$4510381762 = $658;$$4510951761 = $659;
      } else {
       $$41$lcssa = $664;$$41978$lcssa = $663;$$451038$lcssa = $658;$$451095$lcssa = $659;$$lcssa1271 = $666;$$pn = $665;$$sroa$1878$0$copyload80$lcssa = $$sroa$1878$0$copyload80;
       break;
      }
     }
    } else {
     $$41$lcssa = $$41$ph;$$41978$lcssa = $$41978$ph;$$451038$lcssa = $$451038$ph;$$451095$lcssa = $$451095$ph;$$lcssa1271 = $655;$$pn = $654;$$sroa$1878$0$copyload80$lcssa = $$sroa$1878$0$copyload801758;
    }
    $$sroa$42$0$copyload111$lcssa$in = (((($650) + ($$pn<<2)|0)) + 2|0);
    $$sroa$061$0$copyload71$lcssa$in = (($650) + ($$pn<<2)|0);
    $$sroa$42$0$copyload111$lcssa = HEAP16[$$sroa$42$0$copyload111$lcssa$in>>1]|0;
    $$sroa$061$0$copyload71$lcssa = HEAP8[$$sroa$061$0$copyload71$lcssa$in>>0]|0;
    $668 = $$sroa$061$0$copyload71$lcssa&255;
    $669 = $668 & 240;
    $670 = ($669|0)==(0);
    if ($670) {
     $671 = $$sroa$42$0$copyload111$lcssa&65535;
     $672 = (($$lcssa1271) + ($668))|0;
     $673 = 1 << $672;
     $674 = (($673) + -1)|0;
     $675 = $$41978$lcssa & $674;
     $676 = $675 >>> $$lcssa1271;
     $677 = (($676) + ($671))|0;
     $$sroa$1878$0$$sroa_idx1780 = (((($650) + ($677<<2)|0)) + 1|0);
     $$sroa$1878$0$copyload1781 = HEAP8[$$sroa$1878$0$$sroa_idx1780>>0]|0;
     $678 = $$sroa$1878$0$copyload1781&255;
     $679 = (($$lcssa1271) + ($678))|0;
     $680 = ($679>>>0)>($$41$lcssa>>>0);
     if ($680) {
      $$421785 = $$41$lcssa;$$429791784 = $$41978$lcssa;$$4610391783 = $$451038$lcssa;$$4610961782 = $$451095$lcssa;
      while(1) {
       $681 = ($$4610391783|0)==(0);
       if ($681) {
        $$4925 = $$0921;$$54 = $$421785;$$54991 = $$429791784;$$58 = 0;$$581108 = $$4610961782;$$8 = $$5$ph;$814 = $$0992;
        break L17;
       }
       $682 = (($$4610391783) + -1)|0;
       $683 = ((($$4610961782)) + 1|0);
       $684 = HEAP8[$$4610961782>>0]|0;
       $685 = $684&255;
       $686 = $685 << $$421785;
       $687 = (($686) + ($$429791784))|0;
       $688 = (($$421785) + 8)|0;
       $689 = $687 & $674;
       $690 = $689 >>> $$lcssa1271;
       $691 = (($690) + ($671))|0;
       $$sroa$1878$0$$sroa_idx = (((($650) + ($691<<2)|0)) + 1|0);
       $$sroa$1878$0$copyload = HEAP8[$$sroa$1878$0$$sroa_idx>>0]|0;
       $692 = $$sroa$1878$0$copyload&255;
       $693 = (($$lcssa1271) + ($692))|0;
       $694 = ($693>>>0)>($688>>>0);
       if ($694) {
        $$421785 = $688;$$429791784 = $687;$$4610391783 = $682;$$4610961782 = $683;
       } else {
        $$42$lcssa = $688;$$42979$lcssa = $687;$$461039$lcssa = $682;$$461096$lcssa = $683;$$lcssa1283 = $691;$$sroa$1878$0$copyload$lcssa = $$sroa$1878$0$copyload;
        break;
       }
      }
     } else {
      $$42$lcssa = $$41$lcssa;$$42979$lcssa = $$41978$lcssa;$$461039$lcssa = $$451038$lcssa;$$461096$lcssa = $$451095$lcssa;$$lcssa1283 = $677;$$sroa$1878$0$copyload$lcssa = $$sroa$1878$0$copyload1781;
     }
     $$sroa$42$0$$sroa_idx108 = (((($650) + ($$lcssa1283<<2)|0)) + 2|0);
     $$sroa$42$0$copyload = HEAP16[$$sroa$42$0$$sroa_idx108>>1]|0;
     $$sroa$061$0$$sroa_idx = (($650) + ($$lcssa1283<<2)|0);
     $$sroa$061$0$copyload = HEAP8[$$sroa$061$0$$sroa_idx>>0]|0;
     $695 = $$42979$lcssa >>> $$lcssa1271;
     $696 = (($$42$lcssa) - ($$lcssa1271))|0;
     $697 = HEAP32[$44>>2]|0;
     $698 = (($697) + ($$lcssa1271))|0;
     HEAP32[$44>>2] = $698;
     $$43 = $696;$$43980 = $695;$$471040 = $$461039$lcssa;$$471097 = $$461096$lcssa;$$sroa$061$1 = $$sroa$061$0$copyload;$$sroa$1878$1 = $$sroa$1878$0$copyload$lcssa;$$sroa$42$1 = $$sroa$42$0$copyload;$703 = $698;
    } else {
     $$pre2366 = HEAP32[$44>>2]|0;
     $$43 = $$41$lcssa;$$43980 = $$41978$lcssa;$$471040 = $$451038$lcssa;$$471097 = $$451095$lcssa;$$sroa$061$1 = $$sroa$061$0$copyload71$lcssa;$$sroa$1878$1 = $$sroa$1878$0$copyload80$lcssa;$$sroa$42$1 = $$sroa$42$0$copyload111$lcssa;$703 = $$pre2366;
    }
    $699 = $$sroa$1878$1&255;
    $700 = $$43980 >>> $699;
    $701 = (($$43) - ($699))|0;
    $702 = (($703) + ($699))|0;
    HEAP32[$44>>2] = $702;
    $704 = $$sroa$061$1&255;
    $705 = $704 & 64;
    $706 = ($705|0)==(0);
    if ($706) {
     $707 = $$sroa$42$1&65535;
     HEAP32[$47>>2] = $707;
     $708 = $704 & 15;
     HEAP32[$45>>2] = $708;
     HEAP32[$5>>2] = 23;
     $$44 = $701;$$44981 = $700;$$481041 = $$471040;$$481098 = $$471097;$$6 = $$5$ph;$709 = $708;
     label = 237;
     break;
    } else {
     HEAP32[$30>>2] = 16772;
     HEAP32[$5>>2] = 29;
     $$0$be = $$5$ph;$$01048$be = $338;$$01050$be = $$471097;$$0921$be = $$0921;$$0926$be = $701;$$0937$be = $700;$$0992$be = $$0992;$$0993$be = $$471040;
     break;
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $273 = HEAP32[$28>>2]|0;
   $274 = $273 & 4096;
   $275 = ($274|0)==(0);
   if ($275) {
    $300 = HEAP32[$29>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     $$141007 = $$131006;$$141064 = $$131063;
    } else {
     $302 = ((($300)) + 36|0);
     HEAP32[$302>>2] = 0;
     $$141007 = $$131006;$$141064 = $$131063;
    }
   } else {
    $276 = ($$131006|0)==(0);
    if ($276) {
     $$54$ph = $$10936;$$54991$ph = $$10947;$$58$ph = 0;$$581108$ph = $$131063;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break;
    } else {
     $$2913 = 0;
    }
    while(1) {
     $277 = (($$2913) + 1)|0;
     $278 = (($$131063) + ($$2913)|0);
     $279 = HEAP8[$278>>0]|0;
     $280 = HEAP32[$29>>2]|0;
     $281 = ($280|0)==(0|0);
     if (!($281)) {
      $282 = ((($280)) + 36|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = ($283|0)==(0|0);
      if (!($284)) {
       $285 = HEAP32[$34>>2]|0;
       $286 = ((($280)) + 40|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = ($285>>>0)<($287>>>0);
       if ($288) {
        $289 = (($283) + ($285)|0);
        $290 = (($285) + 1)|0;
        HEAP32[$34>>2] = $290;
        HEAP8[$289>>0] = $279;
       }
      }
     }
     $291 = ($279<<24>>24)!=(0);
     $292 = ($$131006>>>0)>($277>>>0);
     $or$cond1111 = $291 & $292;
     if ($or$cond1111) {
      $$2913 = $277;
     } else {
      break;
     }
    }
    $293 = HEAP32[$28>>2]|0;
    $294 = $293 & 512;
    $295 = ($294|0)==(0);
    if (!($295)) {
     $296 = HEAP32[$26>>2]|0;
     $297 = (_crc32($296,$$131063,$277)|0);
     HEAP32[$26>>2] = $297;
    }
    $298 = (($$131006) - ($277))|0;
    $299 = (($$131063) + ($277)|0);
    if ($291) {
     $$54$ph = $$10936;$$54991$ph = $$10947;$$58$ph = $298;$$581108$ph = $299;$$8$ph = $$0;$$ph = $$0992;
     label = 281;
     break;
    } else {
     $$141007 = $298;$$141064 = $299;
    }
   }
   HEAP32[$5>>2] = 8;
   $$11 = $$10936;$$11948 = $$10947;$$151008 = $$141007;$$151065 = $$141064;
   label = 109;
  }
  else if ((label|0) == 237) {
   label = 0;
   $710 = ($709|0)==(0);
   if ($710) {
    $$46 = $$44;$$46983 = $$44981;$$501043 = $$481041;$$501100 = $$481098;
   } else {
    $711 = ($$44>>>0)<($709>>>0);
    if ($711) {
     $$451798 = $$44;$$459821797 = $$44981;$$4910421796 = $$481041;$$4910991795 = $$481098;
     while(1) {
      $712 = ($$4910421796|0)==(0);
      if ($712) {
       $$4925 = $$0921;$$54 = $$451798;$$54991 = $$459821797;$$58 = 0;$$581108 = $$4910991795;$$8 = $$6;$814 = $$0992;
       break L17;
      }
      $713 = (($$4910421796) + -1)|0;
      $714 = ((($$4910991795)) + 1|0);
      $715 = HEAP8[$$4910991795>>0]|0;
      $716 = $715&255;
      $717 = $716 << $$451798;
      $718 = (($717) + ($$459821797))|0;
      $719 = (($$451798) + 8)|0;
      $720 = ($719>>>0)<($709>>>0);
      if ($720) {
       $$451798 = $719;$$459821797 = $718;$$4910421796 = $713;$$4910991795 = $714;
      } else {
       $$45$lcssa = $719;$$45982$lcssa = $718;$$491042$lcssa = $713;$$491099$lcssa = $714;
       break;
      }
     }
    } else {
     $$45$lcssa = $$44;$$45982$lcssa = $$44981;$$491042$lcssa = $$481041;$$491099$lcssa = $$481098;
    }
    $721 = 1 << $709;
    $722 = (($721) + -1)|0;
    $723 = $722 & $$45982$lcssa;
    $724 = HEAP32[$47>>2]|0;
    $725 = (($724) + ($723))|0;
    HEAP32[$47>>2] = $725;
    $726 = $$45982$lcssa >>> $709;
    $727 = (($$45$lcssa) - ($709))|0;
    $728 = HEAP32[$44>>2]|0;
    $729 = (($728) + ($709))|0;
    HEAP32[$44>>2] = $729;
    $$46 = $727;$$46983 = $726;$$501043 = $$491042$lcssa;$$501100 = $$491099$lcssa;
   }
   HEAP32[$5>>2] = 24;
   $$47 = $$46;$$47984 = $$46983;$$511044 = $$501043;$$511101 = $$501100;$$7 = $$6;
   label = 243;
  }
  do {
   if ((label|0) == 109) {
    label = 0;
    $303 = HEAP32[$28>>2]|0;
    $304 = $303 & 512;
    $305 = ($304|0)==(0);
    if ($305) {
     $$13 = $$11;$$13950 = $$11948;$$171010 = $$151008;$$171067 = $$151065;
    } else {
     $306 = ($$11>>>0)<(16);
     if ($306) {
      $$121876 = $$11;$$129491875 = $$11948;$$1610091874 = $$151008;$$1610661873 = $$151065;
      while(1) {
       $307 = ($$1610091874|0)==(0);
       if ($307) {
        $$4925 = $$0921;$$54 = $$121876;$$54991 = $$129491875;$$58 = 0;$$581108 = $$1610661873;$$8 = $$0;$814 = $$0992;
        break L17;
       }
       $308 = (($$1610091874) + -1)|0;
       $309 = ((($$1610661873)) + 1|0);
       $310 = HEAP8[$$1610661873>>0]|0;
       $311 = $310&255;
       $312 = $311 << $$121876;
       $313 = (($312) + ($$129491875))|0;
       $314 = (($$121876) + 8)|0;
       $315 = ($314>>>0)<(16);
       if ($315) {
        $$121876 = $314;$$129491875 = $313;$$1610091874 = $308;$$1610661873 = $309;
       } else {
        $$12$lcssa = $314;$$12949$lcssa = $313;$$161009$lcssa = $308;$$161066$lcssa = $309;
        break;
       }
      }
     } else {
      $$12$lcssa = $$11;$$12949$lcssa = $$11948;$$161009$lcssa = $$151008;$$161066$lcssa = $$151065;
     }
     $316 = HEAP32[$26>>2]|0;
     $317 = $316 & 65535;
     $318 = ($$12949$lcssa|0)==($317|0);
     if ($318) {
      $$13 = 0;$$13950 = 0;$$171010 = $$161009$lcssa;$$171067 = $$161066$lcssa;
     } else {
      HEAP32[$30>>2] = 16342;
      HEAP32[$5>>2] = 29;
      $$0$be = $$0;$$01048$be = $338;$$01050$be = $$161066$lcssa;$$0921$be = $$0921;$$0926$be = $$12$lcssa;$$0937$be = $$12949$lcssa;$$0992$be = $$0992;$$0993$be = $$161009$lcssa;
      break;
     }
    }
    $319 = HEAP32[$29>>2]|0;
    $320 = ($319|0)==(0|0);
    if (!($320)) {
     $321 = $303 >>> 9;
     $322 = $321 & 1;
     $323 = ((($319)) + 44|0);
     HEAP32[$323>>2] = $322;
     $324 = ((($319)) + 48|0);
     HEAP32[$324>>2] = 1;
    }
    $325 = (_crc32(0,0,0)|0);
    HEAP32[$26>>2] = $325;
    HEAP32[$33>>2] = $325;
    HEAP32[$5>>2] = 11;
    $$0$be = $$0;$$01048$be = $338;$$01050$be = $$171067;$$0921$be = $$0921;$$0926$be = $$13;$$0937$be = $$13950;$$0992$be = $$0992;$$0993$be = $$171010;
   }
   else if ((label|0) == 243) {
    label = 0;
    $730 = ($$0992|0)==(0);
    if ($730) {
     $$54$ph = $$47;$$54991$ph = $$47984;$$58$ph = $$511044;$$581108$ph = $$511101;$$8$ph = $$7;$$ph = 0;
     label = 281;
     break L17;
    }
    $731 = (($$0921) - ($$0992))|0;
    $732 = HEAP32[$47>>2]|0;
    $733 = ($732>>>0)>($731>>>0);
    if ($733) {
     $734 = (($732) - ($731))|0;
     $735 = HEAP32[$48>>2]|0;
     $736 = ($734>>>0)>($735>>>0);
     if ($736) {
      $737 = HEAP32[$49>>2]|0;
      $738 = ($737|0)==(0);
      if (!($738)) {
       HEAP32[$30>>2] = 16794;
       HEAP32[$5>>2] = 29;
       $$0$be = $$7;$$01048$be = $338;$$01050$be = $$511101;$$0921$be = $$0921;$$0926$be = $$47;$$0937$be = $$47984;$$0992$be = $$0992;$$0993$be = $$511044;
       break;
      }
     }
     $739 = HEAP32[$50>>2]|0;
     $740 = ($734>>>0)>($739>>>0);
     if ($740) {
      $741 = (($734) - ($739))|0;
      $742 = HEAP32[$51>>2]|0;
      $743 = (($742) - ($741))|0;
      $$7918 = $741;$$sink1116 = $743;
     } else {
      $744 = (($739) - ($734))|0;
      $$7918 = $734;$$sink1116 = $744;
     }
     $$sink1115 = HEAP32[$$sink1115$in>>2]|0;
     $745 = (($$sink1115) + ($$sink1116)|0);
     $746 = HEAP32[$34>>2]|0;
     $747 = ($$7918>>>0)>($746>>>0);
     $$$7918 = $747 ? $746 : $$7918;
     $$1909 = $745;$$8919 = $$$7918;$753 = $746;
    } else {
     $748 = (0 - ($732))|0;
     $749 = (($338) + ($748)|0);
     $750 = HEAP32[$34>>2]|0;
     $$1909 = $749;$$8919 = $750;$753 = $750;
    }
    $751 = ($$8919>>>0)>($$0992>>>0);
    $$0992$$8919 = $751 ? $$0992 : $$8919;
    $752 = (($753) - ($$0992$$8919))|0;
    HEAP32[$34>>2] = $752;
    $$10 = $$0992$$8919;$$11049 = $338;$$2910 = $$1909;
    while(1) {
     $754 = ((($$2910)) + 1|0);
     $755 = HEAP8[$$2910>>0]|0;
     $756 = ((($$11049)) + 1|0);
     HEAP8[$$11049>>0] = $755;
     $757 = (($$10) + -1)|0;
     $758 = ($757|0)==(0);
     if ($758) {
      break;
     } else {
      $$10 = $757;$$11049 = $756;$$2910 = $754;
     }
    }
    $759 = (($$0992) - ($$0992$$8919))|0;
    $scevgep2353 = (($338) + ($$0992$$8919)|0);
    $760 = HEAP32[$34>>2]|0;
    $761 = ($760|0)==(0);
    if ($761) {
     HEAP32[$5>>2] = 20;
     $$0$be = $$7;$$01048$be = $scevgep2353;$$01050$be = $$511101;$$0921$be = $$0921;$$0926$be = $$47;$$0937$be = $$47984;$$0992$be = $759;$$0993$be = $$511044;
    } else {
     $$0$be = $$7;$$01048$be = $scevgep2353;$$01050$be = $$511101;$$0921$be = $$0921;$$0926$be = $$47;$$0937$be = $$47984;$$0992$be = $759;$$0993$be = $$511044;
    }
   }
  } while(0);
  $$pre = HEAP32[$5>>2]|0;
  $$0 = $$0$be;$$01050 = $$01050$be;$$0921 = $$0921$be;$$0926 = $$0926$be;$$0937 = $$0937$be;$$0992 = $$0992$be;$$0993 = $$0993$be;$338 = $$01048$be;$65 = $$pre;
 }
 if ((label|0) == 122) {
  HEAP32[$7>>2] = $338;
  HEAP32[$17>>2] = $$0992;
  HEAP32[$0>>2] = $$191069;
  HEAP32[$19>>2] = $$191012;
  HEAP32[$21>>2] = $$15952;
  HEAP32[$23>>2] = $$15;
  $$01109 = 2;
  STACKTOP = sp;return ($$01109|0);
 }
 else if ((label|0) == 132) {
  $356 = $$18955$lcssa >>> 3;
  $357 = (($$18$lcssa) + -3)|0;
  $$4925 = $$0921;$$54 = $357;$$54991 = $356;$$58 = $$221015$lcssa;$$581108 = $$221072$lcssa;$$8 = $$0;$814 = $$0992;
 }
 else if ((label|0) == 135) {
  // unreachable;
 }
 else if ((label|0) == 280) {
  HEAP32[$5>>2] = 28;
  $$4925 = $$2923;$$54 = $$52;$$54991 = $$52989;$$58 = $$56;$$581108 = $$561106;$$8 = 1;$814 = $$0992;
 }
 else if ((label|0) == 281) {
  $$4925 = $$0921;$$54 = $$54$ph;$$54991 = $$54991$ph;$$58 = $$58$ph;$$581108 = $$581108$ph;$$8 = $$8$ph;$814 = $$ph;
 }
 else if ((label|0) == 303) {
  $$01109 = -4;
  STACKTOP = sp;return ($$01109|0);
 }
 else if ((label|0) == 304) {
  STACKTOP = sp;return ($$01109|0);
 }
 HEAP32[$7>>2] = $338;
 HEAP32[$17>>2] = $814;
 HEAP32[$0>>2] = $$581108;
 HEAP32[$19>>2] = $$58;
 HEAP32[$21>>2] = $$54991;
 HEAP32[$23>>2] = $$54;
 $815 = HEAP32[$51>>2]|0;
 $816 = ($815|0)==(0);
 if ($816) {
  $817 = ($$4925|0)==($814|0);
  if (!($817)) {
   $818 = HEAP32[$5>>2]|0;
   $819 = ($818>>>0)<(29);
   if ($819) {
    $820 = ($818>>>0)<(26);
    $821 = ($1|0)!=(4);
    $or$cond9 = $821 | $820;
    if ($or$cond9) {
     label = 286;
    }
   }
  }
 } else {
  label = 286;
 }
 do {
  if ((label|0) == 286) {
   $822 = (($$4925) - ($814))|0;
   $823 = HEAP32[$4>>2]|0;
   $824 = ((($823)) + 52|0);
   $825 = HEAP32[$824>>2]|0;
   $826 = ($825|0)==(0|0);
   if ($826) {
    $827 = ((($0)) + 32|0);
    $828 = HEAP32[$827>>2]|0;
    $829 = ((($0)) + 40|0);
    $830 = HEAP32[$829>>2]|0;
    $831 = ((($823)) + 36|0);
    $832 = HEAP32[$831>>2]|0;
    $833 = 1 << $832;
    $834 = (FUNCTION_TABLE_iiii[$828 & 15]($830,$833,1)|0);
    HEAP32[$824>>2] = $834;
    $835 = ($834|0)==(0|0);
    if ($835) {
     HEAP32[$5>>2] = 30;
     $$01109 = -4;
     STACKTOP = sp;return ($$01109|0);
    } else {
     $848 = $834;
    }
   } else {
    $848 = $825;
   }
   $836 = ((($823)) + 40|0);
   $837 = HEAP32[$836>>2]|0;
   $838 = ($837|0)==(0);
   if ($838) {
    $839 = ((($823)) + 36|0);
    $840 = HEAP32[$839>>2]|0;
    $841 = 1 << $840;
    HEAP32[$836>>2] = $841;
    $842 = ((($823)) + 48|0);
    HEAP32[$842>>2] = 0;
    $843 = ((($823)) + 44|0);
    HEAP32[$843>>2] = 0;
    $844 = $841;
   } else {
    $844 = $837;
   }
   $845 = ($844>>>0)>($822>>>0);
   if (!($845)) {
    $846 = (0 - ($844))|0;
    $847 = (($338) + ($846)|0);
    _memcpy(($848|0),($847|0),($844|0))|0;
    $849 = ((($823)) + 48|0);
    HEAP32[$849>>2] = 0;
    $850 = HEAP32[$836>>2]|0;
    $851 = ((($823)) + 44|0);
    HEAP32[$851>>2] = $850;
    break;
   }
   $852 = ((($823)) + 48|0);
   $853 = HEAP32[$852>>2]|0;
   $854 = (($844) - ($853))|0;
   $855 = ($854>>>0)>($822>>>0);
   $$$i = $855 ? $822 : $854;
   $856 = (($848) + ($853)|0);
   $857 = (0 - ($822))|0;
   $858 = (($338) + ($857)|0);
   _memcpy(($856|0),($858|0),($$$i|0))|0;
   $859 = (($822) - ($$$i))|0;
   $860 = ($859|0)==(0);
   if (!($860)) {
    $861 = HEAP32[$824>>2]|0;
    $862 = (0 - ($859))|0;
    $863 = (($338) + ($862)|0);
    _memcpy(($861|0),($863|0),($859|0))|0;
    HEAP32[$852>>2] = $859;
    $864 = HEAP32[$836>>2]|0;
    $865 = ((($823)) + 44|0);
    HEAP32[$865>>2] = $864;
    break;
   }
   $866 = HEAP32[$852>>2]|0;
   $867 = (($866) + ($$$i))|0;
   $868 = HEAP32[$836>>2]|0;
   $869 = ($867|0)==($868|0);
   $$54$i = $869 ? 0 : $867;
   HEAP32[$852>>2] = $$54$i;
   $870 = ((($823)) + 44|0);
   $871 = HEAP32[$870>>2]|0;
   $872 = ($871>>>0)<($868>>>0);
   if ($872) {
    $873 = (($871) + ($$$i))|0;
    HEAP32[$870>>2] = $873;
   }
  }
 } while(0);
 $874 = HEAP32[$19>>2]|0;
 $875 = (($20) - ($874))|0;
 $876 = HEAP32[$17>>2]|0;
 $877 = (($$4925) - ($876))|0;
 $878 = ((($0)) + 8|0);
 $879 = HEAP32[$878>>2]|0;
 $880 = (($879) + ($875))|0;
 HEAP32[$878>>2] = $880;
 $881 = HEAP32[$52>>2]|0;
 $882 = (($881) + ($877))|0;
 HEAP32[$52>>2] = $882;
 $883 = HEAP32[$53>>2]|0;
 $884 = (($883) + ($877))|0;
 HEAP32[$53>>2] = $884;
 $885 = HEAP32[$25>>2]|0;
 $886 = ($885|0)!=(0);
 $887 = ($877|0)!=(0);
 $or$cond11 = $887 & $886;
 if ($or$cond11) {
  $888 = HEAP32[$28>>2]|0;
  $889 = ($888|0)==(0);
  $890 = HEAP32[$26>>2]|0;
  $891 = HEAP32[$7>>2]|0;
  $892 = (0 - ($877))|0;
  $893 = (($891) + ($892)|0);
  if ($889) {
   $895 = (_adler32($890,$893,$877)|0);
   $896 = $895;
  } else {
   $894 = (_crc32($890,$893,$877)|0);
   $896 = $894;
  }
  HEAP32[$26>>2] = $896;
  HEAP32[$33>>2] = $896;
 }
 $897 = HEAP32[$23>>2]|0;
 $898 = HEAP32[$38>>2]|0;
 $899 = ($898|0)!=(0);
 $900 = $899 ? 64 : 0;
 $901 = (($900) + ($897))|0;
 $902 = HEAP32[$5>>2]|0;
 $903 = ($902|0)==(11);
 $904 = $903 ? 128 : 0;
 $905 = (($901) + ($904))|0;
 $906 = ($902|0)==(19);
 $907 = ($902|0)==(14);
 $908 = $906 | $907;
 $909 = $908 ? 256 : 0;
 $910 = (($905) + ($909))|0;
 $911 = ((($0)) + 44|0);
 HEAP32[$911>>2] = $910;
 $912 = $877 | $875;
 $913 = ($912|0)==(0);
 $914 = ($1|0)==(4);
 $or$cond15 = $914 | $913;
 $915 = ($$8|0)==(0);
 $or$cond17 = $915 & $or$cond15;
 $$$8 = $or$cond17 ? -5 : $$8;
 $$01109 = $$$8;
 STACKTOP = sp;return ($$01109|0);
}
function _inflateEnd($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0, $$pre13 = 0, $$pre14 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -2;
  return ($$0|0);
 }
 $8 = ((($3)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 $$pre14 = ((($0)) + 40|0);
 if ($10) {
  $13 = $6;$14 = $3;
 } else {
  $11 = HEAP32[$$pre14>>2]|0;
  FUNCTION_TABLE_vii[$6 & 15]($11,$9);
  $$pre = HEAP32[$5>>2]|0;
  $$pre13 = HEAP32[$2>>2]|0;
  $13 = $$pre;$14 = $$pre13;
 }
 $12 = HEAP32[$$pre14>>2]|0;
 FUNCTION_TABLE_vii[$13 & 15]($12,$14);
 HEAP32[$2>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _inflate_table($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0217247252$ph = 0, $$0218246253$ph = 0, $$0219$ph = 0, $$0219$ph257 = 0, $$0220 = 0, $$0221$ph = 0, $$0222 = 0, $$0223 = 0, $$0224 = 0, $$0224$ph = 0, $$0225$ph256 = 0, $$0228$ph = 0, $$0230$ph = 0, $$0234$ = 0, $$0234$314 = 0, $$0234$317 = 0, $$0234291$lcssa$ph = 0, $$0234291$lcssa315 = 0, $$0235$$0234$ = 0;
 var $$0235$$0234$$$0228 = 0, $$0235$lcssa = 0, $$0235284 = 0, $$0236292 = 0, $$0248251$ph = 0, $$1227274 = 0, $$1231$lcssa = 0, $$1231273 = 0, $$1237277 = 0, $$2 = 0, $$2$ph = 0, $$3 = 0, $$3$ph = 0, $$4 = 0, $$ph = 0, $$ph254 = 0, $$ph254$in = 0, $$ph255 = 0, $$ph312 = 0, $$ph313 = 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$sink$sink = 0, $$sroa$0$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$$sroa_idx31 = 0, $$sroa$11$0$$sroa_idx = 0, $$sroa$11$0$$sroa_idx33 = 0, $$sroa$11$0$$sroa_idx35 = 0, $$sroa$11$0$$sroa_idx37 = 0, $$sroa$14$0$$sroa_idx39 = 0, $$sroa$14$0$$sroa_idx40 = 0, $$sroa$14$0$$sroa_idx42 = 0, $$sroa$14$0$$sroa_idx44 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond309 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond243 = 0, $or$cond5 = 0;
 var $or$cond9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 32|0;
 $7 = sp;
 dest=$6; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $8 = ($2|0)==(0);
 if ($8) {
  $9 = HEAP32[$4>>2]|0;
  $22 = $9;
  label = 5;
 } else {
  $$0236292 = 0;
  while(1) {
   $10 = (($1) + ($$0236292<<1)|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = (($6) + ($12<<1)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = (($14) + 1)<<16>>16;
   HEAP16[$13>>1] = $15;
   $16 = (($$0236292) + 1)|0;
   $exitcond309 = ($16|0)==($2|0);
   if ($exitcond309) {
    break;
   } else {
    $$0236292 = $16;
   }
  }
  $$phi$trans$insert = ((($6)) + 30|0);
  $$pre = HEAP16[$$phi$trans$insert>>1]|0;
  $17 = HEAP32[$4>>2]|0;
  $18 = ($$pre<<16>>16)==(0);
  if ($18) {
   $22 = $17;
   label = 5;
  } else {
   $$0234291$lcssa$ph = 15;$$ph312 = $17;$$ph313 = $$pre;
   label = 7;
  }
 }
 do {
  if ((label|0) == 5) {
   $19 = ((($6)) + 28|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = ($20<<16>>16)==(0);
   if ($21) {
    $263 = ((($6)) + 26|0);
    $264 = HEAP16[$263>>1]|0;
    $265 = ($264<<16>>16)==(0);
    if ($265) {
     $266 = ((($6)) + 24|0);
     $267 = HEAP16[$266>>1]|0;
     $268 = ($267<<16>>16)==(0);
     if ($268) {
      $269 = ((($6)) + 22|0);
      $270 = HEAP16[$269>>1]|0;
      $271 = ($270<<16>>16)==(0);
      if ($271) {
       $272 = ((($6)) + 20|0);
       $273 = HEAP16[$272>>1]|0;
       $274 = ($273<<16>>16)==(0);
       if ($274) {
        $275 = ((($6)) + 18|0);
        $276 = HEAP16[$275>>1]|0;
        $277 = ($276<<16>>16)==(0);
        if ($277) {
         $278 = ((($6)) + 16|0);
         $279 = HEAP16[$278>>1]|0;
         $280 = ($279<<16>>16)==(0);
         if ($280) {
          $281 = ((($6)) + 14|0);
          $282 = HEAP16[$281>>1]|0;
          $283 = ($282<<16>>16)==(0);
          if ($283) {
           $284 = ((($6)) + 12|0);
           $285 = HEAP16[$284>>1]|0;
           $286 = ($285<<16>>16)==(0);
           if ($286) {
            $287 = ((($6)) + 10|0);
            $288 = HEAP16[$287>>1]|0;
            $289 = ($288<<16>>16)==(0);
            if ($289) {
             $290 = ((($6)) + 8|0);
             $291 = HEAP16[$290>>1]|0;
             $292 = ($291<<16>>16)==(0);
             if ($292) {
              $293 = ((($6)) + 6|0);
              $294 = HEAP16[$293>>1]|0;
              $295 = ($294<<16>>16)==(0);
              if ($295) {
               $296 = ((($6)) + 4|0);
               $297 = HEAP16[$296>>1]|0;
               $298 = ($297<<16>>16)==(0);
               if ($298) {
                $299 = ((($6)) + 2|0);
                $300 = HEAP16[$299>>1]|0;
                $301 = ($300<<16>>16)==(0);
                if (!($301)) {
                 $23 = ($22|0)!=(0);
                 $$0234$ = $23&1;
                 $$0234$317 = $$0234$;$$0234291$lcssa315 = 1;$$0235$lcssa = 1;$259 = 0;
                 break;
                }
                $302 = HEAP32[$3>>2]|0;
                $303 = ((($302)) + 4|0);
                HEAP32[$3>>2] = $303;
                HEAP8[$302>>0] = 64;
                $$sroa$11$0$$sroa_idx35 = ((($302)) + 1|0);
                HEAP8[$$sroa$11$0$$sroa_idx35>>0] = 1;
                $$sroa$14$0$$sroa_idx42 = ((($302)) + 2|0);
                HEAP16[$$sroa$14$0$$sroa_idx42>>1] = 0;
                $304 = HEAP32[$3>>2]|0;
                $305 = ((($304)) + 4|0);
                HEAP32[$3>>2] = $305;
                HEAP8[$304>>0] = 64;
                $$sroa$11$0$$sroa_idx33 = ((($304)) + 1|0);
                HEAP8[$$sroa$11$0$$sroa_idx33>>0] = 1;
                $$sroa$14$0$$sroa_idx40 = ((($304)) + 2|0);
                HEAP16[$$sroa$14$0$$sroa_idx40>>1] = 0;
                HEAP32[$4>>2] = 1;
                $$0220 = 0;
                STACKTOP = sp;return ($$0220|0);
               } else {
                $$0234291$lcssa$ph = 2;$$ph312 = $22;$$ph313 = 0;
                label = 7;
               }
              } else {
               $$0234291$lcssa$ph = 3;$$ph312 = $22;$$ph313 = 0;
               label = 7;
              }
             } else {
              $$0234291$lcssa$ph = 4;$$ph312 = $22;$$ph313 = 0;
              label = 7;
             }
            } else {
             $$0234291$lcssa$ph = 5;$$ph312 = $22;$$ph313 = 0;
             label = 7;
            }
           } else {
            $$0234291$lcssa$ph = 6;$$ph312 = $22;$$ph313 = 0;
            label = 7;
           }
          } else {
           $$0234291$lcssa$ph = 7;$$ph312 = $22;$$ph313 = 0;
           label = 7;
          }
         } else {
          $$0234291$lcssa$ph = 8;$$ph312 = $22;$$ph313 = 0;
          label = 7;
         }
        } else {
         $$0234291$lcssa$ph = 9;$$ph312 = $22;$$ph313 = 0;
         label = 7;
        }
       } else {
        $$0234291$lcssa$ph = 10;$$ph312 = $22;$$ph313 = 0;
        label = 7;
       }
      } else {
       $$0234291$lcssa$ph = 11;$$ph312 = $22;$$ph313 = 0;
       label = 7;
      }
     } else {
      $$0234291$lcssa$ph = 12;$$ph312 = $22;$$ph313 = 0;
      label = 7;
     }
    } else {
     $$0234291$lcssa$ph = 13;$$ph312 = $22;$$ph313 = 0;
     label = 7;
    }
   } else {
    $$0234291$lcssa$ph = 14;$$ph312 = $22;$$ph313 = 0;
    label = 7;
   }
  }
 } while(0);
 L25: do {
  if ((label|0) == 7) {
   $24 = ($$ph312>>>0)>($$0234291$lcssa$ph>>>0);
   $$0234$314 = $24 ? $$0234291$lcssa$ph : $$ph312;
   $$0235284 = 1;
   while(1) {
    $25 = (($6) + ($$0235284<<1)|0);
    $26 = HEAP16[$25>>1]|0;
    $27 = ($26<<16>>16)==(0);
    if (!($27)) {
     $$0234$317 = $$0234$314;$$0234291$lcssa315 = $$0234291$lcssa$ph;$$0235$lcssa = $$0235284;$259 = $$ph313;
     break L25;
    }
    $28 = (($$0235284) + 1)|0;
    $29 = ($28>>>0)<($$0234291$lcssa$ph>>>0);
    if ($29) {
     $$0235284 = $28;
    } else {
     $$0234$317 = $$0234$314;$$0234291$lcssa315 = $$0234291$lcssa$ph;$$0235$lcssa = $28;$259 = $$ph313;
     break;
    }
   }
  }
 } while(0);
 $30 = ($$0234$317>>>0)<($$0235$lcssa>>>0);
 $$0235$$0234$ = $30 ? $$0235$lcssa : $$0234$317;
 $31 = ((($6)) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (2 - ($33))|0;
 $35 = ($34|0)<(0);
 if ($35) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $36 = $34 << 1;
 $37 = ((($6)) + 4|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = (($36) - ($39))|0;
 $41 = ($40|0)<(0);
 if ($41) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $197 = $40 << 1;
 $198 = ((($6)) + 6|0);
 $199 = HEAP16[$198>>1]|0;
 $51 = $199&65535;
 $200 = (($197) - ($51))|0;
 $201 = ($200|0)<(0);
 if ($201) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $202 = $200 << 1;
 $203 = ((($6)) + 8|0);
 $204 = HEAP16[$203>>1]|0;
 $56 = $204&65535;
 $205 = (($202) - ($56))|0;
 $206 = ($205|0)<(0);
 if ($206) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $207 = $205 << 1;
 $208 = ((($6)) + 10|0);
 $209 = HEAP16[$208>>1]|0;
 $61 = $209&65535;
 $210 = (($207) - ($61))|0;
 $211 = ($210|0)<(0);
 if ($211) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $212 = $210 << 1;
 $213 = ((($6)) + 12|0);
 $214 = HEAP16[$213>>1]|0;
 $66 = $214&65535;
 $215 = (($212) - ($66))|0;
 $216 = ($215|0)<(0);
 if ($216) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $217 = $215 << 1;
 $218 = ((($6)) + 14|0);
 $219 = HEAP16[$218>>1]|0;
 $71 = $219&65535;
 $220 = (($217) - ($71))|0;
 $221 = ($220|0)<(0);
 if ($221) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $222 = $220 << 1;
 $223 = ((($6)) + 16|0);
 $224 = HEAP16[$223>>1]|0;
 $76 = $224&65535;
 $225 = (($222) - ($76))|0;
 $226 = ($225|0)<(0);
 if ($226) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $227 = $225 << 1;
 $228 = ((($6)) + 18|0);
 $229 = HEAP16[$228>>1]|0;
 $81 = $229&65535;
 $230 = (($227) - ($81))|0;
 $231 = ($230|0)<(0);
 if ($231) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $232 = $230 << 1;
 $233 = ((($6)) + 20|0);
 $234 = HEAP16[$233>>1]|0;
 $86 = $234&65535;
 $235 = (($232) - ($86))|0;
 $236 = ($235|0)<(0);
 if ($236) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $237 = $235 << 1;
 $238 = ((($6)) + 22|0);
 $239 = HEAP16[$238>>1]|0;
 $91 = $239&65535;
 $240 = (($237) - ($91))|0;
 $241 = ($240|0)<(0);
 if ($241) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $242 = $240 << 1;
 $243 = ((($6)) + 24|0);
 $244 = HEAP16[$243>>1]|0;
 $96 = $244&65535;
 $245 = (($242) - ($96))|0;
 $246 = ($245|0)<(0);
 if ($246) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $247 = $245 << 1;
 $248 = ((($6)) + 26|0);
 $249 = HEAP16[$248>>1]|0;
 $101 = $249&65535;
 $250 = (($247) - ($101))|0;
 $251 = ($250|0)<(0);
 if ($251) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $252 = $250 << 1;
 $253 = ((($6)) + 28|0);
 $254 = HEAP16[$253>>1]|0;
 $105 = $254&65535;
 $255 = (($252) - ($105))|0;
 $256 = ($255|0)<(0);
 if ($256) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $257 = $255 << 1;
 $258 = $259&65535;
 $260 = (($257) - ($258))|0;
 $261 = ($260|0)<(0);
 if ($261) {
  $$0220 = -1;
  STACKTOP = sp;return ($$0220|0);
 }
 $262 = ($260|0)==(0);
 if (!($262)) {
  $42 = ($0|0)==(0);
  $43 = ($$0234291$lcssa315|0)!=(1);
  $or$cond = $42 | $43;
  if ($or$cond) {
   $$0220 = -1;
   STACKTOP = sp;return ($$0220|0);
  }
 }
 $44 = ((($7)) + 2|0);
 HEAP16[$44>>1] = 0;
 $45 = ((($7)) + 4|0);
 HEAP16[$45>>1] = $32;
 $46 = (($33) + ($39))|0;
 $47 = $46&65535;
 $48 = ((($7)) + 6|0);
 HEAP16[$48>>1] = $47;
 $49 = $46 & 65535;
 $50 = (($49) + ($51))|0;
 $52 = $50&65535;
 $53 = ((($7)) + 8|0);
 HEAP16[$53>>1] = $52;
 $54 = $50 & 65535;
 $55 = (($54) + ($56))|0;
 $57 = $55&65535;
 $58 = ((($7)) + 10|0);
 HEAP16[$58>>1] = $57;
 $59 = $55 & 65535;
 $60 = (($59) + ($61))|0;
 $62 = $60&65535;
 $63 = ((($7)) + 12|0);
 HEAP16[$63>>1] = $62;
 $64 = $60 & 65535;
 $65 = (($64) + ($66))|0;
 $67 = $65&65535;
 $68 = ((($7)) + 14|0);
 HEAP16[$68>>1] = $67;
 $69 = $65 & 65535;
 $70 = (($69) + ($71))|0;
 $72 = $70&65535;
 $73 = ((($7)) + 16|0);
 HEAP16[$73>>1] = $72;
 $74 = $70 & 65535;
 $75 = (($74) + ($76))|0;
 $77 = $75&65535;
 $78 = ((($7)) + 18|0);
 HEAP16[$78>>1] = $77;
 $79 = $75 & 65535;
 $80 = (($79) + ($81))|0;
 $82 = $80&65535;
 $83 = ((($7)) + 20|0);
 HEAP16[$83>>1] = $82;
 $84 = $80 & 65535;
 $85 = (($84) + ($86))|0;
 $87 = $85&65535;
 $88 = ((($7)) + 22|0);
 HEAP16[$88>>1] = $87;
 $89 = $85 & 65535;
 $90 = (($89) + ($91))|0;
 $92 = $90&65535;
 $93 = ((($7)) + 24|0);
 HEAP16[$93>>1] = $92;
 $94 = $90 & 65535;
 $95 = (($94) + ($96))|0;
 $97 = $95&65535;
 $98 = ((($7)) + 26|0);
 HEAP16[$98>>1] = $97;
 $99 = $95 & 65535;
 $100 = (($99) + ($101))|0;
 $102 = $100&65535;
 $103 = ((($7)) + 28|0);
 HEAP16[$103>>1] = $102;
 $104 = (($100) + ($105))|0;
 $106 = $104&65535;
 $107 = ((($7)) + 30|0);
 HEAP16[$107>>1] = $106;
 if (!($8)) {
  $$1237277 = 0;
  while(1) {
   $108 = (($1) + ($$1237277<<1)|0);
   $109 = HEAP16[$108>>1]|0;
   $110 = ($109<<16>>16)==(0);
   if (!($110)) {
    $111 = $109&65535;
    $112 = $$1237277&65535;
    $113 = (($7) + ($111<<1)|0);
    $114 = HEAP16[$113>>1]|0;
    $115 = (($114) + 1)<<16>>16;
    HEAP16[$113>>1] = $115;
    $116 = $114&65535;
    $117 = (($5) + ($116<<1)|0);
    HEAP16[$117>>1] = $112;
   }
   $118 = (($$1237277) + 1)|0;
   $exitcond = ($118|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $$1237277 = $118;
   }
  }
 }
 switch ($0|0) {
 case 0:  {
  $$0217247252$ph = $5;$$0218246253$ph = $5;$$0248251$ph = 19;$$ph = 0;$$ph255 = 0;
  break;
 }
 case 1:  {
  $119 = ($$0235$$0234$>>>0)>(9);
  if ($119) {
   $$0220 = 1;
   STACKTOP = sp;return ($$0220|0);
  } else {
   $$0217247252$ph = (11926);$$0218246253$ph = (11800);$$0248251$ph = 256;$$ph = 0;$$ph255 = 1;
  }
  break;
 }
 default: {
  $120 = ($$0235$$0234$>>>0)>(9);
  $121 = ($0|0)==(2);
  $or$cond5 = $121 & $120;
  if ($or$cond5) {
   $$0220 = 1;
   STACKTOP = sp;return ($$0220|0);
  } else {
   $$0217247252$ph = 12376;$$0218246253$ph = 12250;$$0248251$ph = -1;$$ph = $121;$$ph255 = 0;
  }
 }
 }
 $$ph254$in = 1 << $$0235$$0234$;
 $$0219$ph = HEAP32[$3>>2]|0;
 $$ph254 = (($$ph254$in) + -1)|0;
 $122 = $$0235$$0234$&255;
 $$0219$ph257 = $$0219$ph;$$0221$ph = -1;$$0224$ph = 0;$$0225$ph256 = $$ph254$in;$$0228$ph = 0;$$0230$ph = $$0235$$0234$;$$2$ph = 0;$$3$ph = $$0235$lcssa;
 L93: while(1) {
  $123 = 1 << $$0230$ph;
  $$0224 = $$0224$ph;$$2 = $$2$ph;$$3 = $$3$ph;
  while(1) {
   $124 = (($$3) - ($$0228$ph))|0;
   $125 = $124&255;
   $126 = (($5) + ($$2<<1)|0);
   $127 = HEAP16[$126>>1]|0;
   $128 = $127&65535;
   $129 = ($$0248251$ph|0)>($128|0);
   do {
    if ($129) {
     $$sink$sink = $127;$$sroa$0$0 = 0;
    } else {
     $130 = ($$0248251$ph|0)<($128|0);
     if (!($130)) {
      $$sink$sink = 0;$$sroa$0$0 = 96;
      break;
     }
     $131 = (($$0218246253$ph) + ($128<<1)|0);
     $132 = (($$0217247252$ph) + ($128<<1)|0);
     $133 = HEAP16[$132>>1]|0;
     $134 = $133&255;
     $135 = HEAP16[$131>>1]|0;
     $$sink$sink = $135;$$sroa$0$0 = $134;
    }
   } while(0);
   $136 = 1 << $124;
   $137 = $$0224 >>> $$0228$ph;
   $$0222 = $123;
   while(1) {
    $138 = (($$0222) - ($136))|0;
    $139 = (($138) + ($137))|0;
    $$sroa$0$0$$sroa_idx = (($$0219$ph257) + ($139<<2)|0);
    HEAP8[$$sroa$0$0$$sroa_idx>>0] = $$sroa$0$0;
    $$sroa$11$0$$sroa_idx = (((($$0219$ph257) + ($139<<2)|0)) + 1|0);
    HEAP8[$$sroa$11$0$$sroa_idx>>0] = $125;
    $$sroa$14$0$$sroa_idx39 = (((($$0219$ph257) + ($139<<2)|0)) + 2|0);
    HEAP16[$$sroa$14$0$$sroa_idx39>>1] = $$sink$sink;
    $140 = ($138|0)==(0);
    if ($140) {
     break;
    } else {
     $$0222 = $138;
    }
   }
   $141 = (($$3) + -1)|0;
   $142 = 1 << $141;
   $$0223 = $142;
   while(1) {
    $143 = $$0223 & $$0224;
    $144 = ($143|0)==(0);
    $145 = $$0223 >>> 1;
    if ($144) {
     break;
    } else {
     $$0223 = $145;
    }
   }
   $146 = ($$0223|0)==(0);
   $147 = (($$0223) + -1)|0;
   $148 = $147 & $$0224;
   $149 = (($148) + ($$0223))|0;
   $$ = $146 ? 0 : $149;
   $150 = (($$2) + 1)|0;
   $151 = (($6) + ($$3<<1)|0);
   $152 = HEAP16[$151>>1]|0;
   $153 = (($152) + -1)<<16>>16;
   HEAP16[$151>>1] = $153;
   $154 = ($153<<16>>16)==(0);
   if ($154) {
    $155 = ($$3|0)==($$0234291$lcssa315|0);
    if ($155) {
     break L93;
    }
    $156 = (($5) + ($150<<1)|0);
    $157 = HEAP16[$156>>1]|0;
    $158 = $157&65535;
    $159 = (($1) + ($158<<1)|0);
    $160 = HEAP16[$159>>1]|0;
    $161 = $160&65535;
    $$4 = $161;
   } else {
    $$4 = $$3;
   }
   $162 = ($$4>>>0)>($$0235$$0234$>>>0);
   if (!($162)) {
    $$0224 = $$;$$2 = $150;$$3 = $$4;
    continue;
   }
   $163 = $$ & $$ph254;
   $164 = ($163|0)==($$0221$ph|0);
   if ($164) {
    $$0224 = $$;$$2 = $150;$$3 = $$4;
   } else {
    break;
   }
  }
  $165 = ($$0228$ph|0)==(0);
  $$0235$$0234$$$0228 = $165 ? $$0235$$0234$ : $$0228$ph;
  $166 = (($$0219$ph257) + ($123<<2)|0);
  $167 = (($$4) - ($$0235$$0234$$$0228))|0;
  $168 = ($$4>>>0)<($$0234291$lcssa315>>>0);
  L113: do {
   if ($168) {
    $169 = 1 << $167;
    $$1227274 = $169;$$1231273 = $167;$171 = $$4;
    while(1) {
     $170 = (($6) + ($171<<1)|0);
     $172 = HEAP16[$170>>1]|0;
     $173 = $172&65535;
     $174 = (($$1227274) - ($173))|0;
     $175 = ($174|0)<(1);
     if ($175) {
      $$1231$lcssa = $$1231273;
      break L113;
     }
     $176 = (($$1231273) + 1)|0;
     $177 = $174 << 1;
     $178 = (($176) + ($$0235$$0234$$$0228))|0;
     $179 = ($178>>>0)<($$0234291$lcssa315>>>0);
     if ($179) {
      $$1227274 = $177;$$1231273 = $176;$171 = $178;
     } else {
      $$1231$lcssa = $176;
      break;
     }
    }
   } else {
    $$1231$lcssa = $167;
   }
  } while(0);
  $180 = 1 << $$1231$lcssa;
  $181 = (($180) + ($$0225$ph256))|0;
  $182 = ($181>>>0)>(852);
  $or$cond9 = $$ph255 & $182;
  $183 = ($181>>>0)>(592);
  $or$cond11 = $$ph & $183;
  $or$cond243 = $or$cond9 | $or$cond11;
  if ($or$cond243) {
   $$0220 = 1;
   label = 43;
   break;
  }
  $184 = $$1231$lcssa&255;
  $185 = HEAP32[$3>>2]|0;
  $186 = (($185) + ($163<<2)|0);
  HEAP8[$186>>0] = $184;
  $187 = (((($185) + ($163<<2)|0)) + 1|0);
  HEAP8[$187>>0] = $122;
  $188 = $166;
  $189 = $185;
  $190 = (($188) - ($189))|0;
  $191 = $190 >>> 2;
  $192 = $191&65535;
  $193 = (((($185) + ($163<<2)|0)) + 2|0);
  HEAP16[$193>>1] = $192;
  $$0219$ph257 = $166;$$0221$ph = $163;$$0224$ph = $$;$$0225$ph256 = $181;$$0228$ph = $$0235$$0234$$$0228;$$0230$ph = $$1231$lcssa;$$2$ph = $150;$$3$ph = $$4;
 }
 if ((label|0) == 43) {
  STACKTOP = sp;return ($$0220|0);
 }
 $194 = ($$|0)==(0);
 if (!($194)) {
  $$sroa$14$0$$sroa_idx44 = (((($$0219$ph257) + ($$<<2)|0)) + 2|0);
  $$sroa$11$0$$sroa_idx37 = (((($$0219$ph257) + ($$<<2)|0)) + 1|0);
  $$sroa$0$0$$sroa_idx31 = (($$0219$ph257) + ($$<<2)|0);
  HEAP8[$$sroa$0$0$$sroa_idx31>>0] = 64;
  HEAP8[$$sroa$11$0$$sroa_idx37>>0] = $125;
  HEAP16[$$sroa$14$0$$sroa_idx44>>1] = 0;
 }
 $195 = HEAP32[$3>>2]|0;
 $196 = (($195) + ($$0225$ph256<<2)|0);
 HEAP32[$3>>2] = $196;
 HEAP32[$4>>2] = $$0235$$0234$;
 $$0220 = 0;
 STACKTOP = sp;return ($$0220|0);
}
function _zcalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = Math_imul($2, $1)|0;
 $4 = (_malloc($3)|0);
 return ($4|0);
}
function _zcfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 return;
}
function _adler32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$1184 = 0, $$0 = 0, $$0173 = 0, $$0174198 = 0, $$0178197 = 0, $$0190 = 0, $$1$lcssa = 0, $$1175$lcssa245248 = 0, $$1175220 = 0, $$1179$lcssa244249 = 0, $$1179219 = 0, $$1184$lcssa = 0, $$1184196 = 0, $$1199 = 0, $$2$lcssa246247 = 0, $$2176211 = 0, $$2180 = 0, $$2221 = 0, $$3 = 0;
 var $$3177203 = 0, $$3181210 = 0, $$3186$lcssa243250 = 0, $$3186218 = 0, $$4182202 = 0, $$4187 = 0, $$4212 = 0, $$5$lcssa = 0, $$5188209 = 0, $$5204 = 0, $$6 = 0, $$6189$lcssa = 0, $$6189201 = 0, $$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep241 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 >>> 16;
 $4 = $0 & 65535;
 $5 = ($2|0)==(1);
 if ($5) {
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $8 = (($4) + ($7))|0;
  $9 = ($8>>>0)>(65520);
  $10 = (($8) + -65521)|0;
  $$ = $9 ? $10 : $8;
  $11 = (($$) + ($3))|0;
  $12 = ($11>>>0)>(65520);
  $13 = (($11) + 15)|0;
  $$0173 = $12 ? $13 : $11;
  $14 = $$0173 << 16;
  $15 = $14 | $$;
  $$0190 = $15;
  return ($$0190|0);
 }
 $16 = ($1|0)==(0|0);
 if ($16) {
  $$0190 = 1;
  return ($$0190|0);
 }
 $17 = ($2>>>0)<(16);
 if ($17) {
  $19 = ($2|0)==(0);
  if ($19) {
   $$1$lcssa = $3;$$1184$lcssa = $4;
  } else {
   $$0174198 = $2;$$0178197 = $1;$$1184196 = $4;$$1199 = $3;
   while(1) {
    $20 = (($$0174198) + -1)|0;
    $21 = ((($$0178197)) + 1|0);
    $22 = HEAP8[$$0178197>>0]|0;
    $23 = $22&255;
    $24 = (($$1184196) + ($23))|0;
    $25 = (($24) + ($$1199))|0;
    $26 = ($20|0)==(0);
    if ($26) {
     $$1$lcssa = $25;$$1184$lcssa = $24;
     break;
    } else {
     $$0174198 = $20;$$0178197 = $21;$$1184196 = $24;$$1199 = $25;
    }
   }
  }
  $27 = ($$1184$lcssa>>>0)>(65520);
  $28 = (($$1184$lcssa) + -65521)|0;
  $$$1184 = $27 ? $28 : $$1184$lcssa;
  $29 = (($$1$lcssa>>>0) % 65521)&-1;
  $30 = $29 << 16;
  $31 = $30 | $$$1184;
  $$0190 = $31;
  return ($$0190|0);
 }
 $18 = ($2>>>0)>(5551);
 if ($18) {
  $$1175220 = $2;$$1179219 = $1;$$2221 = $3;$$3186218 = $4;
  while(1) {
   $32 = (($$1175220) + -5552)|0;
   $$0 = 347;$$2180 = $$1179219;$$3 = $$2221;$$4187 = $$3186218;
   while(1) {
    $33 = HEAP8[$$2180>>0]|0;
    $34 = $33&255;
    $35 = (($$4187) + ($34))|0;
    $36 = (($35) + ($$3))|0;
    $37 = ((($$2180)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = (($35) + ($39))|0;
    $41 = (($36) + ($40))|0;
    $42 = ((($$2180)) + 2|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = (($40) + ($44))|0;
    $46 = (($41) + ($45))|0;
    $47 = ((($$2180)) + 3|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = (($45) + ($49))|0;
    $51 = (($46) + ($50))|0;
    $52 = ((($$2180)) + 4|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = (($50) + ($54))|0;
    $56 = (($51) + ($55))|0;
    $57 = ((($$2180)) + 5|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = (($55) + ($59))|0;
    $61 = (($56) + ($60))|0;
    $62 = ((($$2180)) + 6|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = (($60) + ($64))|0;
    $66 = (($61) + ($65))|0;
    $67 = ((($$2180)) + 7|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = (($65) + ($69))|0;
    $71 = (($66) + ($70))|0;
    $72 = ((($$2180)) + 8|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = (($70) + ($74))|0;
    $76 = (($71) + ($75))|0;
    $77 = ((($$2180)) + 9|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = (($75) + ($79))|0;
    $81 = (($76) + ($80))|0;
    $82 = ((($$2180)) + 10|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = (($80) + ($84))|0;
    $86 = (($81) + ($85))|0;
    $87 = ((($$2180)) + 11|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = (($85) + ($89))|0;
    $91 = (($86) + ($90))|0;
    $92 = ((($$2180)) + 12|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = (($90) + ($94))|0;
    $96 = (($91) + ($95))|0;
    $97 = ((($$2180)) + 13|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = (($95) + ($99))|0;
    $101 = (($96) + ($100))|0;
    $102 = ((($$2180)) + 14|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = (($100) + ($104))|0;
    $106 = (($101) + ($105))|0;
    $107 = ((($$2180)) + 15|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = (($105) + ($109))|0;
    $111 = (($106) + ($110))|0;
    $112 = ((($$2180)) + 16|0);
    $113 = (($$0) + -1)|0;
    $114 = ($113|0)==(0);
    if ($114) {
     break;
    } else {
     $$0 = $113;$$2180 = $112;$$3 = $111;$$4187 = $110;
    }
   }
   $scevgep241 = ((($$1179219)) + 5552|0);
   $115 = (($110>>>0) % 65521)&-1;
   $116 = (($111>>>0) % 65521)&-1;
   $117 = ($32>>>0)>(5551);
   if ($117) {
    $$1175220 = $32;$$1179219 = $scevgep241;$$2221 = $116;$$3186218 = $115;
   } else {
    break;
   }
  }
  $118 = ($32|0)==(0);
  if ($118) {
   $$6 = $116;$$7 = $115;
  } else {
   $119 = ($32>>>0)>(15);
   if ($119) {
    $$1175$lcssa245248 = $32;$$1179$lcssa244249 = $scevgep241;$$2$lcssa246247 = $116;$$3186$lcssa243250 = $115;
    label = 14;
   } else {
    $$3177203 = $32;$$4182202 = $scevgep241;$$5204 = $116;$$6189201 = $115;
    label = 17;
   }
  }
 } else {
  $$1175$lcssa245248 = $2;$$1179$lcssa244249 = $1;$$2$lcssa246247 = $3;$$3186$lcssa243250 = $4;
  label = 14;
 }
 if ((label|0) == 14) {
  $120 = (($$1175$lcssa245248) + -16)|0;
  $121 = $120 & -16;
  $122 = (($121) + 16)|0;
  $$2176211 = $$1175$lcssa245248;$$3181210 = $$1179$lcssa244249;$$4212 = $$2$lcssa246247;$$5188209 = $$3186$lcssa243250;
  while(1) {
   $125 = (($$2176211) + -16)|0;
   $126 = HEAP8[$$3181210>>0]|0;
   $127 = $126&255;
   $128 = (($$5188209) + ($127))|0;
   $129 = (($128) + ($$4212))|0;
   $130 = ((($$3181210)) + 1|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = (($128) + ($132))|0;
   $134 = (($129) + ($133))|0;
   $135 = ((($$3181210)) + 2|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $138 = (($133) + ($137))|0;
   $139 = (($134) + ($138))|0;
   $140 = ((($$3181210)) + 3|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($138) + ($142))|0;
   $144 = (($139) + ($143))|0;
   $145 = ((($$3181210)) + 4|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (($143) + ($147))|0;
   $149 = (($144) + ($148))|0;
   $150 = ((($$3181210)) + 5|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = (($148) + ($152))|0;
   $154 = (($149) + ($153))|0;
   $155 = ((($$3181210)) + 6|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = (($153) + ($157))|0;
   $159 = (($154) + ($158))|0;
   $160 = ((($$3181210)) + 7|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = (($158) + ($162))|0;
   $164 = (($159) + ($163))|0;
   $165 = ((($$3181210)) + 8|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = (($163) + ($167))|0;
   $169 = (($164) + ($168))|0;
   $170 = ((($$3181210)) + 9|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = (($168) + ($172))|0;
   $174 = (($169) + ($173))|0;
   $175 = ((($$3181210)) + 10|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = (($173) + ($177))|0;
   $179 = (($174) + ($178))|0;
   $180 = ((($$3181210)) + 11|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181&255;
   $183 = (($178) + ($182))|0;
   $184 = (($179) + ($183))|0;
   $185 = ((($$3181210)) + 12|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = (($183) + ($187))|0;
   $189 = (($184) + ($188))|0;
   $190 = ((($$3181210)) + 13|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = (($188) + ($192))|0;
   $194 = (($189) + ($193))|0;
   $195 = ((($$3181210)) + 14|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $198 = (($193) + ($197))|0;
   $199 = (($194) + ($198))|0;
   $200 = ((($$3181210)) + 15|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = (($198) + ($202))|0;
   $204 = (($199) + ($203))|0;
   $205 = ((($$3181210)) + 16|0);
   $206 = ($125>>>0)>(15);
   if ($206) {
    $$2176211 = $125;$$3181210 = $205;$$4212 = $204;$$5188209 = $203;
   } else {
    break;
   }
  }
  $123 = (($120) - ($121))|0;
  $scevgep = (($$1179$lcssa244249) + ($122)|0);
  $124 = ($123|0)==(0);
  if ($124) {
   $$5$lcssa = $204;$$6189$lcssa = $203;
   label = 18;
  } else {
   $$3177203 = $123;$$4182202 = $scevgep;$$5204 = $204;$$6189201 = $203;
   label = 17;
  }
 }
 if ((label|0) == 17) {
  while(1) {
   label = 0;
   $207 = (($$3177203) + -1)|0;
   $208 = ((($$4182202)) + 1|0);
   $209 = HEAP8[$$4182202>>0]|0;
   $210 = $209&255;
   $211 = (($$6189201) + ($210))|0;
   $212 = (($211) + ($$5204))|0;
   $213 = ($207|0)==(0);
   if ($213) {
    $$5$lcssa = $212;$$6189$lcssa = $211;
    label = 18;
    break;
   } else {
    $$3177203 = $207;$$4182202 = $208;$$5204 = $212;$$6189201 = $211;
    label = 17;
   }
  }
 }
 if ((label|0) == 18) {
  $214 = (($$6189$lcssa>>>0) % 65521)&-1;
  $215 = (($$5$lcssa>>>0) % 65521)&-1;
  $$6 = $215;$$7 = $214;
 }
 $216 = $$6 << 16;
 $217 = $216 | $$7;
 $$0190 = $217;
 return ($$0190|0);
}
function _crc32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa$i = 0, $$076$masked$i = 0, $$07699$i = 0, $$07898$i = 0, $$08297$i = 0, $$092$i = 0, $$1 = 0, $$1$lcssa$i = 0, $$177$lcssa$i = 0, $$17791$i = 0, $$179$lcssa$i = 0, $$17990$i = 0, $$183$i = 0, $$187$i = 0, $$2$lcssa$i = 0, $$280$lcssa$i = 0, $$28085$i = 0, $$286$i = 0, $$3$i = 0, $$3$masked$i = 0;
 var $$381$i = 0, $$4$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i = 0, $scevgep115$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$1 = 0;
  return ($$1|0);
 }
 $4 = $0 ^ -1;
 $5 = ($2|0)==(0);
 L4: do {
  if ($5) {
   $$4$i = $4;
  } else {
   $$07699$i = $4;$$07898$i = $2;$$08297$i = $1;
   while(1) {
    $6 = $$08297$i;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     break;
    }
    $9 = ((($$08297$i)) + 1|0);
    $10 = HEAP8[$$08297$i>>0]|0;
    $11 = $10&255;
    $$076$masked$i = $$07699$i & 255;
    $12 = $$076$masked$i ^ $11;
    $13 = (112 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $$07699$i >>> 8;
    $16 = $14 ^ $15;
    $17 = (($$07898$i) + -1)|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$4$i = $16;
     break L4;
    } else {
     $$07699$i = $16;$$07898$i = $17;$$08297$i = $9;
    }
   }
   $19 = ($$07898$i>>>0)>(31);
   if ($19) {
    $20 = (($$07898$i) + -32)|0;
    $21 = $20 & -32;
    $22 = (($21) + 32)|0;
    $scevgep115$i = (($$08297$i) + ($22)|0);
    $$092$i = $$08297$i;$$17791$i = $$07699$i;$$17990$i = $$07898$i;
    while(1) {
     $27 = ((($$092$i)) + 4|0);
     $28 = HEAP32[$$092$i>>2]|0;
     $29 = $28 ^ $$17791$i;
     $30 = $29 & 255;
     $31 = (3184 + ($30<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $29 >>> 8;
     $34 = $33 & 255;
     $35 = (2160 + ($34<<2)|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $36 ^ $32;
     $38 = $29 >>> 16;
     $39 = $38 & 255;
     $40 = (1136 + ($39<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $37 ^ $41;
     $43 = $29 >>> 24;
     $44 = (112 + ($43<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = $42 ^ $45;
     $47 = ((($$092$i)) + 8|0);
     $48 = HEAP32[$27>>2]|0;
     $49 = $46 ^ $48;
     $50 = $49 & 255;
     $51 = (3184 + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $49 >>> 8;
     $54 = $53 & 255;
     $55 = (2160 + ($54<<2)|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 ^ $52;
     $58 = $49 >>> 16;
     $59 = $58 & 255;
     $60 = (1136 + ($59<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $57 ^ $61;
     $63 = $49 >>> 24;
     $64 = (112 + ($63<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $62 ^ $65;
     $67 = ((($$092$i)) + 12|0);
     $68 = HEAP32[$47>>2]|0;
     $69 = $66 ^ $68;
     $70 = $69 & 255;
     $71 = (3184 + ($70<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $69 >>> 8;
     $74 = $73 & 255;
     $75 = (2160 + ($74<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $76 ^ $72;
     $78 = $69 >>> 16;
     $79 = $78 & 255;
     $80 = (1136 + ($79<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $77 ^ $81;
     $83 = $69 >>> 24;
     $84 = (112 + ($83<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $82 ^ $85;
     $87 = ((($$092$i)) + 16|0);
     $88 = HEAP32[$67>>2]|0;
     $89 = $86 ^ $88;
     $90 = $89 & 255;
     $91 = (3184 + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $89 >>> 8;
     $94 = $93 & 255;
     $95 = (2160 + ($94<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $96 ^ $92;
     $98 = $89 >>> 16;
     $99 = $98 & 255;
     $100 = (1136 + ($99<<2)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $97 ^ $101;
     $103 = $89 >>> 24;
     $104 = (112 + ($103<<2)|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $102 ^ $105;
     $107 = ((($$092$i)) + 20|0);
     $108 = HEAP32[$87>>2]|0;
     $109 = $106 ^ $108;
     $110 = $109 & 255;
     $111 = (3184 + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $109 >>> 8;
     $114 = $113 & 255;
     $115 = (2160 + ($114<<2)|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $116 ^ $112;
     $118 = $109 >>> 16;
     $119 = $118 & 255;
     $120 = (1136 + ($119<<2)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = $117 ^ $121;
     $123 = $109 >>> 24;
     $124 = (112 + ($123<<2)|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $122 ^ $125;
     $127 = ((($$092$i)) + 24|0);
     $128 = HEAP32[$107>>2]|0;
     $129 = $126 ^ $128;
     $130 = $129 & 255;
     $131 = (3184 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = $129 >>> 8;
     $134 = $133 & 255;
     $135 = (2160 + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 ^ $132;
     $138 = $129 >>> 16;
     $139 = $138 & 255;
     $140 = (1136 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $137 ^ $141;
     $143 = $129 >>> 24;
     $144 = (112 + ($143<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $142 ^ $145;
     $147 = ((($$092$i)) + 28|0);
     $148 = HEAP32[$127>>2]|0;
     $149 = $146 ^ $148;
     $150 = $149 & 255;
     $151 = (3184 + ($150<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $149 >>> 8;
     $154 = $153 & 255;
     $155 = (2160 + ($154<<2)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = $156 ^ $152;
     $158 = $149 >>> 16;
     $159 = $158 & 255;
     $160 = (1136 + ($159<<2)|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = $157 ^ $161;
     $163 = $149 >>> 24;
     $164 = (112 + ($163<<2)|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = $162 ^ $165;
     $167 = ((($$092$i)) + 32|0);
     $168 = HEAP32[$147>>2]|0;
     $169 = $166 ^ $168;
     $170 = $169 & 255;
     $171 = (3184 + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $169 >>> 8;
     $174 = $173 & 255;
     $175 = (2160 + ($174<<2)|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $176 ^ $172;
     $178 = $169 >>> 16;
     $179 = $178 & 255;
     $180 = (1136 + ($179<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $177 ^ $181;
     $183 = $169 >>> 24;
     $184 = (112 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = $182 ^ $185;
     $187 = (($$17990$i) + -32)|0;
     $188 = ($187>>>0)>(31);
     if ($188) {
      $$092$i = $167;$$17791$i = $186;$$17990$i = $187;
     } else {
      break;
     }
    }
    $23 = (($20) - ($21))|0;
    $$0$lcssa$i = $scevgep115$i;$$177$lcssa$i = $186;$$179$lcssa$i = $23;
   } else {
    $$0$lcssa$i = $$08297$i;$$177$lcssa$i = $$07699$i;$$179$lcssa$i = $$07898$i;
   }
   $24 = ($$179$lcssa$i>>>0)>(3);
   if ($24) {
    $25 = (($$179$lcssa$i) + -4)|0;
    $26 = $25 >>> 2;
    $$187$i = $$0$lcssa$i;$$28085$i = $$179$lcssa$i;$$286$i = $$177$lcssa$i;
    while(1) {
     $189 = ((($$187$i)) + 4|0);
     $190 = HEAP32[$$187$i>>2]|0;
     $191 = $190 ^ $$286$i;
     $192 = $191 & 255;
     $193 = (3184 + ($192<<2)|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = $191 >>> 8;
     $196 = $195 & 255;
     $197 = (2160 + ($196<<2)|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = $198 ^ $194;
     $200 = $191 >>> 16;
     $201 = $200 & 255;
     $202 = (1136 + ($201<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = $199 ^ $203;
     $205 = $191 >>> 24;
     $206 = (112 + ($205<<2)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = $204 ^ $207;
     $209 = (($$28085$i) + -4)|0;
     $210 = ($209>>>0)>(3);
     if ($210) {
      $$187$i = $189;$$28085$i = $209;$$286$i = $208;
     } else {
      break;
     }
    }
    $211 = (($26) + 1)|0;
    $scevgep$i = (($$0$lcssa$i) + ($211<<2)|0);
    $212 = $25 & 3;
    $$1$lcssa$i = $scevgep$i;$$2$lcssa$i = $208;$$280$lcssa$i = $212;
   } else {
    $$1$lcssa$i = $$0$lcssa$i;$$2$lcssa$i = $$177$lcssa$i;$$280$lcssa$i = $$179$lcssa$i;
   }
   $213 = ($$280$lcssa$i|0)==(0);
   if ($213) {
    $$4$i = $$2$lcssa$i;
   } else {
    $$183$i = $$1$lcssa$i;$$3$i = $$2$lcssa$i;$$381$i = $$280$lcssa$i;
    while(1) {
     $214 = ((($$183$i)) + 1|0);
     $215 = HEAP8[$$183$i>>0]|0;
     $216 = $215&255;
     $$3$masked$i = $$3$i & 255;
     $217 = $$3$masked$i ^ $216;
     $218 = (112 + ($217<<2)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $$3$i >>> 8;
     $221 = $219 ^ $220;
     $222 = (($$381$i) + -1)|0;
     $223 = ($222|0)==(0);
     if ($223) {
      $$4$i = $221;
      break;
     } else {
      $$183$i = $214;$$3$i = $221;$$381$i = $222;
     }
    }
   }
  }
 } while(0);
 $224 = $$4$i ^ -1;
 $$1 = $224;
 return ($$1|0);
}
function _deflateInit2_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$$0115 = 0, $$0 = 0, $$0113 = 0, $$0115 = 0, $$116 = 0, $$117 = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond118 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = ($6|0)==(0|0);
 if ($8) {
  $$0 = -6;
  return ($$0|0);
 }
 $9 = HEAP8[$6>>0]|0;
 $10 = ($9<<24>>24)!=(49);
 $11 = ($7|0)!=(56);
 $or$cond = $11 | $10;
 if ($or$cond) {
  $$0 = -6;
  return ($$0|0);
 }
 $12 = ($0|0)==(0|0);
 if ($12) {
  $$0 = -2;
  return ($$0|0);
 }
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$14>>2] = 10;
  $17 = ((($0)) + 40|0);
  HEAP32[$17>>2] = 0;
  $38 = 10;
 } else {
  $38 = $15;
 }
 $18 = ((($0)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  HEAP32[$18>>2] = 11;
 }
 $21 = ($1|0)==(-1);
 $$ = $21 ? 6 : $1;
 $22 = ($3|0)<(0);
 if ($22) {
  $23 = (0 - ($3))|0;
  $$0113 = 0;$$0115 = $23;
 } else {
  $24 = ($3|0)>(15);
  $25 = (($3) + -16)|0;
  $$116 = $24 ? $25 : $3;
  $$117 = $24 ? 2 : 1;
  $$0113 = $$117;$$0115 = $$116;
 }
 $$off = (($4) + -1)|0;
 $26 = ($$off>>>0)>(8);
 $27 = ($2|0)!=(8);
 $or$cond5 = $27 | $26;
 $28 = $$0115 & -8;
 $29 = ($28|0)!=(8);
 $30 = $or$cond5 | $29;
 $31 = ($$>>>0)>(9);
 $32 = $31 | $30;
 $33 = ($5>>>0)>(4);
 $34 = $33 | $32;
 if ($34) {
  $$0 = -2;
  return ($$0|0);
 }
 $35 = ($$0115|0)==(8);
 $$$0115 = $35 ? 9 : $$0115;
 $36 = ((($0)) + 40|0);
 $37 = HEAP32[$36>>2]|0;
 $39 = (FUNCTION_TABLE_iiii[$38 & 15]($37,1,5828)|0);
 $40 = ($39|0)==(0|0);
 if ($40) {
  $$0 = -4;
  return ($$0|0);
 }
 $41 = ((($0)) + 28|0);
 HEAP32[$41>>2] = $39;
 HEAP32[$39>>2] = $0;
 $42 = ((($39)) + 24|0);
 HEAP32[$42>>2] = $$0113;
 $43 = ((($39)) + 28|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($39)) + 48|0);
 HEAP32[$44>>2] = $$$0115;
 $45 = 1 << $$$0115;
 $46 = ((($39)) + 44|0);
 HEAP32[$46>>2] = $45;
 $47 = (($45) + -1)|0;
 $48 = ((($39)) + 52|0);
 HEAP32[$48>>2] = $47;
 $49 = (($4) + 7)|0;
 $50 = ((($39)) + 80|0);
 HEAP32[$50>>2] = $49;
 $51 = 1 << $49;
 $52 = ((($39)) + 76|0);
 HEAP32[$52>>2] = $51;
 $53 = (($51) + -1)|0;
 $54 = ((($39)) + 84|0);
 HEAP32[$54>>2] = $53;
 $55 = (($4) + 9)|0;
 $56 = (($55>>>0) / 3)&-1;
 $57 = ((($39)) + 88|0);
 HEAP32[$57>>2] = $56;
 $58 = HEAP32[$14>>2]|0;
 $59 = HEAP32[$36>>2]|0;
 $60 = (FUNCTION_TABLE_iiii[$58 & 15]($59,$45,2)|0);
 $61 = ((($39)) + 56|0);
 HEAP32[$61>>2] = $60;
 $62 = HEAP32[$14>>2]|0;
 $63 = HEAP32[$36>>2]|0;
 $64 = HEAP32[$46>>2]|0;
 $65 = (FUNCTION_TABLE_iiii[$62 & 15]($63,$64,2)|0);
 $66 = ((($39)) + 64|0);
 HEAP32[$66>>2] = $65;
 $67 = HEAP32[$14>>2]|0;
 $68 = HEAP32[$36>>2]|0;
 $69 = HEAP32[$52>>2]|0;
 $70 = (FUNCTION_TABLE_iiii[$67 & 15]($68,$69,2)|0);
 $71 = ((($39)) + 68|0);
 HEAP32[$71>>2] = $70;
 $72 = ((($39)) + 5824|0);
 HEAP32[$72>>2] = 0;
 $73 = (($4) + 6)|0;
 $74 = 1 << $73;
 $75 = ((($39)) + 5788|0);
 HEAP32[$75>>2] = $74;
 $76 = HEAP32[$14>>2]|0;
 $77 = HEAP32[$36>>2]|0;
 $78 = (FUNCTION_TABLE_iiii[$76 & 15]($77,$74,4)|0);
 $79 = ((($39)) + 8|0);
 HEAP32[$79>>2] = $78;
 $80 = HEAP32[$75>>2]|0;
 $81 = $80 << 2;
 $82 = ((($39)) + 12|0);
 HEAP32[$82>>2] = $81;
 $83 = HEAP32[$61>>2]|0;
 $84 = ($83|0)==(0|0);
 if (!($84)) {
  $85 = HEAP32[$66>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   $87 = HEAP32[$71>>2]|0;
   $88 = ($87|0)==(0|0);
   $89 = ($78|0)==(0|0);
   $or$cond118 = $88 | $89;
   if (!($or$cond118)) {
    $92 = $80 >>> 1;
    $93 = (($78) + ($92<<1)|0);
    $94 = ((($39)) + 5796|0);
    HEAP32[$94>>2] = $93;
    $95 = ($80*3)|0;
    $96 = (($78) + ($95)|0);
    $97 = ((($39)) + 5784|0);
    HEAP32[$97>>2] = $96;
    $98 = ((($39)) + 132|0);
    HEAP32[$98>>2] = $$;
    $99 = ((($39)) + 136|0);
    HEAP32[$99>>2] = $5;
    $100 = ((($39)) + 36|0);
    HEAP8[$100>>0] = 8;
    $101 = (_deflateReset($0)|0);
    $$0 = $101;
    return ($$0|0);
   }
  }
 }
 $90 = ((($39)) + 4|0);
 HEAP32[$90>>2] = 666;
 $91 = HEAP32[(96)>>2]|0;
 HEAP32[$13>>2] = $91;
 (_deflateEnd($0)|0);
 $$0 = -4;
 return ($$0|0);
}
function _deflateEnd($0) {
 $0 = $0|0;
 var $$0 = 0, $$in = 0, $$in51 = 0, $$in52 = 0, $$pre = 0, $$pre$phi48Z2D = 0, $$pre$phiZ2D = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 42: case 69: case 73: case 91: case 103: case 113: case 666:  {
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $7 = ((($3)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$in = $3;
 } else {
  $10 = ((($0)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$11 & 15]($13,$8);
  $$pre = HEAP32[$2>>2]|0;
  $$in = $$pre;
 }
 $14 = ((($$in)) + 68|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$in51 = $$in;
 } else {
  $17 = ((($0)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_vii[$18 & 15]($20,$15);
  $$pre43 = HEAP32[$2>>2]|0;
  $$in51 = $$pre43;
 }
 $21 = ((($$in51)) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $$in52 = $$in51;
 } else {
  $24 = ((($0)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($0)) + 40|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$25 & 15]($27,$22);
  $$pre44 = HEAP32[$2>>2]|0;
  $$in52 = $$pre44;
 }
 $28 = ((($$in52)) + 56|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $$pre46 = ((($0)) + 36|0);
  $$pre47 = ((($0)) + 40|0);
  $$pre$phi48Z2D = $$pre47;$$pre$phiZ2D = $$pre46;$37 = $$in52;
 } else {
  $31 = ((($0)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 40|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_vii[$32 & 15]($34,$29);
  $$pre45 = HEAP32[$2>>2]|0;
  $$pre$phi48Z2D = $33;$$pre$phiZ2D = $31;$37 = $$pre45;
 }
 $35 = HEAP32[$$pre$phiZ2D>>2]|0;
 $36 = HEAP32[$$pre$phi48Z2D>>2]|0;
 FUNCTION_TABLE_vii[$35 & 15]($36,$37);
 HEAP32[$2>>2] = 0;
 $38 = ($6|0)==(113);
 $39 = $38 ? -3 : 0;
 $$0 = $39;
 return ($$0|0);
}
function _deflateReset($0) {
 $0 = $0|0;
 var $$0$i4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $8 = ((($0)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $11 = ((($0)) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 44|0);
 HEAP32[$14>>2] = 2;
 $15 = ((($3)) + 20|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($3)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<(0);
 $22 = (0 - ($20))|0;
 if ($21) {
  HEAP32[$19>>2] = $22;
  $23 = $22;
 } else {
  $23 = $20;
 }
 $24 = ($23|0)!=(0);
 $25 = $24 ? 42 : 113;
 $26 = ((($3)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = ($23|0)==(2);
 if ($27) {
  $28 = (_crc32(0,0,0)|0);
  $31 = $28;
 } else {
  $29 = (_adler32(0,0,0)|0);
  $31 = $29;
 }
 $30 = ((($0)) + 48|0);
 HEAP32[$30>>2] = $31;
 $32 = ((($3)) + 40|0);
 HEAP32[$32>>2] = 0;
 __tr_init($3);
 $33 = HEAP32[$2>>2]|0;
 $34 = ((($33)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 << 1;
 $37 = ((($33)) + 60|0);
 HEAP32[$37>>2] = $36;
 $38 = ((($33)) + 68|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($33)) + 76|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + -1)|0;
 $43 = (($39) + ($42<<1)|0);
 HEAP16[$43>>1] = 0;
 $44 = $41 << 1;
 $45 = (($44) + -2)|0;
 _memset(($39|0),0,($45|0))|0;
 $46 = ((($33)) + 132|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (((8304 + (($47*12)|0)|0)) + 2|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = ((($33)) + 128|0);
 HEAP32[$51>>2] = $50;
 $52 = (8304 + (($47*12)|0)|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 $55 = ((($33)) + 140|0);
 HEAP32[$55>>2] = $54;
 $56 = (((8304 + (($47*12)|0)|0)) + 4|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $59 = ((($33)) + 144|0);
 HEAP32[$59>>2] = $58;
 $60 = (((8304 + (($47*12)|0)|0)) + 6|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61&65535;
 $63 = ((($33)) + 124|0);
 HEAP32[$63>>2] = $62;
 $64 = ((($33)) + 108|0);
 HEAP32[$64>>2] = 0;
 $65 = ((($33)) + 92|0);
 HEAP32[$65>>2] = 0;
 $66 = ((($33)) + 116|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($33)) + 5812|0);
 HEAP32[$67>>2] = 0;
 $68 = ((($33)) + 120|0);
 HEAP32[$68>>2] = 2;
 $69 = ((($33)) + 96|0);
 HEAP32[$69>>2] = 2;
 $70 = ((($33)) + 104|0);
 HEAP32[$70>>2] = 0;
 $71 = ((($33)) + 72|0);
 HEAP32[$71>>2] = 0;
 $$0$i4 = 0;
 return ($$0$i4|0);
}
function _deflate_stored($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i73 = 0, $$$i75 = 0, $$$i77 = 0, $$0 = 0, $$72 = 0, $$pr = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -5)|0;
 $5 = ($4>>>0)<(65535);
 $$ = $5 ? $4 : 65535;
 $6 = ((($0)) + 116|0);
 $7 = ((($0)) + 108|0);
 $8 = ((($0)) + 92|0);
 $9 = ((($0)) + 44|0);
 $10 = ((($0)) + 56|0);
 while(1) {
  $11 = HEAP32[$6>>2]|0;
  $12 = ($11>>>0)<(2);
  if ($12) {
   _fill_window($0);
   $13 = HEAP32[$6>>2]|0;
   $14 = $13 | $1;
   $15 = ($14|0)==(0);
   if ($15) {
    $$0 = 0;
    label = 35;
    break;
   }
   $16 = ($13|0)==(0);
   if ($16) {
    label = 20;
    break;
   } else {
    $19 = $13;
   }
  } else {
   $19 = $11;
  }
  $17 = HEAP32[$7>>2]|0;
  $18 = (($17) + ($19))|0;
  HEAP32[$7>>2] = $18;
  HEAP32[$6>>2] = 0;
  $20 = HEAP32[$8>>2]|0;
  $21 = (($20) + ($$))|0;
  $22 = ($18|0)!=(0);
  $23 = ($18>>>0)<($21>>>0);
  $or$cond = $22 & $23;
  if ($or$cond) {
   $62 = $20;$63 = $18;
  } else {
   $24 = (($18) - ($21))|0;
   HEAP32[$6>>2] = $24;
   HEAP32[$7>>2] = $21;
   $25 = ($20|0)>(-1);
   if ($25) {
    $26 = HEAP32[$10>>2]|0;
    $27 = (($26) + ($20)|0);
    $28 = $27;
   } else {
    $28 = 0;
   }
   __tr_flush_block($0,$28,$$,0);
   $29 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $29;
   $30 = HEAP32[$0>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   __tr_flush_bits($32);
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($30)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34>>>0)>($36>>>0);
   $$$i = $37 ? $36 : $34;
   $38 = ($$$i|0)==(0);
   if (!($38)) {
    $39 = ((($30)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($32)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    _memcpy(($40|0),($42|0),($$$i|0))|0;
    $43 = HEAP32[$39>>2]|0;
    $44 = (($43) + ($$$i)|0);
    HEAP32[$39>>2] = $44;
    $45 = HEAP32[$41>>2]|0;
    $46 = (($45) + ($$$i)|0);
    HEAP32[$41>>2] = $46;
    $47 = ((($30)) + 20|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + ($$$i))|0;
    HEAP32[$47>>2] = $49;
    $50 = HEAP32[$35>>2]|0;
    $51 = (($50) - ($$$i))|0;
    HEAP32[$35>>2] = $51;
    $52 = HEAP32[$33>>2]|0;
    $53 = (($52) - ($$$i))|0;
    HEAP32[$33>>2] = $53;
    $54 = ($53|0)==(0);
    if ($54) {
     $55 = ((($32)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     HEAP32[$41>>2] = $56;
    }
   }
   $57 = HEAP32[$0>>2]|0;
   $58 = ((($57)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0);
   if ($60) {
    $$0 = 0;
    label = 35;
    break;
   }
   $$pr = HEAP32[$8>>2]|0;
   $$pre = HEAP32[$7>>2]|0;
   $62 = $$pr;$63 = $$pre;
  }
  $61 = (($63) - ($62))|0;
  $64 = HEAP32[$9>>2]|0;
  $65 = (($64) + -262)|0;
  $66 = ($61>>>0)<($65>>>0);
  if ($66) {
   continue;
  }
  $67 = ($62|0)>(-1);
  if ($67) {
   $68 = HEAP32[$10>>2]|0;
   $69 = (($68) + ($62)|0);
   $70 = $69;
  } else {
   $70 = 0;
  }
  __tr_flush_block($0,$70,$61,0);
  $71 = HEAP32[$7>>2]|0;
  HEAP32[$8>>2] = $71;
  $72 = HEAP32[$0>>2]|0;
  $73 = ((($72)) + 28|0);
  $74 = HEAP32[$73>>2]|0;
  __tr_flush_bits($74);
  $75 = ((($74)) + 20|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($72)) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($76>>>0)>($78>>>0);
  $$$i73 = $79 ? $78 : $76;
  $80 = ($$$i73|0)==(0);
  if (!($80)) {
   $81 = ((($72)) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($74)) + 16|0);
   $84 = HEAP32[$83>>2]|0;
   _memcpy(($82|0),($84|0),($$$i73|0))|0;
   $85 = HEAP32[$81>>2]|0;
   $86 = (($85) + ($$$i73)|0);
   HEAP32[$81>>2] = $86;
   $87 = HEAP32[$83>>2]|0;
   $88 = (($87) + ($$$i73)|0);
   HEAP32[$83>>2] = $88;
   $89 = ((($72)) + 20|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + ($$$i73))|0;
   HEAP32[$89>>2] = $91;
   $92 = HEAP32[$77>>2]|0;
   $93 = (($92) - ($$$i73))|0;
   HEAP32[$77>>2] = $93;
   $94 = HEAP32[$75>>2]|0;
   $95 = (($94) - ($$$i73))|0;
   HEAP32[$75>>2] = $95;
   $96 = ($95|0)==(0);
   if ($96) {
    $97 = ((($74)) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    HEAP32[$83>>2] = $98;
   }
  }
  $99 = HEAP32[$0>>2]|0;
  $100 = ((($99)) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0);
  if ($102) {
   $$0 = 0;
   label = 35;
   break;
  }
 }
 if ((label|0) == 20) {
  $103 = ((($0)) + 5812|0);
  HEAP32[$103>>2] = 0;
  $104 = ($1|0)==(4);
  if ($104) {
   $105 = HEAP32[$8>>2]|0;
   $106 = ($105|0)>(-1);
   if ($106) {
    $107 = HEAP32[$10>>2]|0;
    $108 = (($107) + ($105)|0);
    $111 = $108;
   } else {
    $111 = 0;
   }
   $109 = HEAP32[$7>>2]|0;
   $110 = (($109) - ($105))|0;
   __tr_flush_block($0,$111,$110,1);
   $112 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $112;
   $113 = HEAP32[$0>>2]|0;
   $114 = ((($113)) + 28|0);
   $115 = HEAP32[$114>>2]|0;
   __tr_flush_bits($115);
   $116 = ((($115)) + 20|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($113)) + 16|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($117>>>0)>($119>>>0);
   $$$i75 = $120 ? $119 : $117;
   $121 = ($$$i75|0)==(0);
   if (!($121)) {
    $122 = ((($113)) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ((($115)) + 16|0);
    $125 = HEAP32[$124>>2]|0;
    _memcpy(($123|0),($125|0),($$$i75|0))|0;
    $126 = HEAP32[$122>>2]|0;
    $127 = (($126) + ($$$i75)|0);
    HEAP32[$122>>2] = $127;
    $128 = HEAP32[$124>>2]|0;
    $129 = (($128) + ($$$i75)|0);
    HEAP32[$124>>2] = $129;
    $130 = ((($113)) + 20|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + ($$$i75))|0;
    HEAP32[$130>>2] = $132;
    $133 = HEAP32[$118>>2]|0;
    $134 = (($133) - ($$$i75))|0;
    HEAP32[$118>>2] = $134;
    $135 = HEAP32[$116>>2]|0;
    $136 = (($135) - ($$$i75))|0;
    HEAP32[$116>>2] = $136;
    $137 = ($136|0)==(0);
    if ($137) {
     $138 = ((($115)) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     HEAP32[$124>>2] = $139;
    }
   }
   $140 = HEAP32[$0>>2]|0;
   $141 = ((($140)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(0);
   $$72 = $143 ? 2 : 3;
   $$0 = $$72;
   return ($$0|0);
  }
  $144 = HEAP32[$7>>2]|0;
  $145 = HEAP32[$8>>2]|0;
  $146 = ($144|0)>($145|0);
  if ($146) {
   $147 = ($145|0)>(-1);
   if ($147) {
    $148 = HEAP32[$10>>2]|0;
    $149 = (($148) + ($145)|0);
    $151 = $149;
   } else {
    $151 = 0;
   }
   $150 = (($144) - ($145))|0;
   __tr_flush_block($0,$151,$150,0);
   $152 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $152;
   $153 = HEAP32[$0>>2]|0;
   $154 = ((($153)) + 28|0);
   $155 = HEAP32[$154>>2]|0;
   __tr_flush_bits($155);
   $156 = ((($155)) + 20|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ((($153)) + 16|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157>>>0)>($159>>>0);
   $$$i77 = $160 ? $159 : $157;
   $161 = ($$$i77|0)==(0);
   if (!($161)) {
    $162 = ((($153)) + 12|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($155)) + 16|0);
    $165 = HEAP32[$164>>2]|0;
    _memcpy(($163|0),($165|0),($$$i77|0))|0;
    $166 = HEAP32[$162>>2]|0;
    $167 = (($166) + ($$$i77)|0);
    HEAP32[$162>>2] = $167;
    $168 = HEAP32[$164>>2]|0;
    $169 = (($168) + ($$$i77)|0);
    HEAP32[$164>>2] = $169;
    $170 = ((($153)) + 20|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) + ($$$i77))|0;
    HEAP32[$170>>2] = $172;
    $173 = HEAP32[$158>>2]|0;
    $174 = (($173) - ($$$i77))|0;
    HEAP32[$158>>2] = $174;
    $175 = HEAP32[$156>>2]|0;
    $176 = (($175) - ($$$i77))|0;
    HEAP32[$156>>2] = $176;
    $177 = ($176|0)==(0);
    if ($177) {
     $178 = ((($155)) + 8|0);
     $179 = HEAP32[$178>>2]|0;
     HEAP32[$164>>2] = $179;
    }
   }
   $180 = HEAP32[$0>>2]|0;
   $181 = ((($180)) + 16|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ($182|0)==(0);
   if ($183) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 35) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i139 = 0, $$$i141 = 0, $$0 = 0, $$0136 = 0, $$138 = 0, $$pr = 0, $$pre = 0, $$pre144 = 0, $$pre145 = 0, $$pre146 = 0, $$pre147 = 0, $$pre148 = 0, $$pre149 = 0, $$pre150 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond137 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 116|0);
 $3 = ($1|0)==(0);
 $4 = ((($0)) + 72|0);
 $5 = ((($0)) + 88|0);
 $6 = ((($0)) + 56|0);
 $7 = ((($0)) + 108|0);
 $8 = ((($0)) + 84|0);
 $9 = ((($0)) + 68|0);
 $10 = ((($0)) + 64|0);
 $11 = ((($0)) + 52|0);
 $12 = ((($0)) + 44|0);
 $13 = ((($0)) + 96|0);
 $14 = ((($0)) + 112|0);
 $15 = ((($0)) + 5796|0);
 $16 = ((($0)) + 5792|0);
 $17 = ((($0)) + 5784|0);
 $18 = ((($0)) + 5788|0);
 $19 = ((($0)) + 128|0);
 $20 = ((($0)) + 92|0);
 while(1) {
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21>>>0)<(262);
  if ($22) {
   _fill_window($0);
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23>>>0)<(262);
   $or$cond = $3 & $24;
   if ($or$cond) {
    $$0 = 0;
    label = 39;
    break;
   }
   $25 = ($23|0)==(0);
   if ($25) {
    label = 24;
    break;
   }
   $26 = ($23>>>0)>(2);
   if ($26) {
    label = 6;
   } else {
    label = 9;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $27 = HEAP32[$4>>2]|0;
   $28 = HEAP32[$5>>2]|0;
   $29 = $27 << $28;
   $30 = HEAP32[$6>>2]|0;
   $31 = HEAP32[$7>>2]|0;
   $32 = (($31) + 2)|0;
   $33 = (($30) + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $29 ^ $35;
   $37 = HEAP32[$8>>2]|0;
   $38 = $36 & $37;
   HEAP32[$4>>2] = $38;
   $39 = HEAP32[$9>>2]|0;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = HEAP32[$10>>2]|0;
   $43 = HEAP32[$11>>2]|0;
   $44 = $43 & $31;
   $45 = (($42) + ($44<<1)|0);
   HEAP16[$45>>1] = $41;
   $46 = $41&65535;
   $47 = $31&65535;
   HEAP16[$40>>1] = $47;
   $48 = ($41<<16>>16)==(0);
   if ($48) {
    label = 9;
   } else {
    $49 = (($31) - ($46))|0;
    $50 = HEAP32[$12>>2]|0;
    $51 = (($50) + -262)|0;
    $52 = ($49>>>0)>($51>>>0);
    if ($52) {
     label = 9;
    } else {
     $53 = (_longest_match($0,$46)|0);
     HEAP32[$13>>2] = $53;
     $54 = $53;
    }
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $$pr = HEAP32[$13>>2]|0;
   $54 = $$pr;
  }
  $55 = ($54>>>0)>(2);
  do {
   if ($55) {
    $56 = (($54) + 253)|0;
    $57 = $56&255;
    $58 = HEAP32[$7>>2]|0;
    $59 = HEAP32[$14>>2]|0;
    $60 = (($58) - ($59))|0;
    $61 = $60&65535;
    $62 = HEAP32[$15>>2]|0;
    $63 = HEAP32[$16>>2]|0;
    $64 = (($62) + ($63<<1)|0);
    HEAP16[$64>>1] = $61;
    $65 = HEAP32[$17>>2]|0;
    $66 = (($63) + 1)|0;
    HEAP32[$16>>2] = $66;
    $67 = (($65) + ($63)|0);
    HEAP8[$67>>0] = $57;
    $68 = (($60) + 65535)|0;
    $69 = $56 & 255;
    $70 = (17336 + ($69)|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = $72 | 256;
    $74 = (($73) + 1)|0;
    $75 = (((($0)) + 148|0) + ($74<<2)|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = (($76) + 1)<<16>>16;
    HEAP16[$75>>1] = $77;
    $78 = $68 & 65535;
    $79 = ($78>>>0)<(256);
    $80 = $78 >>> 7;
    $81 = (($80) + 256)|0;
    $$sink = $79 ? $78 : $81;
    $82 = (16824 + ($$sink)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = (((($0)) + 2440|0) + ($84<<2)|0);
    $86 = HEAP16[$85>>1]|0;
    $87 = (($86) + 1)<<16>>16;
    HEAP16[$85>>1] = $87;
    $88 = HEAP32[$16>>2]|0;
    $89 = HEAP32[$18>>2]|0;
    $90 = (($89) + -1)|0;
    $91 = ($88|0)==($90|0);
    $92 = $91&1;
    $93 = HEAP32[$13>>2]|0;
    $94 = HEAP32[$2>>2]|0;
    $95 = (($94) - ($93))|0;
    HEAP32[$2>>2] = $95;
    $96 = HEAP32[$19>>2]|0;
    $97 = ($93>>>0)<=($96>>>0);
    $98 = ($95>>>0)>(2);
    $or$cond137 = $98 & $97;
    if (!($or$cond137)) {
     $119 = HEAP32[$7>>2]|0;
     $120 = (($119) + ($93))|0;
     HEAP32[$7>>2] = $120;
     HEAP32[$13>>2] = 0;
     $121 = HEAP32[$6>>2]|0;
     $122 = (($121) + ($120)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     HEAP32[$4>>2] = $124;
     $125 = HEAP32[$5>>2]|0;
     $126 = $124 << $125;
     $127 = (($120) + 1)|0;
     $128 = (($121) + ($127)|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = $129&255;
     $131 = $126 ^ $130;
     $132 = HEAP32[$8>>2]|0;
     $133 = $131 & $132;
     HEAP32[$4>>2] = $133;
     $$0136 = $92;$163 = $120;
     break;
    }
    $99 = (($93) + -1)|0;
    HEAP32[$13>>2] = $99;
    $$pre = HEAP32[$7>>2]|0;
    $$pre144 = HEAP32[$4>>2]|0;
    $$pre145 = HEAP32[$5>>2]|0;
    $$pre146 = HEAP32[$6>>2]|0;
    $$pre147 = HEAP32[$8>>2]|0;
    $$pre148 = HEAP32[$9>>2]|0;
    $$pre149 = HEAP32[$10>>2]|0;
    $$pre150 = HEAP32[$11>>2]|0;
    $101 = $$pre;$103 = $$pre144;$116 = $99;
    while(1) {
     $100 = (($101) + 1)|0;
     HEAP32[$7>>2] = $100;
     $102 = $103 << $$pre145;
     $104 = (($101) + 3)|0;
     $105 = (($$pre146) + ($104)|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = $102 ^ $107;
     $109 = $108 & $$pre147;
     HEAP32[$4>>2] = $109;
     $110 = (($$pre148) + ($109<<1)|0);
     $111 = HEAP16[$110>>1]|0;
     $112 = $$pre150 & $100;
     $113 = (($$pre149) + ($112<<1)|0);
     HEAP16[$113>>1] = $111;
     $114 = $100&65535;
     HEAP16[$110>>1] = $114;
     $115 = (($116) + -1)|0;
     HEAP32[$13>>2] = $115;
     $117 = ($115|0)==(0);
     if ($117) {
      break;
     } else {
      $101 = $100;$103 = $109;$116 = $115;
     }
    }
    $118 = (($101) + 2)|0;
    HEAP32[$7>>2] = $118;
    $$0136 = $92;$163 = $118;
   } else {
    $134 = HEAP32[$6>>2]|0;
    $135 = HEAP32[$7>>2]|0;
    $136 = (($134) + ($135)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = HEAP32[$15>>2]|0;
    $139 = HEAP32[$16>>2]|0;
    $140 = (($138) + ($139<<1)|0);
    HEAP16[$140>>1] = 0;
    $141 = HEAP32[$17>>2]|0;
    $142 = (($139) + 1)|0;
    HEAP32[$16>>2] = $142;
    $143 = (($141) + ($139)|0);
    HEAP8[$143>>0] = $137;
    $144 = $137&255;
    $145 = (((($0)) + 148|0) + ($144<<2)|0);
    $146 = HEAP16[$145>>1]|0;
    $147 = (($146) + 1)<<16>>16;
    HEAP16[$145>>1] = $147;
    $148 = HEAP32[$16>>2]|0;
    $149 = HEAP32[$18>>2]|0;
    $150 = (($149) + -1)|0;
    $151 = ($148|0)==($150|0);
    $152 = $151&1;
    $153 = HEAP32[$2>>2]|0;
    $154 = (($153) + -1)|0;
    HEAP32[$2>>2] = $154;
    $155 = HEAP32[$7>>2]|0;
    $156 = (($155) + 1)|0;
    HEAP32[$7>>2] = $156;
    $$0136 = $152;$163 = $156;
   }
  } while(0);
  $157 = ($$0136|0)==(0);
  if ($157) {
   continue;
  }
  $158 = HEAP32[$20>>2]|0;
  $159 = ($158|0)>(-1);
  if ($159) {
   $160 = HEAP32[$6>>2]|0;
   $161 = (($160) + ($158)|0);
   $164 = $161;
  } else {
   $164 = 0;
  }
  $162 = (($163) - ($158))|0;
  __tr_flush_block($0,$164,$162,0);
  $165 = HEAP32[$7>>2]|0;
  HEAP32[$20>>2] = $165;
  $166 = HEAP32[$0>>2]|0;
  $167 = ((($166)) + 28|0);
  $168 = HEAP32[$167>>2]|0;
  __tr_flush_bits($168);
  $169 = ((($168)) + 20|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ((($166)) + 16|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = ($170>>>0)>($172>>>0);
  $$$i = $173 ? $172 : $170;
  $174 = ($$$i|0)==(0);
  if (!($174)) {
   $175 = ((($166)) + 12|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ((($168)) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   _memcpy(($176|0),($178|0),($$$i|0))|0;
   $179 = HEAP32[$175>>2]|0;
   $180 = (($179) + ($$$i)|0);
   HEAP32[$175>>2] = $180;
   $181 = HEAP32[$177>>2]|0;
   $182 = (($181) + ($$$i)|0);
   HEAP32[$177>>2] = $182;
   $183 = ((($166)) + 20|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + ($$$i))|0;
   HEAP32[$183>>2] = $185;
   $186 = HEAP32[$171>>2]|0;
   $187 = (($186) - ($$$i))|0;
   HEAP32[$171>>2] = $187;
   $188 = HEAP32[$169>>2]|0;
   $189 = (($188) - ($$$i))|0;
   HEAP32[$169>>2] = $189;
   $190 = ($189|0)==(0);
   if ($190) {
    $191 = ((($168)) + 8|0);
    $192 = HEAP32[$191>>2]|0;
    HEAP32[$177>>2] = $192;
   }
  }
  $193 = HEAP32[$0>>2]|0;
  $194 = ((($193)) + 16|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ($195|0)==(0);
  if ($196) {
   $$0 = 0;
   label = 39;
   break;
  }
 }
 if ((label|0) == 24) {
  $197 = HEAP32[$7>>2]|0;
  $198 = ($197>>>0)<(2);
  $$ = $198 ? $197 : 2;
  $199 = ((($0)) + 5812|0);
  HEAP32[$199>>2] = $$;
  $200 = ($1|0)==(4);
  if ($200) {
   $201 = HEAP32[$20>>2]|0;
   $202 = ($201|0)>(-1);
   if ($202) {
    $203 = HEAP32[$6>>2]|0;
    $204 = (($203) + ($201)|0);
    $206 = $204;
   } else {
    $206 = 0;
   }
   $205 = (($197) - ($201))|0;
   __tr_flush_block($0,$206,$205,1);
   $207 = HEAP32[$7>>2]|0;
   HEAP32[$20>>2] = $207;
   $208 = HEAP32[$0>>2]|0;
   $209 = ((($208)) + 28|0);
   $210 = HEAP32[$209>>2]|0;
   __tr_flush_bits($210);
   $211 = ((($210)) + 20|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ((($208)) + 16|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($212>>>0)>($214>>>0);
   $$$i139 = $215 ? $214 : $212;
   $216 = ($$$i139|0)==(0);
   if (!($216)) {
    $217 = ((($208)) + 12|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ((($210)) + 16|0);
    $220 = HEAP32[$219>>2]|0;
    _memcpy(($218|0),($220|0),($$$i139|0))|0;
    $221 = HEAP32[$217>>2]|0;
    $222 = (($221) + ($$$i139)|0);
    HEAP32[$217>>2] = $222;
    $223 = HEAP32[$219>>2]|0;
    $224 = (($223) + ($$$i139)|0);
    HEAP32[$219>>2] = $224;
    $225 = ((($208)) + 20|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + ($$$i139))|0;
    HEAP32[$225>>2] = $227;
    $228 = HEAP32[$213>>2]|0;
    $229 = (($228) - ($$$i139))|0;
    HEAP32[$213>>2] = $229;
    $230 = HEAP32[$211>>2]|0;
    $231 = (($230) - ($$$i139))|0;
    HEAP32[$211>>2] = $231;
    $232 = ($231|0)==(0);
    if ($232) {
     $233 = ((($210)) + 8|0);
     $234 = HEAP32[$233>>2]|0;
     HEAP32[$219>>2] = $234;
    }
   }
   $235 = HEAP32[$0>>2]|0;
   $236 = ((($235)) + 16|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = ($237|0)==(0);
   $$138 = $238 ? 2 : 3;
   $$0 = $$138;
   return ($$0|0);
  }
  $239 = HEAP32[$16>>2]|0;
  $240 = ($239|0)==(0);
  if (!($240)) {
   $241 = HEAP32[$20>>2]|0;
   $242 = ($241|0)>(-1);
   if ($242) {
    $243 = HEAP32[$6>>2]|0;
    $244 = (($243) + ($241)|0);
    $246 = $244;
   } else {
    $246 = 0;
   }
   $245 = (($197) - ($241))|0;
   __tr_flush_block($0,$246,$245,0);
   $247 = HEAP32[$7>>2]|0;
   HEAP32[$20>>2] = $247;
   $248 = HEAP32[$0>>2]|0;
   $249 = ((($248)) + 28|0);
   $250 = HEAP32[$249>>2]|0;
   __tr_flush_bits($250);
   $251 = ((($250)) + 20|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ((($248)) + 16|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ($252>>>0)>($254>>>0);
   $$$i141 = $255 ? $254 : $252;
   $256 = ($$$i141|0)==(0);
   if (!($256)) {
    $257 = ((($248)) + 12|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ((($250)) + 16|0);
    $260 = HEAP32[$259>>2]|0;
    _memcpy(($258|0),($260|0),($$$i141|0))|0;
    $261 = HEAP32[$257>>2]|0;
    $262 = (($261) + ($$$i141)|0);
    HEAP32[$257>>2] = $262;
    $263 = HEAP32[$259>>2]|0;
    $264 = (($263) + ($$$i141)|0);
    HEAP32[$259>>2] = $264;
    $265 = ((($248)) + 20|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = (($266) + ($$$i141))|0;
    HEAP32[$265>>2] = $267;
    $268 = HEAP32[$253>>2]|0;
    $269 = (($268) - ($$$i141))|0;
    HEAP32[$253>>2] = $269;
    $270 = HEAP32[$251>>2]|0;
    $271 = (($270) - ($$$i141))|0;
    HEAP32[$251>>2] = $271;
    $272 = ($271|0)==(0);
    if ($272) {
     $273 = ((($250)) + 8|0);
     $274 = HEAP32[$273>>2]|0;
     HEAP32[$259>>2] = $274;
    }
   }
   $275 = HEAP32[$0>>2]|0;
   $276 = ((($275)) + 16|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = ($277|0)==(0);
   if ($278) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 39) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate_slow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i174 = 0, $$$i176 = 0, $$$i178 = 0, $$173 = 0, $$2 = 0, $$neg182 = 0, $$pr = 0, $$pr180 = 0, $$pre = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond186 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 116|0);
 $3 = ($1|0)==(0);
 $4 = ((($0)) + 72|0);
 $5 = ((($0)) + 88|0);
 $6 = ((($0)) + 56|0);
 $7 = ((($0)) + 108|0);
 $8 = ((($0)) + 84|0);
 $9 = ((($0)) + 68|0);
 $10 = ((($0)) + 64|0);
 $11 = ((($0)) + 52|0);
 $12 = ((($0)) + 96|0);
 $13 = ((($0)) + 120|0);
 $14 = ((($0)) + 112|0);
 $15 = ((($0)) + 100|0);
 $16 = ((($0)) + 5796|0);
 $17 = ((($0)) + 5792|0);
 $18 = ((($0)) + 5784|0);
 $19 = ((($0)) + 5788|0);
 $20 = ((($0)) + 104|0);
 $21 = ((($0)) + 92|0);
 $22 = ((($0)) + 128|0);
 $23 = ((($0)) + 44|0);
 $24 = ((($0)) + 136|0);
 L1: while(1) {
  $$pr = HEAP32[$2>>2]|0;
  $25 = $$pr;
  while(1) {
   $26 = ($25>>>0)<(262);
   if ($26) {
    _fill_window($0);
    $27 = HEAP32[$2>>2]|0;
    $28 = ($27>>>0)<(262);
    $or$cond = $3 & $28;
    if ($or$cond) {
     $$2 = 0;
     label = 55;
     break L1;
    }
    $29 = ($27|0)==(0);
    if ($29) {
     label = 38;
     break L1;
    }
    $30 = ($27>>>0)>(2);
    if ($30) {
     label = 8;
    } else {
     $31 = HEAP32[$12>>2]|0;
     HEAP32[$13>>2] = $31;
     $32 = HEAP32[$14>>2]|0;
     HEAP32[$15>>2] = $32;
     HEAP32[$12>>2] = 2;
     $352 = 2;
     label = 16;
    }
   } else {
    label = 8;
   }
   do {
    if ((label|0) == 8) {
     label = 0;
     $33 = HEAP32[$4>>2]|0;
     $34 = HEAP32[$5>>2]|0;
     $35 = $33 << $34;
     $36 = HEAP32[$6>>2]|0;
     $37 = HEAP32[$7>>2]|0;
     $38 = (($37) + 2)|0;
     $39 = (($36) + ($38)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = $35 ^ $41;
     $43 = HEAP32[$8>>2]|0;
     $44 = $42 & $43;
     HEAP32[$4>>2] = $44;
     $45 = HEAP32[$9>>2]|0;
     $46 = (($45) + ($44<<1)|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = HEAP32[$10>>2]|0;
     $49 = HEAP32[$11>>2]|0;
     $50 = $49 & $37;
     $51 = (($48) + ($50<<1)|0);
     HEAP16[$51>>1] = $47;
     $52 = $47&65535;
     $53 = $37&65535;
     HEAP16[$46>>1] = $53;
     $54 = HEAP32[$12>>2]|0;
     HEAP32[$13>>2] = $54;
     $55 = HEAP32[$14>>2]|0;
     HEAP32[$15>>2] = $55;
     HEAP32[$12>>2] = 2;
     $56 = ($47<<16>>16)==(0);
     if ($56) {
      $352 = 2;
      label = 16;
     } else {
      $57 = HEAP32[$22>>2]|0;
      $58 = ($54>>>0)<($57>>>0);
      if ($58) {
       $59 = HEAP32[$7>>2]|0;
       $60 = (($59) - ($52))|0;
       $61 = HEAP32[$23>>2]|0;
       $62 = (($61) + -262)|0;
       $63 = ($60>>>0)>($62>>>0);
       if ($63) {
        $352 = 2;
        label = 16;
       } else {
        $64 = (_longest_match($0,$52)|0);
        HEAP32[$12>>2] = $64;
        $65 = ($64>>>0)<(6);
        if ($65) {
         $66 = HEAP32[$24>>2]|0;
         $67 = ($66|0)==(1);
         if (!($67)) {
          $68 = ($64|0)==(3);
          if (!($68)) {
           $352 = $64;
           label = 16;
           break;
          }
          $69 = HEAP32[$7>>2]|0;
          $70 = HEAP32[$14>>2]|0;
          $71 = (($69) - ($70))|0;
          $72 = ($71>>>0)>(4096);
          if (!($72)) {
           $352 = 3;
           label = 16;
           break;
          }
         }
         HEAP32[$12>>2] = 2;
         $352 = 2;
         label = 16;
        } else {
         $352 = $64;
         label = 16;
        }
       }
      } else {
       $73 = $54;$75 = 2;
      }
     }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    $$pr180 = HEAP32[$13>>2]|0;
    $73 = $$pr180;$75 = $352;
   }
   $74 = ($73>>>0)<(3);
   $76 = ($75>>>0)>($73>>>0);
   $or$cond186 = $74 | $76;
   if (!($or$cond186)) {
    break;
   }
   $185 = HEAP32[$20>>2]|0;
   $186 = ($185|0)==(0);
   if ($186) {
    HEAP32[$20>>2] = 1;
    $249 = HEAP32[$7>>2]|0;
    $250 = (($249) + 1)|0;
    HEAP32[$7>>2] = $250;
    $251 = HEAP32[$2>>2]|0;
    $252 = (($251) + -1)|0;
    HEAP32[$2>>2] = $252;
    $25 = $252;
    continue;
   }
   $187 = HEAP32[$6>>2]|0;
   $188 = HEAP32[$7>>2]|0;
   $189 = (($188) + -1)|0;
   $190 = (($187) + ($189)|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = HEAP32[$16>>2]|0;
   $193 = HEAP32[$17>>2]|0;
   $194 = (($192) + ($193<<1)|0);
   HEAP16[$194>>1] = 0;
   $195 = HEAP32[$18>>2]|0;
   $196 = (($193) + 1)|0;
   HEAP32[$17>>2] = $196;
   $197 = (($195) + ($193)|0);
   HEAP8[$197>>0] = $191;
   $198 = $191&255;
   $199 = (((($0)) + 148|0) + ($198<<2)|0);
   $200 = HEAP16[$199>>1]|0;
   $201 = (($200) + 1)<<16>>16;
   HEAP16[$199>>1] = $201;
   $202 = HEAP32[$17>>2]|0;
   $203 = HEAP32[$19>>2]|0;
   $204 = (($203) + -1)|0;
   $205 = ($202|0)==($204|0);
   if ($205) {
    $206 = HEAP32[$21>>2]|0;
    $207 = ($206|0)>(-1);
    if ($207) {
     $208 = HEAP32[$6>>2]|0;
     $209 = (($208) + ($206)|0);
     $212 = $209;
    } else {
     $212 = 0;
    }
    $210 = HEAP32[$7>>2]|0;
    $211 = (($210) - ($206))|0;
    __tr_flush_block($0,$212,$211,0);
    $213 = HEAP32[$7>>2]|0;
    HEAP32[$21>>2] = $213;
    $214 = HEAP32[$0>>2]|0;
    $215 = ((($214)) + 28|0);
    $216 = HEAP32[$215>>2]|0;
    __tr_flush_bits($216);
    $217 = ((($216)) + 20|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ((($214)) + 16|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = ($218>>>0)>($220>>>0);
    $$$i174 = $221 ? $220 : $218;
    $222 = ($$$i174|0)==(0);
    if (!($222)) {
     $223 = ((($214)) + 12|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = ((($216)) + 16|0);
     $226 = HEAP32[$225>>2]|0;
     _memcpy(($224|0),($226|0),($$$i174|0))|0;
     $227 = HEAP32[$223>>2]|0;
     $228 = (($227) + ($$$i174)|0);
     HEAP32[$223>>2] = $228;
     $229 = HEAP32[$225>>2]|0;
     $230 = (($229) + ($$$i174)|0);
     HEAP32[$225>>2] = $230;
     $231 = ((($214)) + 20|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (($232) + ($$$i174))|0;
     HEAP32[$231>>2] = $233;
     $234 = HEAP32[$219>>2]|0;
     $235 = (($234) - ($$$i174))|0;
     HEAP32[$219>>2] = $235;
     $236 = HEAP32[$217>>2]|0;
     $237 = (($236) - ($$$i174))|0;
     HEAP32[$217>>2] = $237;
     $238 = ($237|0)==(0);
     if ($238) {
      $239 = ((($216)) + 8|0);
      $240 = HEAP32[$239>>2]|0;
      HEAP32[$225>>2] = $240;
     }
    }
   }
   $241 = HEAP32[$7>>2]|0;
   $242 = (($241) + 1)|0;
   HEAP32[$7>>2] = $242;
   $243 = HEAP32[$2>>2]|0;
   $244 = (($243) + -1)|0;
   HEAP32[$2>>2] = $244;
   $245 = HEAP32[$0>>2]|0;
   $246 = ((($245)) + 16|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = ($247|0)==(0);
   if ($248) {
    $$2 = 0;
    label = 55;
    break L1;
   } else {
    $25 = $244;
   }
  }
  $77 = HEAP32[$7>>2]|0;
  $78 = HEAP32[$2>>2]|0;
  $79 = (($77) + -3)|0;
  $80 = (($79) + ($78))|0;
  $81 = (($73) + 253)|0;
  $82 = $81&255;
  $83 = (($77) + 65535)|0;
  $84 = HEAP32[$15>>2]|0;
  $85 = (($83) - ($84))|0;
  $86 = $85&65535;
  $87 = HEAP32[$16>>2]|0;
  $88 = HEAP32[$17>>2]|0;
  $89 = (($87) + ($88<<1)|0);
  HEAP16[$89>>1] = $86;
  $90 = HEAP32[$18>>2]|0;
  $91 = (($88) + 1)|0;
  HEAP32[$17>>2] = $91;
  $92 = (($90) + ($88)|0);
  HEAP8[$92>>0] = $82;
  $93 = (($85) + 65535)|0;
  $94 = $81 & 255;
  $95 = (17336 + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $97 | 256;
  $99 = (($98) + 1)|0;
  $100 = (((($0)) + 148|0) + ($99<<2)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = (($101) + 1)<<16>>16;
  HEAP16[$100>>1] = $102;
  $103 = $93 & 65535;
  $104 = ($103>>>0)<(256);
  $105 = $103 >>> 7;
  $106 = (($105) + 256)|0;
  $$sink = $104 ? $103 : $106;
  $107 = (16824 + ($$sink)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (((($0)) + 2440|0) + ($109<<2)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = (($111) + 1)<<16>>16;
  HEAP16[$110>>1] = $112;
  $113 = HEAP32[$17>>2]|0;
  $114 = HEAP32[$19>>2]|0;
  $115 = (($114) + -1)|0;
  $116 = HEAP32[$13>>2]|0;
  $117 = HEAP32[$2>>2]|0;
  $$neg182 = (1 - ($116))|0;
  $118 = (($$neg182) + ($117))|0;
  HEAP32[$2>>2] = $118;
  $119 = (($116) + -2)|0;
  HEAP32[$13>>2] = $119;
  $$pre = HEAP32[$7>>2]|0;
  $121 = $$pre;$143 = $119;
  while(1) {
   $120 = (($121) + 1)|0;
   HEAP32[$7>>2] = $120;
   $122 = ($120>>>0)>($80>>>0);
   if (!($122)) {
    $123 = HEAP32[$4>>2]|0;
    $124 = HEAP32[$5>>2]|0;
    $125 = $123 << $124;
    $126 = HEAP32[$6>>2]|0;
    $127 = (($121) + 3)|0;
    $128 = (($126) + ($127)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = $125 ^ $130;
    $132 = HEAP32[$8>>2]|0;
    $133 = $131 & $132;
    HEAP32[$4>>2] = $133;
    $134 = HEAP32[$9>>2]|0;
    $135 = (($134) + ($133<<1)|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = HEAP32[$10>>2]|0;
    $138 = HEAP32[$11>>2]|0;
    $139 = $138 & $120;
    $140 = (($137) + ($139<<1)|0);
    HEAP16[$140>>1] = $136;
    $141 = $120&65535;
    HEAP16[$135>>1] = $141;
   }
   $142 = (($143) + -1)|0;
   HEAP32[$13>>2] = $142;
   $144 = ($142|0)==(0);
   if ($144) {
    break;
   } else {
    $121 = $120;$143 = $142;
   }
  }
  $145 = ($113|0)==($115|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$12>>2] = 2;
  $146 = (($121) + 2)|0;
  HEAP32[$7>>2] = $146;
  if (!($145)) {
   continue;
  }
  $147 = HEAP32[$21>>2]|0;
  $148 = ($147|0)>(-1);
  if ($148) {
   $149 = HEAP32[$6>>2]|0;
   $150 = (($149) + ($147)|0);
   $152 = $150;
  } else {
   $152 = 0;
  }
  $151 = (($146) - ($147))|0;
  __tr_flush_block($0,$152,$151,0);
  $153 = HEAP32[$7>>2]|0;
  HEAP32[$21>>2] = $153;
  $154 = HEAP32[$0>>2]|0;
  $155 = ((($154)) + 28|0);
  $156 = HEAP32[$155>>2]|0;
  __tr_flush_bits($156);
  $157 = ((($156)) + 20|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ((($154)) + 16|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ($158>>>0)>($160>>>0);
  $$$i = $161 ? $160 : $158;
  $162 = ($$$i|0)==(0);
  if (!($162)) {
   $163 = ((($154)) + 12|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ((($156)) + 16|0);
   $166 = HEAP32[$165>>2]|0;
   _memcpy(($164|0),($166|0),($$$i|0))|0;
   $167 = HEAP32[$163>>2]|0;
   $168 = (($167) + ($$$i)|0);
   HEAP32[$163>>2] = $168;
   $169 = HEAP32[$165>>2]|0;
   $170 = (($169) + ($$$i)|0);
   HEAP32[$165>>2] = $170;
   $171 = ((($154)) + 20|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + ($$$i))|0;
   HEAP32[$171>>2] = $173;
   $174 = HEAP32[$159>>2]|0;
   $175 = (($174) - ($$$i))|0;
   HEAP32[$159>>2] = $175;
   $176 = HEAP32[$157>>2]|0;
   $177 = (($176) - ($$$i))|0;
   HEAP32[$157>>2] = $177;
   $178 = ($177|0)==(0);
   if ($178) {
    $179 = ((($156)) + 8|0);
    $180 = HEAP32[$179>>2]|0;
    HEAP32[$165>>2] = $180;
   }
  }
  $181 = HEAP32[$0>>2]|0;
  $182 = ((($181)) + 16|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)==(0);
  if ($184) {
   $$2 = 0;
   label = 55;
   break;
  }
 }
 if ((label|0) == 38) {
  $253 = HEAP32[$20>>2]|0;
  $254 = ($253|0)==(0);
  if (!($254)) {
   $255 = HEAP32[$6>>2]|0;
   $256 = HEAP32[$7>>2]|0;
   $257 = (($256) + -1)|0;
   $258 = (($255) + ($257)|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = HEAP32[$16>>2]|0;
   $261 = HEAP32[$17>>2]|0;
   $262 = (($260) + ($261<<1)|0);
   HEAP16[$262>>1] = 0;
   $263 = HEAP32[$18>>2]|0;
   $264 = (($261) + 1)|0;
   HEAP32[$17>>2] = $264;
   $265 = (($263) + ($261)|0);
   HEAP8[$265>>0] = $259;
   $266 = $259&255;
   $267 = (((($0)) + 148|0) + ($266<<2)|0);
   $268 = HEAP16[$267>>1]|0;
   $269 = (($268) + 1)<<16>>16;
   HEAP16[$267>>1] = $269;
   HEAP32[$20>>2] = 0;
  }
  $270 = HEAP32[$7>>2]|0;
  $271 = ($270>>>0)<(2);
  $$ = $271 ? $270 : 2;
  $272 = ((($0)) + 5812|0);
  HEAP32[$272>>2] = $$;
  $273 = ($1|0)==(4);
  if ($273) {
   $274 = HEAP32[$21>>2]|0;
   $275 = ($274|0)>(-1);
   if ($275) {
    $276 = HEAP32[$6>>2]|0;
    $277 = (($276) + ($274)|0);
    $279 = $277;
   } else {
    $279 = 0;
   }
   $278 = (($270) - ($274))|0;
   __tr_flush_block($0,$279,$278,1);
   $280 = HEAP32[$7>>2]|0;
   HEAP32[$21>>2] = $280;
   $281 = HEAP32[$0>>2]|0;
   $282 = ((($281)) + 28|0);
   $283 = HEAP32[$282>>2]|0;
   __tr_flush_bits($283);
   $284 = ((($283)) + 20|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ((($281)) + 16|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = ($285>>>0)>($287>>>0);
   $$$i176 = $288 ? $287 : $285;
   $289 = ($$$i176|0)==(0);
   if (!($289)) {
    $290 = ((($281)) + 12|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = ((($283)) + 16|0);
    $293 = HEAP32[$292>>2]|0;
    _memcpy(($291|0),($293|0),($$$i176|0))|0;
    $294 = HEAP32[$290>>2]|0;
    $295 = (($294) + ($$$i176)|0);
    HEAP32[$290>>2] = $295;
    $296 = HEAP32[$292>>2]|0;
    $297 = (($296) + ($$$i176)|0);
    HEAP32[$292>>2] = $297;
    $298 = ((($281)) + 20|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = (($299) + ($$$i176))|0;
    HEAP32[$298>>2] = $300;
    $301 = HEAP32[$286>>2]|0;
    $302 = (($301) - ($$$i176))|0;
    HEAP32[$286>>2] = $302;
    $303 = HEAP32[$284>>2]|0;
    $304 = (($303) - ($$$i176))|0;
    HEAP32[$284>>2] = $304;
    $305 = ($304|0)==(0);
    if ($305) {
     $306 = ((($283)) + 8|0);
     $307 = HEAP32[$306>>2]|0;
     HEAP32[$292>>2] = $307;
    }
   }
   $308 = HEAP32[$0>>2]|0;
   $309 = ((($308)) + 16|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = ($310|0)==(0);
   $$173 = $311 ? 2 : 3;
   $$2 = $$173;
   return ($$2|0);
  }
  $312 = HEAP32[$17>>2]|0;
  $313 = ($312|0)==(0);
  if (!($313)) {
   $314 = HEAP32[$21>>2]|0;
   $315 = ($314|0)>(-1);
   if ($315) {
    $316 = HEAP32[$6>>2]|0;
    $317 = (($316) + ($314)|0);
    $319 = $317;
   } else {
    $319 = 0;
   }
   $318 = (($270) - ($314))|0;
   __tr_flush_block($0,$319,$318,0);
   $320 = HEAP32[$7>>2]|0;
   HEAP32[$21>>2] = $320;
   $321 = HEAP32[$0>>2]|0;
   $322 = ((($321)) + 28|0);
   $323 = HEAP32[$322>>2]|0;
   __tr_flush_bits($323);
   $324 = ((($323)) + 20|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = ((($321)) + 16|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = ($325>>>0)>($327>>>0);
   $$$i178 = $328 ? $327 : $325;
   $329 = ($$$i178|0)==(0);
   if (!($329)) {
    $330 = ((($321)) + 12|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = ((($323)) + 16|0);
    $333 = HEAP32[$332>>2]|0;
    _memcpy(($331|0),($333|0),($$$i178|0))|0;
    $334 = HEAP32[$330>>2]|0;
    $335 = (($334) + ($$$i178)|0);
    HEAP32[$330>>2] = $335;
    $336 = HEAP32[$332>>2]|0;
    $337 = (($336) + ($$$i178)|0);
    HEAP32[$332>>2] = $337;
    $338 = ((($321)) + 20|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = (($339) + ($$$i178))|0;
    HEAP32[$338>>2] = $340;
    $341 = HEAP32[$326>>2]|0;
    $342 = (($341) - ($$$i178))|0;
    HEAP32[$326>>2] = $342;
    $343 = HEAP32[$324>>2]|0;
    $344 = (($343) - ($$$i178))|0;
    HEAP32[$324>>2] = $344;
    $345 = ($344|0)==(0);
    if ($345) {
     $346 = ((($323)) + 8|0);
     $347 = HEAP32[$346>>2]|0;
     HEAP32[$332>>2] = $347;
    }
   }
   $348 = HEAP32[$0>>2]|0;
   $349 = ((($348)) + 16|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)==(0);
   if ($351) {
    $$2 = 0;
    return ($$2|0);
   }
  }
  $$2 = 1;
  return ($$2|0);
 }
 else if ((label|0) == 55) {
  return ($$2|0);
 }
 return (0)|0;
}
function _fill_window($0) {
 $0 = $0|0;
 var $$ = 0, $$$i = 0, $$0123 = 0, $$0124 = 0, $$0125 = 0, $$0126 = 0, $$027$i = 0, $$1 = 0, $$1127 = 0, $$130 = 0, $$pre = 0, $$pre$phi$iZ2D = 0, $$pre135 = 0, $$pre136 = 0, $$sink = 0, $$sink$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 60|0);
 $4 = ((($0)) + 116|0);
 $5 = ((($0)) + 108|0);
 $6 = (($2) + -262)|0;
 $7 = ((($0)) + 56|0);
 $8 = ((($0)) + 5812|0);
 $9 = ((($0)) + 72|0);
 $10 = ((($0)) + 88|0);
 $11 = ((($0)) + 84|0);
 $12 = ((($0)) + 68|0);
 $13 = ((($0)) + 64|0);
 $14 = ((($0)) + 52|0);
 $15 = ((($0)) + 112|0);
 $16 = ((($0)) + 92|0);
 $17 = ((($0)) + 76|0);
 $$pre = HEAP32[$4>>2]|0;
 $20 = $$pre;$24 = $2;
 while(1) {
  $18 = HEAP32[$3>>2]|0;
  $19 = (($18) - ($20))|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = (($19) - ($21))|0;
  $23 = (($6) + ($24))|0;
  $25 = ($21>>>0)<($23>>>0);
  if ($25) {
   $$0125 = $22;$64 = $21;
  } else {
   $26 = HEAP32[$7>>2]|0;
   $27 = (($26) + ($2)|0);
   _memcpy(($26|0),($27|0),($2|0))|0;
   $28 = HEAP32[$15>>2]|0;
   $29 = (($28) - ($2))|0;
   HEAP32[$15>>2] = $29;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) - ($2))|0;
   HEAP32[$5>>2] = $31;
   $32 = HEAP32[$16>>2]|0;
   $33 = (($32) - ($2))|0;
   HEAP32[$16>>2] = $33;
   $34 = HEAP32[$17>>2]|0;
   $35 = HEAP32[$12>>2]|0;
   $36 = (($35) + ($34<<1)|0);
   $$0123 = $34;$$0126 = $36;
   while(1) {
    $37 = ((($$0126)) + -2|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $38&65535;
    $40 = ($2>>>0)>($39>>>0);
    $41 = (($39) - ($2))|0;
    $42 = $41&65535;
    $43 = $40 ? 0 : $42;
    HEAP16[$37>>1] = $43;
    $44 = (($$0123) + -1)|0;
    $45 = ($44|0)==(0);
    if ($45) {
     break;
    } else {
     $$0123 = $44;$$0126 = $37;
    }
   }
   $46 = HEAP32[$13>>2]|0;
   $47 = (($46) + ($2<<1)|0);
   $$1 = $2;$$1127 = $47;
   while(1) {
    $48 = ((($$1127)) + -2|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49&65535;
    $51 = ($2>>>0)>($50>>>0);
    $52 = (($50) - ($2))|0;
    $53 = $52&65535;
    $54 = $51 ? 0 : $53;
    HEAP16[$48>>1] = $54;
    $55 = (($$1) + -1)|0;
    $56 = ($55|0)==(0);
    if ($56) {
     break;
    } else {
     $$1 = $55;$$1127 = $48;
    }
   }
   $57 = (($22) + ($2))|0;
   $$0125 = $57;$64 = $31;
  }
  $58 = HEAP32[$0>>2]|0;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(0);
  if ($61) {
   break;
  }
  $62 = HEAP32[$7>>2]|0;
  $63 = (($62) + ($64)|0);
  $65 = HEAP32[$4>>2]|0;
  $66 = (($63) + ($65)|0);
  $67 = ($60>>>0)>($$0125>>>0);
  $$$i = $67 ? $$0125 : $60;
  $68 = ($$$i|0)==(0);
  if ($68) {
   $$027$i = 0;$87 = $65;
  } else {
   $69 = (($60) - ($$$i))|0;
   HEAP32[$59>>2] = $69;
   $70 = HEAP32[$58>>2]|0;
   _memcpy(($66|0),($70|0),($$$i|0))|0;
   $71 = ((($58)) + 28|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($72)) + 24|0);
   $74 = HEAP32[$73>>2]|0;
   switch ($74|0) {
   case 1:  {
    $75 = ((($58)) + 48|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (_adler32($76,$66,$$$i)|0);
    $$pre$phi$iZ2D = $75;$$sink$i = $77;
    label = 13;
    break;
   }
   case 2:  {
    $78 = ((($58)) + 48|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_crc32($79,$66,$$$i)|0);
    $$pre$phi$iZ2D = $78;$$sink$i = $80;
    label = 13;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 13) {
    label = 0;
    HEAP32[$$pre$phi$iZ2D>>2] = $$sink$i;
   }
   $81 = HEAP32[$58>>2]|0;
   $82 = (($81) + ($$$i)|0);
   HEAP32[$58>>2] = $82;
   $83 = ((($58)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($$$i))|0;
   HEAP32[$83>>2] = $85;
   $$pre136 = HEAP32[$4>>2]|0;
   $$027$i = $$$i;$87 = $$pre136;
  }
  $86 = (($87) + ($$027$i))|0;
  HEAP32[$4>>2] = $86;
  $88 = HEAP32[$8>>2]|0;
  $89 = (($88) + ($86))|0;
  $90 = ($89>>>0)>(2);
  L22: do {
   if ($90) {
    $91 = HEAP32[$5>>2]|0;
    $92 = (($91) - ($88))|0;
    $93 = HEAP32[$7>>2]|0;
    $94 = (($93) + ($92)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    HEAP32[$9>>2] = $96;
    $97 = HEAP32[$10>>2]|0;
    $98 = $96 << $97;
    $99 = (($92) + 1)|0;
    $100 = (($93) + ($99)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $103 = $98 ^ $102;
    $104 = HEAP32[$11>>2]|0;
    $105 = $103 & $104;
    HEAP32[$9>>2] = $105;
    $$0124 = $92;$106 = $88;$109 = $105;
    while(1) {
     $107 = ($106|0)==(0);
     if ($107) {
      break L22;
     }
     $108 = $109 << $97;
     $110 = (($$0124) + 2)|0;
     $111 = (($93) + ($110)|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = $108 ^ $113;
     $115 = $114 & $104;
     HEAP32[$9>>2] = $115;
     $116 = HEAP32[$12>>2]|0;
     $117 = (($116) + ($115<<1)|0);
     $118 = HEAP16[$117>>1]|0;
     $119 = HEAP32[$13>>2]|0;
     $120 = HEAP32[$14>>2]|0;
     $121 = $120 & $$0124;
     $122 = (($119) + ($121<<1)|0);
     HEAP16[$122>>1] = $118;
     $123 = $$0124&65535;
     HEAP16[$117>>1] = $123;
     $124 = (($$0124) + 1)|0;
     $125 = (($106) + -1)|0;
     HEAP32[$8>>2] = $125;
     $126 = (($86) + ($125))|0;
     $127 = ($126>>>0)<(3);
     if ($127) {
      break;
     } else {
      $$0124 = $124;$106 = $125;$109 = $115;
     }
    }
   }
  } while(0);
  $128 = ($86>>>0)<(262);
  if (!($128)) {
   break;
  }
  $129 = HEAP32[$0>>2]|0;
  $130 = ((($129)) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($131|0)==(0);
  if ($132) {
   break;
  }
  $$pre135 = HEAP32[$1>>2]|0;
  $20 = $86;$24 = $$pre135;
 }
 $133 = ((($0)) + 5824|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = HEAP32[$3>>2]|0;
 $136 = ($135>>>0)>($134>>>0);
 if (!($136)) {
  return;
 }
 $137 = HEAP32[$5>>2]|0;
 $138 = HEAP32[$4>>2]|0;
 $139 = (($138) + ($137))|0;
 $140 = ($134>>>0)<($139>>>0);
 do {
  if ($140) {
   $141 = (($135) - ($139))|0;
   $142 = ($141>>>0)<(258);
   $$ = $142 ? $141 : 258;
   $143 = HEAP32[$7>>2]|0;
   $144 = (($143) + ($139)|0);
   _memset(($144|0),0,($$|0))|0;
   $145 = (($$) + ($139))|0;
   $$sink = $145;
  } else {
   $146 = (($139) + 258)|0;
   $147 = ($146>>>0)>($134>>>0);
   if ($147) {
    $148 = (($146) - ($134))|0;
    $149 = (($135) - ($134))|0;
    $150 = ($148>>>0)>($149>>>0);
    $$130 = $150 ? $149 : $148;
    $151 = HEAP32[$7>>2]|0;
    $152 = (($151) + ($134)|0);
    _memset(($152|0),0,($$130|0))|0;
    $153 = HEAP32[$133>>2]|0;
    $154 = (($153) + ($$130))|0;
    $$sink = $154;
    break;
   } else {
    return;
   }
  }
 } while(0);
 HEAP32[$133>>2] = $$sink;
 return;
}
function _longest_match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$2116 = 0, $$0 = 0, $$0105 = 0, $$0108 = 0, $$0109 = 0, $$0114 = 0, $$1 = 0, $$1106 = 0, $$1110 = 0, $$1112$add = 0, $$1112$idx = 0, $$1112$ptr = 0, $$1115 = 0, $$118 = 0, $$2 = 0, $$2116 = 0, $$ptr = 0, $$ptr120 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 108|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 $9 = ((($0)) + 120|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 144|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -262)|0;
 $16 = ($7>>>0)>($15>>>0);
 $17 = (($7) - ($15))|0;
 $$ = $16 ? $17 : 0;
 $18 = ((($0)) + 64|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $$ptr120 = ((($8)) + 258|0);
 $22 = (($10) + -1)|0;
 $23 = (($8) + ($22)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = (($8) + ($10)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ((($0)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($10>>>0)<($28>>>0);
 $30 = $3 >>> 2;
 $$0109 = $29 ? $3 : $30;
 $31 = ((($0)) + 116|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($12>>>0)>($32>>>0);
 $$118 = $33 ? $32 : $12;
 $34 = ((($0)) + 112|0);
 $35 = ((($8)) + 1|0);
 $36 = $$ptr120;
 $$0 = $26;$$0105 = $24;$$0108 = $1;$$0114 = $10;$$1110 = $$0109;
 while(1) {
  $37 = (($5) + ($$0108)|0);
  $38 = (($37) + ($$0114)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==($$0<<24>>24);
  if ($40) {
   $41 = (($$0114) + -1)|0;
   $42 = (($37) + ($41)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==($$0105<<24>>24);
   if ($44) {
    $45 = HEAP8[$37>>0]|0;
    $46 = HEAP8[$8>>0]|0;
    $47 = ($45<<24>>24)==($46<<24>>24);
    if ($47) {
     $48 = ((($37)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = HEAP8[$35>>0]|0;
     $51 = ($49<<24>>24)==($50<<24>>24);
     if ($51) {
      $$1112$idx = 2;$55 = $48;
      while(1) {
       $$1112$ptr = (($8) + ($$1112$idx)|0);
       $52 = ((($$1112$ptr)) + 1|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = ((($55)) + 2|0);
       $56 = HEAP8[$54>>0]|0;
       $57 = ($53<<24>>24)==($56<<24>>24);
       if (!($57)) {
        $$2 = $52;
        break;
       }
       $58 = ((($$1112$ptr)) + 2|0);
       $59 = HEAP8[$58>>0]|0;
       $60 = ((($55)) + 3|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = ($59<<24>>24)==($61<<24>>24);
       if (!($62)) {
        $$2 = $58;
        break;
       }
       $63 = ((($$1112$ptr)) + 3|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = ((($55)) + 4|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = ($64<<24>>24)==($66<<24>>24);
       if (!($67)) {
        $$2 = $63;
        break;
       }
       $68 = ((($$1112$ptr)) + 4|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ((($55)) + 5|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($69<<24>>24)==($71<<24>>24);
       if (!($72)) {
        $$2 = $68;
        break;
       }
       $73 = ((($$1112$ptr)) + 5|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = ((($55)) + 6|0);
       $76 = HEAP8[$75>>0]|0;
       $77 = ($74<<24>>24)==($76<<24>>24);
       if (!($77)) {
        $$2 = $73;
        break;
       }
       $78 = ((($$1112$ptr)) + 6|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = ((($55)) + 7|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = ($79<<24>>24)==($81<<24>>24);
       if (!($82)) {
        $$2 = $78;
        break;
       }
       $83 = ((($$1112$ptr)) + 7|0);
       $84 = HEAP8[$83>>0]|0;
       $85 = ((($55)) + 8|0);
       $86 = HEAP8[$85>>0]|0;
       $87 = ($84<<24>>24)==($86<<24>>24);
       if (!($87)) {
        $$2 = $83;
        break;
       }
       $$1112$add = (($$1112$idx) + 8)|0;
       $$ptr = (($8) + ($$1112$add)|0);
       $88 = HEAP8[$$ptr>>0]|0;
       $89 = ((($55)) + 9|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = ($88<<24>>24)==($90<<24>>24);
       $92 = ($$1112$idx|0)<(250);
       $or$cond = $92 & $91;
       if ($or$cond) {
        $$1112$idx = $$1112$add;$55 = $85;
       } else {
        $$2 = $$ptr;
        break;
       }
      }
      $93 = $$2;
      $94 = (($93) - ($36))|0;
      $95 = (($94) + 258)|0;
      $96 = ($95|0)>($$0114|0);
      if ($96) {
       HEAP32[$34>>2] = $$0108;
       $97 = ($95|0)<($$118|0);
       if (!($97)) {
        $$2116 = $95;
        label = 19;
        break;
       }
       $98 = (($94) + 257)|0;
       $99 = (($8) + ($98)|0);
       $100 = HEAP8[$99>>0]|0;
       $101 = (($8) + ($95)|0);
       $102 = HEAP8[$101>>0]|0;
       $$1 = $102;$$1106 = $100;$$1115 = $95;
      } else {
       $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
      }
     } else {
      $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
     }
    } else {
     $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
    }
   } else {
    $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
   }
  } else {
   $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
  }
  $103 = $$0108 & $21;
  $104 = (($19) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105&65535;
  $107 = ($$>>>0)<($106>>>0);
  if (!($107)) {
   $$2116 = $$1115;
   label = 19;
   break;
  }
  $108 = (($$1110) + -1)|0;
  $109 = ($108|0)==(0);
  if ($109) {
   $$2116 = $$1115;
   label = 19;
   break;
  } else {
   $$0 = $$1;$$0105 = $$1106;$$0108 = $106;$$0114 = $$1115;$$1110 = $108;
  }
 }
 if ((label|0) == 19) {
  $110 = ($$2116>>>0)>($32>>>0);
  $$$2116 = $110 ? $32 : $$2116;
  return ($$$2116|0);
 }
 return (0)|0;
}
function _deflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$366 = 0, $$$i = 0, $$$i$i = 0, $$$i$i389 = 0, $$$i139$i = 0, $$$i141$i = 0, $$$i372 = 0, $$$i374 = 0, $$$i376 = 0, $$$i378 = 0, $$$i380 = 0, $$$i382 = 0, $$$i384 = 0, $$$i388 = 0, $$$i52$i = 0, $$$i54$i = 0, $$0352 = 0, $$0353 = 0, $$0355 = 0;
 var $$0356 = 0, $$0359410 = 0, $$0362 = 0, $$1 = 0, $$1$i = 0, $$1354 = 0, $$1357 = 0, $$1360 = 0, $$138$i = 0, $$2 = 0, $$2358 = 0, $$2361 = 0, $$365 = 0, $$366 = 0, $$367 = 0, $$add$i = 0, $$add131$i = 0, $$idx$i = 0, $$phi$trans$insert = 0, $$pr = 0;
 var $$pr$i = 0, $$pr$i385 = 0, $$pr392 = 0, $$pr392$pre = 0, $$pr393 = 0, $$pr397 = 0, $$pr397$pre = 0, $$pre = 0, $$pre$i = 0, $$pre$phi438Z2D = 0, $$pre$phi440Z2D = 0, $$pre$phiZ2D = 0, $$pre416 = 0, $$pre419 = 0, $$pre420$pre = 0, $$pre421 = 0, $$pre424 = 0, $$pre426 = 0, $$pre428 = 0, $$pre437 = 0;
 var $$pre439 = 0, $$pre441 = 0, $$ptr$i = 0, $$ptr132$i = 0, $$ptr133$i = 0, $$ptr134$i = 0, $$ptr136$i = 0, $$sink = 0, $$sink405 = 0, $$sink405$in = 0, $$sink406 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
 var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
 var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0;
 var $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0;
 var $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0;
 var $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0;
 var $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $brmerge = 0, $or$cond = 0, $or$cond$i = 0, $or$cond11 = 0, $or$cond137$i = 0, $or$cond368 = 0, $or$cond369 = 0, $or$cond448 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$1 = -2;
  return ($$1|0);
 }
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($1>>>0)>(5);
 $7 = $6 | $5;
 if ($7) {
  $$1 = -2;
  return ($$1|0);
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 do {
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if (!($15)) {
     break;
    }
   }
   $16 = ((($4)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(666);
   $19 = ($1|0)!=(4);
   $or$cond5 = $19 & $18;
   if (!($or$cond5)) {
    $22 = ((($0)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0);
    if ($24) {
     $25 = HEAP32[(100)>>2]|0;
     $26 = ((($0)) + 24|0);
     HEAP32[$26>>2] = $25;
     $$1 = -5;
     return ($$1|0);
    }
    HEAP32[$4>>2] = $0;
    $27 = ((($4)) + 40|0);
    $28 = HEAP32[$27>>2]|0;
    HEAP32[$27>>2] = $1;
    $29 = ($17|0)==(42);
    do {
     if ($29) {
      $30 = ((($4)) + 24|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(2);
      if (!($32)) {
       $204 = ((($4)) + 48|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $205 << 12;
       $207 = (($206) + -30720)|0;
       $208 = ((($4)) + 136|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = ($209|0)>(1);
       if ($210) {
        $$0362 = 0;
       } else {
        $211 = ((($4)) + 132|0);
        $212 = HEAP32[$211>>2]|0;
        $213 = ($212|0)<(2);
        if ($213) {
         $$0362 = 0;
        } else {
         $214 = ($212|0)<(6);
         $215 = ($212|0)==(6);
         $$366 = $215 ? 128 : 192;
         $$$366 = $214 ? 64 : $$366;
         $$0362 = $$$366;
        }
       }
       $216 = $$0362 | $207;
       $217 = ((($4)) + 108|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = ($218|0)==(0);
       $220 = $216 | 32;
       $$367 = $219 ? $216 : $220;
       $221 = (($$367>>>0) % 31)&-1;
       $222 = $221 ^ 31;
       $223 = (($222) + ($$367))|0;
       HEAP32[$16>>2] = 113;
       $224 = $223 >>> 8;
       $225 = $224&255;
       $226 = ((($4)) + 8|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = ((($4)) + 20|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = (($229) + 1)|0;
       HEAP32[$228>>2] = $230;
       $231 = (($227) + ($229)|0);
       HEAP8[$231>>0] = $225;
       $232 = $223&255;
       $233 = HEAP32[$226>>2]|0;
       $234 = HEAP32[$228>>2]|0;
       $235 = (($234) + 1)|0;
       HEAP32[$228>>2] = $235;
       $236 = (($233) + ($234)|0);
       HEAP8[$236>>0] = $232;
       $237 = HEAP32[$217>>2]|0;
       $238 = ($237|0)==(0);
       $$pre441 = ((($0)) + 48|0);
       if (!($238)) {
        $239 = HEAP32[$$pre441>>2]|0;
        $240 = $239 >>> 16;
        $241 = $239 >>> 24;
        $242 = $241&255;
        $243 = HEAP32[$226>>2]|0;
        $244 = HEAP32[$228>>2]|0;
        $245 = (($244) + 1)|0;
        HEAP32[$228>>2] = $245;
        $246 = (($243) + ($244)|0);
        HEAP8[$246>>0] = $242;
        $247 = $240&255;
        $248 = HEAP32[$226>>2]|0;
        $249 = HEAP32[$228>>2]|0;
        $250 = (($249) + 1)|0;
        HEAP32[$228>>2] = $250;
        $251 = (($248) + ($249)|0);
        HEAP8[$251>>0] = $247;
        $252 = HEAP32[$$pre441>>2]|0;
        $253 = $252 >>> 8;
        $254 = $253&255;
        $255 = HEAP32[$226>>2]|0;
        $256 = HEAP32[$228>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$228>>2] = $257;
        $258 = (($255) + ($256)|0);
        HEAP8[$258>>0] = $254;
        $259 = $252&255;
        $260 = HEAP32[$226>>2]|0;
        $261 = HEAP32[$228>>2]|0;
        $262 = (($261) + 1)|0;
        HEAP32[$228>>2] = $262;
        $263 = (($260) + ($261)|0);
        HEAP8[$263>>0] = $259;
       }
       $264 = (_adler32(0,0,0)|0);
       HEAP32[$$pre441>>2] = $264;
       $$pr = HEAP32[$16>>2]|0;
       $265 = $$pr;
       break;
      }
      $33 = (_crc32(0,0,0)|0);
      $34 = ((($0)) + 48|0);
      HEAP32[$34>>2] = $33;
      $35 = ((($4)) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($4)) + 20|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($38) + 1)|0;
      HEAP32[$37>>2] = $39;
      $40 = (($36) + ($38)|0);
      HEAP8[$40>>0] = 31;
      $41 = HEAP32[$35>>2]|0;
      $42 = HEAP32[$37>>2]|0;
      $43 = (($42) + 1)|0;
      HEAP32[$37>>2] = $43;
      $44 = (($41) + ($42)|0);
      HEAP8[$44>>0] = -117;
      $45 = HEAP32[$35>>2]|0;
      $46 = HEAP32[$37>>2]|0;
      $47 = (($46) + 1)|0;
      HEAP32[$37>>2] = $47;
      $48 = (($45) + ($46)|0);
      HEAP8[$48>>0] = 8;
      $49 = ((($4)) + 28|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0|0);
      if ($51) {
       $52 = HEAP32[$35>>2]|0;
       $53 = HEAP32[$37>>2]|0;
       $54 = (($53) + 1)|0;
       HEAP32[$37>>2] = $54;
       $55 = (($52) + ($53)|0);
       HEAP8[$55>>0] = 0;
       $56 = HEAP32[$35>>2]|0;
       $57 = HEAP32[$37>>2]|0;
       $58 = (($57) + 1)|0;
       HEAP32[$37>>2] = $58;
       $59 = (($56) + ($57)|0);
       HEAP8[$59>>0] = 0;
       $60 = HEAP32[$35>>2]|0;
       $61 = HEAP32[$37>>2]|0;
       $62 = (($61) + 1)|0;
       HEAP32[$37>>2] = $62;
       $63 = (($60) + ($61)|0);
       HEAP8[$63>>0] = 0;
       $64 = HEAP32[$35>>2]|0;
       $65 = HEAP32[$37>>2]|0;
       $66 = (($65) + 1)|0;
       HEAP32[$37>>2] = $66;
       $67 = (($64) + ($65)|0);
       HEAP8[$67>>0] = 0;
       $68 = HEAP32[$35>>2]|0;
       $69 = HEAP32[$37>>2]|0;
       $70 = (($69) + 1)|0;
       HEAP32[$37>>2] = $70;
       $71 = (($68) + ($69)|0);
       HEAP8[$71>>0] = 0;
       $72 = ((($4)) + 132|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($73|0)==(9);
       if ($74) {
        $81 = 2;
       } else {
        $75 = ($73|0)<(2);
        $76 = ((($4)) + 136|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ($77|0)>(1);
        $$ = $75 | $78;
        $79 = $$ ? 4 : 0;
        $81 = $79;
       }
       $80 = $81&255;
       $82 = HEAP32[$35>>2]|0;
       $83 = HEAP32[$37>>2]|0;
       $84 = (($83) + 1)|0;
       HEAP32[$37>>2] = $84;
       $85 = (($82) + ($83)|0);
       HEAP8[$85>>0] = $80;
       $86 = HEAP32[$35>>2]|0;
       $87 = HEAP32[$37>>2]|0;
       $88 = (($87) + 1)|0;
       HEAP32[$37>>2] = $88;
       $89 = (($86) + ($87)|0);
       HEAP8[$89>>0] = 3;
       $$sink = 113;
      } else {
       $90 = HEAP32[$50>>2]|0;
       $91 = ($90|0)!=(0);
       $92 = $91&1;
       $93 = ((($50)) + 44|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($94|0)!=(0);
       $96 = $95 ? 2 : 0;
       $97 = $96 | $92;
       $98 = ((($50)) + 16|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ($99|0)==(0|0);
       $101 = $100 ? 0 : 4;
       $102 = $97 | $101;
       $103 = ((($50)) + 28|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($104|0)==(0|0);
       $106 = $105 ? 0 : 8;
       $107 = $102 | $106;
       $108 = ((($50)) + 36|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==(0|0);
       $111 = $110 ? 0 : 16;
       $112 = $107 | $111;
       $113 = $112&255;
       $114 = HEAP32[$35>>2]|0;
       $115 = HEAP32[$37>>2]|0;
       $116 = (($115) + 1)|0;
       HEAP32[$37>>2] = $116;
       $117 = (($114) + ($115)|0);
       HEAP8[$117>>0] = $113;
       $118 = HEAP32[$49>>2]|0;
       $119 = ((($118)) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $120&255;
       $122 = HEAP32[$35>>2]|0;
       $123 = HEAP32[$37>>2]|0;
       $124 = (($123) + 1)|0;
       HEAP32[$37>>2] = $124;
       $125 = (($122) + ($123)|0);
       HEAP8[$125>>0] = $121;
       $126 = HEAP32[$49>>2]|0;
       $127 = ((($126)) + 4|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $128 >>> 8;
       $130 = $129&255;
       $131 = HEAP32[$35>>2]|0;
       $132 = HEAP32[$37>>2]|0;
       $133 = (($132) + 1)|0;
       HEAP32[$37>>2] = $133;
       $134 = (($131) + ($132)|0);
       HEAP8[$134>>0] = $130;
       $135 = HEAP32[$49>>2]|0;
       $136 = ((($135)) + 4|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = $137 >>> 16;
       $139 = $138&255;
       $140 = HEAP32[$35>>2]|0;
       $141 = HEAP32[$37>>2]|0;
       $142 = (($141) + 1)|0;
       HEAP32[$37>>2] = $142;
       $143 = (($140) + ($141)|0);
       HEAP8[$143>>0] = $139;
       $144 = HEAP32[$49>>2]|0;
       $145 = ((($144)) + 4|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = $146 >>> 24;
       $148 = $147&255;
       $149 = HEAP32[$35>>2]|0;
       $150 = HEAP32[$37>>2]|0;
       $151 = (($150) + 1)|0;
       HEAP32[$37>>2] = $151;
       $152 = (($149) + ($150)|0);
       HEAP8[$152>>0] = $148;
       $153 = ((($4)) + 132|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($154|0)==(9);
       if ($155) {
        $162 = 2;
       } else {
        $156 = ($154|0)<(2);
        $157 = ((($4)) + 136|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = ($158|0)>(1);
        $$365 = $156 | $159;
        $160 = $$365 ? 4 : 0;
        $162 = $160;
       }
       $161 = $162&255;
       $163 = HEAP32[$35>>2]|0;
       $164 = HEAP32[$37>>2]|0;
       $165 = (($164) + 1)|0;
       HEAP32[$37>>2] = $165;
       $166 = (($163) + ($164)|0);
       HEAP8[$166>>0] = $161;
       $167 = HEAP32[$49>>2]|0;
       $168 = ((($167)) + 12|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = $169&255;
       $171 = HEAP32[$35>>2]|0;
       $172 = HEAP32[$37>>2]|0;
       $173 = (($172) + 1)|0;
       HEAP32[$37>>2] = $173;
       $174 = (($171) + ($172)|0);
       HEAP8[$174>>0] = $170;
       $175 = HEAP32[$49>>2]|0;
       $176 = ((($175)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $196 = $175;
       } else {
        $179 = ((($175)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = $180&255;
        $182 = HEAP32[$35>>2]|0;
        $183 = HEAP32[$37>>2]|0;
        $184 = (($183) + 1)|0;
        HEAP32[$37>>2] = $184;
        $185 = (($182) + ($183)|0);
        HEAP8[$185>>0] = $181;
        $186 = HEAP32[$49>>2]|0;
        $187 = ((($186)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = $188 >>> 8;
        $190 = $189&255;
        $191 = HEAP32[$35>>2]|0;
        $192 = HEAP32[$37>>2]|0;
        $193 = (($192) + 1)|0;
        HEAP32[$37>>2] = $193;
        $194 = (($191) + ($192)|0);
        HEAP8[$194>>0] = $190;
        $$pre = HEAP32[$49>>2]|0;
        $196 = $$pre;
       }
       $195 = ((($196)) + 44|0);
       $197 = HEAP32[$195>>2]|0;
       $198 = ($197|0)==(0);
       if (!($198)) {
        $199 = HEAP32[$34>>2]|0;
        $200 = HEAP32[$35>>2]|0;
        $201 = HEAP32[$37>>2]|0;
        $202 = (_crc32($199,$200,$201)|0);
        HEAP32[$34>>2] = $202;
       }
       $203 = ((($4)) + 32|0);
       HEAP32[$203>>2] = 0;
       $$sink = 69;
      }
      HEAP32[$16>>2] = $$sink;
      $265 = $$sink;
     } else {
      $265 = $17;
     }
    } while(0);
    $266 = ($265|0)==(69);
    L46: do {
     if ($266) {
      $267 = ((($4)) + 28|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = ((($268)) + 16|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = ($270|0)==(0|0);
      do {
       if ($271) {
        $1171 = $268;
       } else {
        $272 = ((($4)) + 20|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ((($4)) + 32|0);
        $275 = HEAP32[$274>>2]|0;
        $276 = ((($268)) + 20|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = $277 & 65535;
        $279 = ($275>>>0)<($278>>>0);
        L50: do {
         if ($279) {
          $280 = ((($4)) + 12|0);
          $281 = ((($0)) + 48|0);
          $282 = ((($4)) + 8|0);
          $283 = ((($0)) + 20|0);
          $$0359410 = $273;$1172 = $275;$285 = $273;$288 = $268;
          while(1) {
           $284 = HEAP32[$280>>2]|0;
           $286 = ($285|0)==($284|0);
           if ($286) {
            $287 = ((($288)) + 44|0);
            $289 = HEAP32[$287>>2]|0;
            $290 = ($289|0)!=(0);
            $291 = ($285>>>0)>($$0359410>>>0);
            $or$cond = $291 & $290;
            if ($or$cond) {
             $292 = HEAP32[$281>>2]|0;
             $293 = HEAP32[$282>>2]|0;
             $294 = (($293) + ($$0359410)|0);
             $295 = (($285) - ($$0359410))|0;
             $296 = (_crc32($292,$294,$295)|0);
             HEAP32[$281>>2] = $296;
            }
            $297 = HEAP32[$3>>2]|0;
            __tr_flush_bits($297);
            $298 = ((($297)) + 20|0);
            $299 = HEAP32[$298>>2]|0;
            $300 = HEAP32[$22>>2]|0;
            $301 = ($299>>>0)>($300>>>0);
            $$$i374 = $301 ? $300 : $299;
            $302 = ($$$i374|0)==(0);
            do {
             if (!($302)) {
              $303 = HEAP32[$8>>2]|0;
              $304 = ((($297)) + 16|0);
              $305 = HEAP32[$304>>2]|0;
              _memcpy(($303|0),($305|0),($$$i374|0))|0;
              $306 = HEAP32[$8>>2]|0;
              $307 = (($306) + ($$$i374)|0);
              HEAP32[$8>>2] = $307;
              $308 = HEAP32[$304>>2]|0;
              $309 = (($308) + ($$$i374)|0);
              HEAP32[$304>>2] = $309;
              $310 = HEAP32[$283>>2]|0;
              $311 = (($310) + ($$$i374))|0;
              HEAP32[$283>>2] = $311;
              $312 = HEAP32[$22>>2]|0;
              $313 = (($312) - ($$$i374))|0;
              HEAP32[$22>>2] = $313;
              $314 = HEAP32[$298>>2]|0;
              $315 = (($314) - ($$$i374))|0;
              HEAP32[$298>>2] = $315;
              $316 = ($315|0)==(0);
              if (!($316)) {
               break;
              }
              $317 = ((($297)) + 8|0);
              $318 = HEAP32[$317>>2]|0;
              HEAP32[$304>>2] = $318;
             }
            } while(0);
            $319 = HEAP32[$272>>2]|0;
            $320 = HEAP32[$280>>2]|0;
            $321 = ($319|0)==($320|0);
            $$pre420$pre = HEAP32[$267>>2]|0;
            if ($321) {
             $$2361 = $319;$340 = $$pre420$pre;
             break L50;
            }
            $$pre419 = HEAP32[$274>>2]|0;
            $$1360 = $319;$323 = $$pre420$pre;$326 = $$pre419;$330 = $319;
           } else {
            $$1360 = $$0359410;$323 = $288;$326 = $1172;$330 = $285;
           }
           $322 = ((($323)) + 16|0);
           $324 = HEAP32[$322>>2]|0;
           $325 = (($324) + ($326)|0);
           $327 = HEAP8[$325>>0]|0;
           $328 = HEAP32[$282>>2]|0;
           $329 = (($330) + 1)|0;
           HEAP32[$272>>2] = $329;
           $331 = (($328) + ($330)|0);
           HEAP8[$331>>0] = $327;
           $332 = HEAP32[$274>>2]|0;
           $333 = (($332) + 1)|0;
           HEAP32[$274>>2] = $333;
           $334 = HEAP32[$267>>2]|0;
           $335 = ((($334)) + 20|0);
           $336 = HEAP32[$335>>2]|0;
           $337 = $336 & 65535;
           $338 = ($333>>>0)<($337>>>0);
           if (!($338)) {
            $$2361 = $$1360;$340 = $334;
            break L50;
           }
           $$pre416 = HEAP32[$272>>2]|0;
           $$0359410 = $$1360;$1172 = $333;$285 = $$pre416;$288 = $334;
          }
         } else {
          $$2361 = $273;$340 = $268;
         }
        } while(0);
        $339 = ((($340)) + 44|0);
        $341 = HEAP32[$339>>2]|0;
        $342 = ($341|0)==(0);
        if ($342) {
         $354 = $340;
        } else {
         $343 = HEAP32[$272>>2]|0;
         $344 = ($343>>>0)>($$2361>>>0);
         if ($344) {
          $345 = ((($0)) + 48|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ((($4)) + 8|0);
          $348 = HEAP32[$347>>2]|0;
          $349 = (($348) + ($$2361)|0);
          $350 = (($343) - ($$2361))|0;
          $351 = (_crc32($346,$349,$350)|0);
          HEAP32[$345>>2] = $351;
          $$pre421 = HEAP32[$267>>2]|0;
          $354 = $$pre421;
         } else {
          $354 = $340;
         }
        }
        $352 = HEAP32[$274>>2]|0;
        $353 = ((($354)) + 20|0);
        $355 = HEAP32[$353>>2]|0;
        $356 = ($352|0)==($355|0);
        if ($356) {
         HEAP32[$274>>2] = 0;
         $1171 = $354;
         break;
        } else {
         $$pr392$pre = HEAP32[$16>>2]|0;
         $$pr392 = $$pr392$pre;
         label = 50;
         break L46;
        }
       }
      } while(0);
      HEAP32[$16>>2] = 73;
      $$pre$phiZ2D = $267;$359 = $1171;
      label = 53;
     } else {
      $$pr392 = $265;
      label = 50;
     }
    } while(0);
    if ((label|0) == 50) {
     $357 = ($$pr392|0)==(73);
     if ($357) {
      $$phi$trans$insert = ((($4)) + 28|0);
      $$pre424 = HEAP32[$$phi$trans$insert>>2]|0;
      $$pre$phiZ2D = $$phi$trans$insert;$359 = $$pre424;
      label = 53;
     } else {
      $432 = $$pr392;
      label = 70;
     }
    }
    L78: do {
     if ((label|0) == 53) {
      $358 = ((($359)) + 28|0);
      $360 = HEAP32[$358>>2]|0;
      $361 = ($360|0)==(0|0);
      do {
       if (!($361)) {
        $362 = ((($4)) + 20|0);
        $363 = HEAP32[$362>>2]|0;
        $364 = ((($4)) + 12|0);
        $365 = ((($0)) + 48|0);
        $366 = ((($4)) + 8|0);
        $367 = ((($0)) + 20|0);
        $368 = ((($4)) + 32|0);
        $$0356 = $363;$370 = $363;
        while(1) {
         $369 = HEAP32[$364>>2]|0;
         $371 = ($370|0)==($369|0);
         if ($371) {
          $372 = HEAP32[$$pre$phiZ2D>>2]|0;
          $373 = ((($372)) + 44|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)!=(0);
          $376 = ($370>>>0)>($$0356>>>0);
          $or$cond368 = $376 & $375;
          if ($or$cond368) {
           $377 = HEAP32[$365>>2]|0;
           $378 = HEAP32[$366>>2]|0;
           $379 = (($378) + ($$0356)|0);
           $380 = (($370) - ($$0356))|0;
           $381 = (_crc32($377,$379,$380)|0);
           HEAP32[$365>>2] = $381;
          }
          $382 = HEAP32[$3>>2]|0;
          __tr_flush_bits($382);
          $383 = ((($382)) + 20|0);
          $384 = HEAP32[$383>>2]|0;
          $385 = HEAP32[$22>>2]|0;
          $386 = ($384>>>0)>($385>>>0);
          $$$i376 = $386 ? $385 : $384;
          $387 = ($$$i376|0)==(0);
          if (!($387)) {
           $388 = HEAP32[$8>>2]|0;
           $389 = ((($382)) + 16|0);
           $390 = HEAP32[$389>>2]|0;
           _memcpy(($388|0),($390|0),($$$i376|0))|0;
           $391 = HEAP32[$8>>2]|0;
           $392 = (($391) + ($$$i376)|0);
           HEAP32[$8>>2] = $392;
           $393 = HEAP32[$389>>2]|0;
           $394 = (($393) + ($$$i376)|0);
           HEAP32[$389>>2] = $394;
           $395 = HEAP32[$367>>2]|0;
           $396 = (($395) + ($$$i376))|0;
           HEAP32[$367>>2] = $396;
           $397 = HEAP32[$22>>2]|0;
           $398 = (($397) - ($$$i376))|0;
           HEAP32[$22>>2] = $398;
           $399 = HEAP32[$383>>2]|0;
           $400 = (($399) - ($$$i376))|0;
           HEAP32[$383>>2] = $400;
           $401 = ($400|0)==(0);
           if ($401) {
            $402 = ((($382)) + 8|0);
            $403 = HEAP32[$402>>2]|0;
            HEAP32[$389>>2] = $403;
           }
          }
          $404 = HEAP32[$362>>2]|0;
          $405 = HEAP32[$364>>2]|0;
          $406 = ($404|0)==($405|0);
          if ($406) {
           $$0355 = 1;$$2358 = $404;
           break;
          } else {
           $$1357 = $404;$417 = $404;
          }
         } else {
          $$1357 = $$0356;$417 = $370;
         }
         $407 = HEAP32[$$pre$phiZ2D>>2]|0;
         $408 = ((($407)) + 28|0);
         $409 = HEAP32[$408>>2]|0;
         $410 = HEAP32[$368>>2]|0;
         $411 = (($410) + 1)|0;
         HEAP32[$368>>2] = $411;
         $412 = (($409) + ($410)|0);
         $413 = HEAP8[$412>>0]|0;
         $414 = $413&255;
         $415 = HEAP32[$366>>2]|0;
         $416 = (($417) + 1)|0;
         HEAP32[$362>>2] = $416;
         $418 = (($415) + ($417)|0);
         HEAP8[$418>>0] = $413;
         $419 = ($413<<24>>24)==(0);
         if ($419) {
          $$0355 = $414;$$2358 = $$1357;
          break;
         }
         $$pre426 = HEAP32[$362>>2]|0;
         $$0356 = $$1357;$370 = $$pre426;
        }
        $420 = HEAP32[$$pre$phiZ2D>>2]|0;
        $421 = ((($420)) + 44|0);
        $422 = HEAP32[$421>>2]|0;
        $423 = ($422|0)==(0);
        if (!($423)) {
         $424 = HEAP32[$362>>2]|0;
         $425 = ($424>>>0)>($$2358>>>0);
         if ($425) {
          $426 = HEAP32[$365>>2]|0;
          $427 = HEAP32[$366>>2]|0;
          $428 = (($427) + ($$2358)|0);
          $429 = (($424) - ($$2358))|0;
          $430 = (_crc32($426,$428,$429)|0);
          HEAP32[$365>>2] = $430;
         }
        }
        $431 = ($$0355|0)==(0);
        if ($431) {
         HEAP32[$368>>2] = 0;
         break;
        } else {
         $$pr393 = HEAP32[$16>>2]|0;
         $432 = $$pr393;
         label = 70;
         break L78;
        }
       }
      } while(0);
      HEAP32[$16>>2] = 91;
      $$pre$phi438Z2D = $$pre$phiZ2D;
      label = 73;
     }
    } while(0);
    if ((label|0) == 70) {
     $433 = ($432|0)==(91);
     if ($433) {
      $$pre437 = ((($4)) + 28|0);
      $$pre$phi438Z2D = $$pre437;
      label = 73;
     } else {
      $$pr397 = $432;
      label = 89;
     }
    }
    do {
     if ((label|0) == 73) {
      $434 = HEAP32[$$pre$phi438Z2D>>2]|0;
      $435 = ((($434)) + 36|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = ($436|0)==(0|0);
      if (!($437)) {
       $438 = ((($4)) + 20|0);
       $439 = HEAP32[$438>>2]|0;
       $440 = ((($4)) + 12|0);
       $441 = ((($0)) + 48|0);
       $442 = ((($4)) + 8|0);
       $443 = ((($0)) + 20|0);
       $444 = ((($4)) + 32|0);
       $$0353 = $439;$446 = $439;
       while(1) {
        $445 = HEAP32[$440>>2]|0;
        $447 = ($446|0)==($445|0);
        if ($447) {
         $448 = HEAP32[$$pre$phi438Z2D>>2]|0;
         $449 = ((($448)) + 44|0);
         $450 = HEAP32[$449>>2]|0;
         $451 = ($450|0)!=(0);
         $452 = ($446>>>0)>($$0353>>>0);
         $or$cond369 = $452 & $451;
         if ($or$cond369) {
          $453 = HEAP32[$441>>2]|0;
          $454 = HEAP32[$442>>2]|0;
          $455 = (($454) + ($$0353)|0);
          $456 = (($446) - ($$0353))|0;
          $457 = (_crc32($453,$455,$456)|0);
          HEAP32[$441>>2] = $457;
         }
         $458 = HEAP32[$3>>2]|0;
         __tr_flush_bits($458);
         $459 = ((($458)) + 20|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = HEAP32[$22>>2]|0;
         $462 = ($460>>>0)>($461>>>0);
         $$$i378 = $462 ? $461 : $460;
         $463 = ($$$i378|0)==(0);
         if (!($463)) {
          $464 = HEAP32[$8>>2]|0;
          $465 = ((($458)) + 16|0);
          $466 = HEAP32[$465>>2]|0;
          _memcpy(($464|0),($466|0),($$$i378|0))|0;
          $467 = HEAP32[$8>>2]|0;
          $468 = (($467) + ($$$i378)|0);
          HEAP32[$8>>2] = $468;
          $469 = HEAP32[$465>>2]|0;
          $470 = (($469) + ($$$i378)|0);
          HEAP32[$465>>2] = $470;
          $471 = HEAP32[$443>>2]|0;
          $472 = (($471) + ($$$i378))|0;
          HEAP32[$443>>2] = $472;
          $473 = HEAP32[$22>>2]|0;
          $474 = (($473) - ($$$i378))|0;
          HEAP32[$22>>2] = $474;
          $475 = HEAP32[$459>>2]|0;
          $476 = (($475) - ($$$i378))|0;
          HEAP32[$459>>2] = $476;
          $477 = ($476|0)==(0);
          if ($477) {
           $478 = ((($458)) + 8|0);
           $479 = HEAP32[$478>>2]|0;
           HEAP32[$465>>2] = $479;
          }
         }
         $480 = HEAP32[$438>>2]|0;
         $481 = HEAP32[$440>>2]|0;
         $482 = ($480|0)==($481|0);
         if ($482) {
          $$0352 = 1;$$2 = $480;
          break;
         } else {
          $$1354 = $480;$493 = $480;
         }
        } else {
         $$1354 = $$0353;$493 = $446;
        }
        $483 = HEAP32[$$pre$phi438Z2D>>2]|0;
        $484 = ((($483)) + 36|0);
        $485 = HEAP32[$484>>2]|0;
        $486 = HEAP32[$444>>2]|0;
        $487 = (($486) + 1)|0;
        HEAP32[$444>>2] = $487;
        $488 = (($485) + ($486)|0);
        $489 = HEAP8[$488>>0]|0;
        $490 = $489&255;
        $491 = HEAP32[$442>>2]|0;
        $492 = (($493) + 1)|0;
        HEAP32[$438>>2] = $492;
        $494 = (($491) + ($493)|0);
        HEAP8[$494>>0] = $489;
        $495 = ($489<<24>>24)==(0);
        if ($495) {
         $$0352 = $490;$$2 = $$1354;
         break;
        }
        $$pre428 = HEAP32[$438>>2]|0;
        $$0353 = $$1354;$446 = $$pre428;
       }
       $496 = HEAP32[$$pre$phi438Z2D>>2]|0;
       $497 = ((($496)) + 44|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = ($498|0)==(0);
       if (!($499)) {
        $500 = HEAP32[$438>>2]|0;
        $501 = ($500>>>0)>($$2>>>0);
        if ($501) {
         $502 = HEAP32[$441>>2]|0;
         $503 = HEAP32[$442>>2]|0;
         $504 = (($503) + ($$2)|0);
         $505 = (($500) - ($$2))|0;
         $506 = (_crc32($502,$504,$505)|0);
         HEAP32[$441>>2] = $506;
        }
       }
       $507 = ($$0352|0)==(0);
       if (!($507)) {
        $$pr397$pre = HEAP32[$16>>2]|0;
        $$pr397 = $$pr397$pre;
        label = 89;
        break;
       }
      }
      HEAP32[$16>>2] = 103;
      $$pre$phi440Z2D = $$pre$phi438Z2D;
      label = 92;
     }
    } while(0);
    if ((label|0) == 89) {
     $508 = ($$pr397|0)==(103);
     if ($508) {
      $$pre439 = ((($4)) + 28|0);
      $$pre$phi440Z2D = $$pre439;
      label = 92;
     }
    }
    do {
     if ((label|0) == 92) {
      $509 = HEAP32[$$pre$phi440Z2D>>2]|0;
      $510 = ((($509)) + 44|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = ($511|0)==(0);
      if (!($512)) {
       $513 = ((($4)) + 20|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($514) + 2)|0;
       $516 = ((($4)) + 12|0);
       $517 = HEAP32[$516>>2]|0;
       $518 = ($515>>>0)>($517>>>0);
       if ($518) {
        $519 = HEAP32[$3>>2]|0;
        __tr_flush_bits($519);
        $520 = ((($519)) + 20|0);
        $521 = HEAP32[$520>>2]|0;
        $522 = HEAP32[$22>>2]|0;
        $523 = ($521>>>0)>($522>>>0);
        $$$i380 = $523 ? $522 : $521;
        $524 = ($$$i380|0)==(0);
        if (!($524)) {
         $525 = HEAP32[$8>>2]|0;
         $526 = ((($519)) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         _memcpy(($525|0),($527|0),($$$i380|0))|0;
         $528 = HEAP32[$8>>2]|0;
         $529 = (($528) + ($$$i380)|0);
         HEAP32[$8>>2] = $529;
         $530 = HEAP32[$526>>2]|0;
         $531 = (($530) + ($$$i380)|0);
         HEAP32[$526>>2] = $531;
         $532 = ((($0)) + 20|0);
         $533 = HEAP32[$532>>2]|0;
         $534 = (($533) + ($$$i380))|0;
         HEAP32[$532>>2] = $534;
         $535 = HEAP32[$22>>2]|0;
         $536 = (($535) - ($$$i380))|0;
         HEAP32[$22>>2] = $536;
         $537 = HEAP32[$520>>2]|0;
         $538 = (($537) - ($$$i380))|0;
         HEAP32[$520>>2] = $538;
         $539 = ($538|0)==(0);
         if ($539) {
          $540 = ((($519)) + 8|0);
          $541 = HEAP32[$540>>2]|0;
          HEAP32[$526>>2] = $541;
         }
        }
       }
       $542 = HEAP32[$513>>2]|0;
       $543 = (($542) + 2)|0;
       $544 = HEAP32[$516>>2]|0;
       $545 = ($543>>>0)>($544>>>0);
       if ($545) {
        break;
       }
       $546 = ((($0)) + 48|0);
       $547 = HEAP32[$546>>2]|0;
       $548 = $547&255;
       $549 = ((($4)) + 8|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = (($542) + 1)|0;
       HEAP32[$513>>2] = $551;
       $552 = (($550) + ($542)|0);
       HEAP8[$552>>0] = $548;
       $553 = HEAP32[$546>>2]|0;
       $554 = $553 >>> 8;
       $555 = $554&255;
       $556 = HEAP32[$549>>2]|0;
       $557 = HEAP32[$513>>2]|0;
       $558 = (($557) + 1)|0;
       HEAP32[$513>>2] = $558;
       $559 = (($556) + ($557)|0);
       HEAP8[$559>>0] = $555;
       $560 = (_crc32(0,0,0)|0);
       HEAP32[$546>>2] = $560;
      }
      HEAP32[$16>>2] = 113;
     }
    } while(0);
    $561 = ((($4)) + 20|0);
    $562 = HEAP32[$561>>2]|0;
    $563 = ($562|0)==(0);
    if ($563) {
     $589 = ((($0)) + 4|0);
     $590 = HEAP32[$589>>2]|0;
     $591 = ($590|0)==(0);
     if ($591) {
      $592 = $1 << 1;
      $593 = ($1|0)>(4);
      $594 = $593 ? 9 : 0;
      $595 = (($592) - ($594))|0;
      $596 = $28 << 1;
      $597 = ($28|0)>(4);
      $598 = $597 ? 9 : 0;
      $599 = (($596) - ($598))|0;
      $600 = ($595|0)<=($599|0);
      $or$cond11 = $19 & $600;
      if ($or$cond11) {
       $601 = HEAP32[(100)>>2]|0;
       $602 = ((($0)) + 24|0);
       HEAP32[$602>>2] = $601;
       $$1 = -5;
       return ($$1|0);
      }
     }
    } else {
     $564 = HEAP32[$3>>2]|0;
     __tr_flush_bits($564);
     $565 = ((($564)) + 20|0);
     $566 = HEAP32[$565>>2]|0;
     $567 = HEAP32[$22>>2]|0;
     $568 = ($566>>>0)>($567>>>0);
     $$$i382 = $568 ? $567 : $566;
     $569 = ($$$i382|0)==(0);
     if ($569) {
      $587 = $567;
     } else {
      $570 = HEAP32[$8>>2]|0;
      $571 = ((($564)) + 16|0);
      $572 = HEAP32[$571>>2]|0;
      _memcpy(($570|0),($572|0),($$$i382|0))|0;
      $573 = HEAP32[$8>>2]|0;
      $574 = (($573) + ($$$i382)|0);
      HEAP32[$8>>2] = $574;
      $575 = HEAP32[$571>>2]|0;
      $576 = (($575) + ($$$i382)|0);
      HEAP32[$571>>2] = $576;
      $577 = ((($0)) + 20|0);
      $578 = HEAP32[$577>>2]|0;
      $579 = (($578) + ($$$i382))|0;
      HEAP32[$577>>2] = $579;
      $580 = HEAP32[$22>>2]|0;
      $581 = (($580) - ($$$i382))|0;
      HEAP32[$22>>2] = $581;
      $582 = HEAP32[$565>>2]|0;
      $583 = (($582) - ($$$i382))|0;
      HEAP32[$565>>2] = $583;
      $584 = ($583|0)==(0);
      if ($584) {
       $585 = ((($564)) + 8|0);
       $586 = HEAP32[$585>>2]|0;
       HEAP32[$571>>2] = $586;
       $587 = $581;
      } else {
       $587 = $581;
      }
     }
     $588 = ($587|0)==(0);
     if ($588) {
      HEAP32[$27>>2] = -1;
      $$1 = 0;
      return ($$1|0);
     }
    }
    $603 = HEAP32[$16>>2]|0;
    $604 = ($603|0)==(666);
    $605 = ((($0)) + 4|0);
    $606 = HEAP32[$605>>2]|0;
    $607 = ($606|0)==(0);
    if ($604) {
     if ($607) {
      label = 113;
     } else {
      $608 = HEAP32[(100)>>2]|0;
      $609 = ((($0)) + 24|0);
      HEAP32[$609>>2] = $608;
      $$1 = -5;
      return ($$1|0);
     }
    } else {
     if ($607) {
      label = 113;
     } else {
      label = 114;
     }
    }
    if ((label|0) == 113) {
     $610 = ((($4)) + 116|0);
     $611 = HEAP32[$610>>2]|0;
     $612 = ($611|0)==(0);
     $613 = ($1|0)==(0);
     $brmerge = $613 | $604;
     $or$cond448 = $612 & $brmerge;
     if (!($or$cond448)) {
      label = 114;
     }
    }
    do {
     if ((label|0) == 114) {
      $614 = ((($4)) + 136|0);
      $615 = HEAP32[$614>>2]|0;
      L168: do {
       switch ($615|0) {
       case 2:  {
        $616 = ((($4)) + 116|0);
        $617 = ((($4)) + 96|0);
        $618 = ((($4)) + 56|0);
        $619 = ((($4)) + 108|0);
        $620 = ((($4)) + 5796|0);
        $621 = ((($4)) + 5792|0);
        $622 = ((($4)) + 5784|0);
        $623 = ((($4)) + 5788|0);
        $624 = ((($4)) + 92|0);
        L171: while(1) {
         $$pr$i = HEAP32[$616>>2]|0;
         $625 = $$pr$i;
         while(1) {
          $626 = ($625|0)==(0);
          if ($626) {
           _fill_window($4);
           $627 = HEAP32[$616>>2]|0;
           $628 = ($627|0)==(0);
           if ($628) {
            break L171;
           }
          }
          HEAP32[$617>>2] = 0;
          $630 = HEAP32[$618>>2]|0;
          $631 = HEAP32[$619>>2]|0;
          $632 = (($630) + ($631)|0);
          $633 = HEAP8[$632>>0]|0;
          $634 = HEAP32[$620>>2]|0;
          $635 = HEAP32[$621>>2]|0;
          $636 = (($634) + ($635<<1)|0);
          HEAP16[$636>>1] = 0;
          $637 = HEAP32[$622>>2]|0;
          $638 = (($635) + 1)|0;
          HEAP32[$621>>2] = $638;
          $639 = (($637) + ($635)|0);
          HEAP8[$639>>0] = $633;
          $640 = $633&255;
          $641 = (((($4)) + 148|0) + ($640<<2)|0);
          $642 = HEAP16[$641>>1]|0;
          $643 = (($642) + 1)<<16>>16;
          HEAP16[$641>>1] = $643;
          $644 = HEAP32[$621>>2]|0;
          $645 = HEAP32[$623>>2]|0;
          $646 = (($645) + -1)|0;
          $647 = ($644|0)==($646|0);
          $648 = HEAP32[$616>>2]|0;
          $649 = (($648) + -1)|0;
          HEAP32[$616>>2] = $649;
          $650 = HEAP32[$619>>2]|0;
          $651 = (($650) + 1)|0;
          HEAP32[$619>>2] = $651;
          if ($647) {
           break;
          } else {
           $625 = $649;
          }
         }
         $652 = HEAP32[$624>>2]|0;
         $653 = ($652|0)>(-1);
         if ($653) {
          $654 = HEAP32[$618>>2]|0;
          $655 = (($654) + ($652)|0);
          $657 = $655;
         } else {
          $657 = 0;
         }
         $656 = (($651) - ($652))|0;
         __tr_flush_block($4,$657,$656,0);
         $658 = HEAP32[$619>>2]|0;
         HEAP32[$624>>2] = $658;
         $659 = HEAP32[$4>>2]|0;
         $660 = ((($659)) + 28|0);
         $661 = HEAP32[$660>>2]|0;
         __tr_flush_bits($661);
         $662 = ((($661)) + 20|0);
         $663 = HEAP32[$662>>2]|0;
         $664 = ((($659)) + 16|0);
         $665 = HEAP32[$664>>2]|0;
         $666 = ($663>>>0)>($665>>>0);
         $$$i$i = $666 ? $665 : $663;
         $667 = ($$$i$i|0)==(0);
         if (!($667)) {
          $668 = ((($659)) + 12|0);
          $669 = HEAP32[$668>>2]|0;
          $670 = ((($661)) + 16|0);
          $671 = HEAP32[$670>>2]|0;
          _memcpy(($669|0),($671|0),($$$i$i|0))|0;
          $672 = HEAP32[$668>>2]|0;
          $673 = (($672) + ($$$i$i)|0);
          HEAP32[$668>>2] = $673;
          $674 = HEAP32[$670>>2]|0;
          $675 = (($674) + ($$$i$i)|0);
          HEAP32[$670>>2] = $675;
          $676 = ((($659)) + 20|0);
          $677 = HEAP32[$676>>2]|0;
          $678 = (($677) + ($$$i$i))|0;
          HEAP32[$676>>2] = $678;
          $679 = HEAP32[$664>>2]|0;
          $680 = (($679) - ($$$i$i))|0;
          HEAP32[$664>>2] = $680;
          $681 = HEAP32[$662>>2]|0;
          $682 = (($681) - ($$$i$i))|0;
          HEAP32[$662>>2] = $682;
          $683 = ($682|0)==(0);
          if ($683) {
           $684 = ((($661)) + 8|0);
           $685 = HEAP32[$684>>2]|0;
           HEAP32[$670>>2] = $685;
          }
         }
         $686 = HEAP32[$4>>2]|0;
         $687 = ((($686)) + 16|0);
         $688 = HEAP32[$687>>2]|0;
         $689 = ($688|0)==(0);
         if ($689) {
          label = 189;
          break L168;
         }
        }
        $629 = ($1|0)==(0);
        if ($629) {
         label = 189;
        } else {
         $690 = ((($4)) + 5812|0);
         HEAP32[$690>>2] = 0;
         $691 = ($1|0)==(4);
         if ($691) {
          $692 = HEAP32[$624>>2]|0;
          $693 = ($692|0)>(-1);
          if ($693) {
           $694 = HEAP32[$618>>2]|0;
           $695 = (($694) + ($692)|0);
           $698 = $695;
          } else {
           $698 = 0;
          }
          $696 = HEAP32[$619>>2]|0;
          $697 = (($696) - ($692))|0;
          __tr_flush_block($4,$698,$697,1);
          $699 = HEAP32[$619>>2]|0;
          HEAP32[$624>>2] = $699;
          $700 = HEAP32[$4>>2]|0;
          $701 = ((($700)) + 28|0);
          $702 = HEAP32[$701>>2]|0;
          __tr_flush_bits($702);
          $703 = ((($702)) + 20|0);
          $704 = HEAP32[$703>>2]|0;
          $705 = ((($700)) + 16|0);
          $706 = HEAP32[$705>>2]|0;
          $707 = ($704>>>0)>($706>>>0);
          $$$i52$i = $707 ? $706 : $704;
          $708 = ($$$i52$i|0)==(0);
          if (!($708)) {
           $709 = ((($700)) + 12|0);
           $710 = HEAP32[$709>>2]|0;
           $711 = ((($702)) + 16|0);
           $712 = HEAP32[$711>>2]|0;
           _memcpy(($710|0),($712|0),($$$i52$i|0))|0;
           $713 = HEAP32[$709>>2]|0;
           $714 = (($713) + ($$$i52$i)|0);
           HEAP32[$709>>2] = $714;
           $715 = HEAP32[$711>>2]|0;
           $716 = (($715) + ($$$i52$i)|0);
           HEAP32[$711>>2] = $716;
           $717 = ((($700)) + 20|0);
           $718 = HEAP32[$717>>2]|0;
           $719 = (($718) + ($$$i52$i))|0;
           HEAP32[$717>>2] = $719;
           $720 = HEAP32[$705>>2]|0;
           $721 = (($720) - ($$$i52$i))|0;
           HEAP32[$705>>2] = $721;
           $722 = HEAP32[$703>>2]|0;
           $723 = (($722) - ($$$i52$i))|0;
           HEAP32[$703>>2] = $723;
           $724 = ($723|0)==(0);
           if ($724) {
            $725 = ((($702)) + 8|0);
            $726 = HEAP32[$725>>2]|0;
            HEAP32[$711>>2] = $726;
           }
          }
          $727 = HEAP32[$4>>2]|0;
          $728 = ((($727)) + 16|0);
          $729 = HEAP32[$728>>2]|0;
          $730 = ($729|0)==(0);
          $$$i384 = $730 ? 2 : 3;
          $1011 = $$$i384;
          label = 186;
          break L168;
         }
         $731 = HEAP32[$621>>2]|0;
         $732 = ($731|0)==(0);
         if (!($732)) {
          $733 = HEAP32[$624>>2]|0;
          $734 = ($733|0)>(-1);
          if ($734) {
           $735 = HEAP32[$618>>2]|0;
           $736 = (($735) + ($733)|0);
           $739 = $736;
          } else {
           $739 = 0;
          }
          $737 = HEAP32[$619>>2]|0;
          $738 = (($737) - ($733))|0;
          __tr_flush_block($4,$739,$738,0);
          $740 = HEAP32[$619>>2]|0;
          HEAP32[$624>>2] = $740;
          $741 = HEAP32[$4>>2]|0;
          $742 = ((($741)) + 28|0);
          $743 = HEAP32[$742>>2]|0;
          __tr_flush_bits($743);
          $744 = ((($743)) + 20|0);
          $745 = HEAP32[$744>>2]|0;
          $746 = ((($741)) + 16|0);
          $747 = HEAP32[$746>>2]|0;
          $748 = ($745>>>0)>($747>>>0);
          $$$i54$i = $748 ? $747 : $745;
          $749 = ($$$i54$i|0)==(0);
          if (!($749)) {
           $750 = ((($741)) + 12|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = ((($743)) + 16|0);
           $753 = HEAP32[$752>>2]|0;
           _memcpy(($751|0),($753|0),($$$i54$i|0))|0;
           $754 = HEAP32[$750>>2]|0;
           $755 = (($754) + ($$$i54$i)|0);
           HEAP32[$750>>2] = $755;
           $756 = HEAP32[$752>>2]|0;
           $757 = (($756) + ($$$i54$i)|0);
           HEAP32[$752>>2] = $757;
           $758 = ((($741)) + 20|0);
           $759 = HEAP32[$758>>2]|0;
           $760 = (($759) + ($$$i54$i))|0;
           HEAP32[$758>>2] = $760;
           $761 = HEAP32[$746>>2]|0;
           $762 = (($761) - ($$$i54$i))|0;
           HEAP32[$746>>2] = $762;
           $763 = HEAP32[$744>>2]|0;
           $764 = (($763) - ($$$i54$i))|0;
           HEAP32[$744>>2] = $764;
           $765 = ($764|0)==(0);
           if ($765) {
            $766 = ((($743)) + 8|0);
            $767 = HEAP32[$766>>2]|0;
            HEAP32[$752>>2] = $767;
           }
          }
          $768 = HEAP32[$4>>2]|0;
          $769 = ((($768)) + 16|0);
          $770 = HEAP32[$769>>2]|0;
          $771 = ($770|0)==(0);
          if ($771) {
           label = 189;
          }
         }
        }
        break;
       }
       case 3:  {
        $772 = ((($4)) + 116|0);
        $773 = ($1|0)==(0);
        $774 = ((($4)) + 96|0);
        $775 = ((($4)) + 108|0);
        $776 = ((($4)) + 5796|0);
        $777 = ((($4)) + 5792|0);
        $778 = ((($4)) + 5784|0);
        $779 = ((($4)) + 5788|0);
        $780 = ((($4)) + 56|0);
        $781 = ((($4)) + 92|0);
        L207: while(1) {
         $$pr$i385 = HEAP32[$772>>2]|0;
         $782 = $$pr$i385;
         L209: while(1) {
          $783 = ($782>>>0)<(259);
          if ($783) {
           _fill_window($4);
           $784 = HEAP32[$772>>2]|0;
           $785 = ($784>>>0)<(259);
           $or$cond$i = $773 & $785;
           if ($or$cond$i) {
            label = 189;
            break L168;
           }
           $786 = ($784|0)==(0);
           if ($786) {
            break L207;
           }
           HEAP32[$774>>2] = 0;
           $787 = ($784>>>0)>(2);
           if ($787) {
            $829 = $784;
            label = 149;
           } else {
            $$pre$i = HEAP32[$775>>2]|0;
            $864 = $$pre$i;
           }
          } else {
           HEAP32[$774>>2] = 0;
           $829 = $782;
           label = 149;
          }
          do {
           if ((label|0) == 149) {
            label = 0;
            $788 = HEAP32[$775>>2]|0;
            $789 = ($788|0)==(0);
            if ($789) {
             $864 = 0;
            } else {
             $790 = HEAP32[$780>>2]|0;
             $791 = (($790) + ($788)|0);
             $$ptr134$i = ((($791)) + -1|0);
             $792 = HEAP8[$$ptr134$i>>0]|0;
             $793 = HEAP8[$791>>0]|0;
             $794 = ($792<<24>>24)==($793<<24>>24);
             if ($794) {
              $$ptr136$i = ((($791)) + 1|0);
              $795 = HEAP8[$$ptr136$i>>0]|0;
              $796 = ($792<<24>>24)==($795<<24>>24);
              if ($796) {
               $797 = ((($$ptr136$i)) + 1|0);
               $798 = HEAP8[$797>>0]|0;
               $799 = ($792<<24>>24)==($798<<24>>24);
               if (!($799)) {
                $864 = $788;
                break;
               }
               $800 = ((($791)) + 258|0);
               $$idx$i = 1;
               while(1) {
                $$ptr$i = (($791) + ($$idx$i)|0);
                $801 = ((($$ptr$i)) + 2|0);
                $802 = HEAP8[$801>>0]|0;
                $803 = ($792<<24>>24)==($802<<24>>24);
                if (!($803)) {
                 $$1$i = $801;
                 break;
                }
                $804 = ((($$ptr$i)) + 3|0);
                $805 = HEAP8[$804>>0]|0;
                $806 = ($792<<24>>24)==($805<<24>>24);
                if (!($806)) {
                 $$1$i = $804;
                 break;
                }
                $807 = ((($$ptr$i)) + 4|0);
                $808 = HEAP8[$807>>0]|0;
                $809 = ($792<<24>>24)==($808<<24>>24);
                if (!($809)) {
                 $$1$i = $807;
                 break;
                }
                $810 = ((($$ptr$i)) + 5|0);
                $811 = HEAP8[$810>>0]|0;
                $812 = ($792<<24>>24)==($811<<24>>24);
                if (!($812)) {
                 $$1$i = $810;
                 break;
                }
                $813 = ((($$ptr$i)) + 6|0);
                $814 = HEAP8[$813>>0]|0;
                $815 = ($792<<24>>24)==($814<<24>>24);
                if (!($815)) {
                 $$1$i = $813;
                 break;
                }
                $816 = ((($$ptr$i)) + 7|0);
                $817 = HEAP8[$816>>0]|0;
                $818 = ($792<<24>>24)==($817<<24>>24);
                if (!($818)) {
                 $$1$i = $816;
                 break;
                }
                $$add131$i = (($$idx$i) + 8)|0;
                $$ptr133$i = (($791) + ($$add131$i)|0);
                $819 = HEAP8[$$ptr133$i>>0]|0;
                $820 = ($792<<24>>24)==($819<<24>>24);
                if (!($820)) {
                 $$1$i = $$ptr133$i;
                 break;
                }
                $$add$i = (($$idx$i) + 9)|0;
                $$ptr132$i = (($791) + ($$add$i)|0);
                $821 = HEAP8[$$ptr132$i>>0]|0;
                $822 = ($792<<24>>24)==($821<<24>>24);
                $823 = ($$idx$i|0)<(249);
                $or$cond137$i = $823 & $822;
                if ($or$cond137$i) {
                 $$idx$i = $$add131$i;
                } else {
                 $$1$i = $$ptr132$i;
                 break;
                }
               }
               $824 = $800;
               $825 = $$1$i;
               $826 = (($825) - ($824))|0;
               $827 = (($826) + 258)|0;
               $828 = ($827>>>0)>($829>>>0);
               $$$i388 = $828 ? $829 : $827;
               HEAP32[$774>>2] = $$$i388;
               $830 = ($$$i388>>>0)>(2);
               if (!($830)) {
                $864 = $788;
                break;
               }
               $831 = (($$$i388) + 253)|0;
               $832 = $831&255;
               $833 = HEAP32[$776>>2]|0;
               $834 = HEAP32[$777>>2]|0;
               $835 = (($833) + ($834<<1)|0);
               HEAP16[$835>>1] = 1;
               $836 = HEAP32[$778>>2]|0;
               $837 = (($834) + 1)|0;
               HEAP32[$777>>2] = $837;
               $838 = (($836) + ($834)|0);
               HEAP8[$838>>0] = $832;
               $839 = $831 & 255;
               $840 = (17336 + ($839)|0);
               $841 = HEAP8[$840>>0]|0;
               $842 = $841&255;
               $843 = $842 | 256;
               $844 = (($843) + 1)|0;
               $845 = (((($4)) + 148|0) + ($844<<2)|0);
               $846 = HEAP16[$845>>1]|0;
               $847 = (($846) + 1)<<16>>16;
               HEAP16[$845>>1] = $847;
               $848 = HEAP8[16824]|0;
               $849 = $848&255;
               $850 = (((($4)) + 2440|0) + ($849<<2)|0);
               $851 = HEAP16[$850>>1]|0;
               $852 = (($851) + 1)<<16>>16;
               HEAP16[$850>>1] = $852;
               $853 = HEAP32[$777>>2]|0;
               $854 = HEAP32[$779>>2]|0;
               $855 = (($854) + -1)|0;
               $856 = ($853|0)==($855|0);
               $857 = HEAP32[$774>>2]|0;
               $858 = HEAP32[$772>>2]|0;
               $859 = (($858) - ($857))|0;
               HEAP32[$772>>2] = $859;
               $860 = HEAP32[$775>>2]|0;
               $861 = (($860) + ($857))|0;
               HEAP32[$775>>2] = $861;
               HEAP32[$774>>2] = 0;
               if ($856) {
                $889 = $861;
                break L209;
               } else {
                $782 = $859;
                continue L209;
               }
              } else {
               $864 = $788;
              }
             } else {
              $864 = $788;
             }
            }
           }
          } while(0);
          $862 = HEAP32[$780>>2]|0;
          $863 = (($862) + ($864)|0);
          $865 = HEAP8[$863>>0]|0;
          $866 = HEAP32[$776>>2]|0;
          $867 = HEAP32[$777>>2]|0;
          $868 = (($866) + ($867<<1)|0);
          HEAP16[$868>>1] = 0;
          $869 = HEAP32[$778>>2]|0;
          $870 = (($867) + 1)|0;
          HEAP32[$777>>2] = $870;
          $871 = (($869) + ($867)|0);
          HEAP8[$871>>0] = $865;
          $872 = $865&255;
          $873 = (((($4)) + 148|0) + ($872<<2)|0);
          $874 = HEAP16[$873>>1]|0;
          $875 = (($874) + 1)<<16>>16;
          HEAP16[$873>>1] = $875;
          $876 = HEAP32[$777>>2]|0;
          $877 = HEAP32[$779>>2]|0;
          $878 = (($877) + -1)|0;
          $879 = ($876|0)==($878|0);
          $880 = HEAP32[$772>>2]|0;
          $881 = (($880) + -1)|0;
          HEAP32[$772>>2] = $881;
          $882 = HEAP32[$775>>2]|0;
          $883 = (($882) + 1)|0;
          HEAP32[$775>>2] = $883;
          if ($879) {
           $889 = $883;
           break;
          } else {
           $782 = $881;
          }
         }
         $884 = HEAP32[$781>>2]|0;
         $885 = ($884|0)>(-1);
         if ($885) {
          $886 = HEAP32[$780>>2]|0;
          $887 = (($886) + ($884)|0);
          $890 = $887;
         } else {
          $890 = 0;
         }
         $888 = (($889) - ($884))|0;
         __tr_flush_block($4,$890,$888,0);
         $891 = HEAP32[$775>>2]|0;
         HEAP32[$781>>2] = $891;
         $892 = HEAP32[$4>>2]|0;
         $893 = ((($892)) + 28|0);
         $894 = HEAP32[$893>>2]|0;
         __tr_flush_bits($894);
         $895 = ((($894)) + 20|0);
         $896 = HEAP32[$895>>2]|0;
         $897 = ((($892)) + 16|0);
         $898 = HEAP32[$897>>2]|0;
         $899 = ($896>>>0)>($898>>>0);
         $$$i$i389 = $899 ? $898 : $896;
         $900 = ($$$i$i389|0)==(0);
         if (!($900)) {
          $901 = ((($892)) + 12|0);
          $902 = HEAP32[$901>>2]|0;
          $903 = ((($894)) + 16|0);
          $904 = HEAP32[$903>>2]|0;
          _memcpy(($902|0),($904|0),($$$i$i389|0))|0;
          $905 = HEAP32[$901>>2]|0;
          $906 = (($905) + ($$$i$i389)|0);
          HEAP32[$901>>2] = $906;
          $907 = HEAP32[$903>>2]|0;
          $908 = (($907) + ($$$i$i389)|0);
          HEAP32[$903>>2] = $908;
          $909 = ((($892)) + 20|0);
          $910 = HEAP32[$909>>2]|0;
          $911 = (($910) + ($$$i$i389))|0;
          HEAP32[$909>>2] = $911;
          $912 = HEAP32[$897>>2]|0;
          $913 = (($912) - ($$$i$i389))|0;
          HEAP32[$897>>2] = $913;
          $914 = HEAP32[$895>>2]|0;
          $915 = (($914) - ($$$i$i389))|0;
          HEAP32[$895>>2] = $915;
          $916 = ($915|0)==(0);
          if ($916) {
           $917 = ((($894)) + 8|0);
           $918 = HEAP32[$917>>2]|0;
           HEAP32[$903>>2] = $918;
          }
         }
         $919 = HEAP32[$4>>2]|0;
         $920 = ((($919)) + 16|0);
         $921 = HEAP32[$920>>2]|0;
         $922 = ($921|0)==(0);
         if ($922) {
          label = 189;
          break L168;
         }
        }
        $923 = ((($4)) + 5812|0);
        HEAP32[$923>>2] = 0;
        $924 = ($1|0)==(4);
        if ($924) {
         $925 = HEAP32[$781>>2]|0;
         $926 = ($925|0)>(-1);
         if ($926) {
          $927 = HEAP32[$780>>2]|0;
          $928 = (($927) + ($925)|0);
          $931 = $928;
         } else {
          $931 = 0;
         }
         $929 = HEAP32[$775>>2]|0;
         $930 = (($929) - ($925))|0;
         __tr_flush_block($4,$931,$930,1);
         $932 = HEAP32[$775>>2]|0;
         HEAP32[$781>>2] = $932;
         $933 = HEAP32[$4>>2]|0;
         $934 = ((($933)) + 28|0);
         $935 = HEAP32[$934>>2]|0;
         __tr_flush_bits($935);
         $936 = ((($935)) + 20|0);
         $937 = HEAP32[$936>>2]|0;
         $938 = ((($933)) + 16|0);
         $939 = HEAP32[$938>>2]|0;
         $940 = ($937>>>0)>($939>>>0);
         $$$i139$i = $940 ? $939 : $937;
         $941 = ($$$i139$i|0)==(0);
         if (!($941)) {
          $942 = ((($933)) + 12|0);
          $943 = HEAP32[$942>>2]|0;
          $944 = ((($935)) + 16|0);
          $945 = HEAP32[$944>>2]|0;
          _memcpy(($943|0),($945|0),($$$i139$i|0))|0;
          $946 = HEAP32[$942>>2]|0;
          $947 = (($946) + ($$$i139$i)|0);
          HEAP32[$942>>2] = $947;
          $948 = HEAP32[$944>>2]|0;
          $949 = (($948) + ($$$i139$i)|0);
          HEAP32[$944>>2] = $949;
          $950 = ((($933)) + 20|0);
          $951 = HEAP32[$950>>2]|0;
          $952 = (($951) + ($$$i139$i))|0;
          HEAP32[$950>>2] = $952;
          $953 = HEAP32[$938>>2]|0;
          $954 = (($953) - ($$$i139$i))|0;
          HEAP32[$938>>2] = $954;
          $955 = HEAP32[$936>>2]|0;
          $956 = (($955) - ($$$i139$i))|0;
          HEAP32[$936>>2] = $956;
          $957 = ($956|0)==(0);
          if ($957) {
           $958 = ((($935)) + 8|0);
           $959 = HEAP32[$958>>2]|0;
           HEAP32[$944>>2] = $959;
          }
         }
         $960 = HEAP32[$4>>2]|0;
         $961 = ((($960)) + 16|0);
         $962 = HEAP32[$961>>2]|0;
         $963 = ($962|0)==(0);
         $$138$i = $963 ? 2 : 3;
         $1011 = $$138$i;
         label = 186;
         break L168;
        }
        $964 = HEAP32[$777>>2]|0;
        $965 = ($964|0)==(0);
        if (!($965)) {
         $966 = HEAP32[$781>>2]|0;
         $967 = ($966|0)>(-1);
         if ($967) {
          $968 = HEAP32[$780>>2]|0;
          $969 = (($968) + ($966)|0);
          $972 = $969;
         } else {
          $972 = 0;
         }
         $970 = HEAP32[$775>>2]|0;
         $971 = (($970) - ($966))|0;
         __tr_flush_block($4,$972,$971,0);
         $973 = HEAP32[$775>>2]|0;
         HEAP32[$781>>2] = $973;
         $974 = HEAP32[$4>>2]|0;
         $975 = ((($974)) + 28|0);
         $976 = HEAP32[$975>>2]|0;
         __tr_flush_bits($976);
         $977 = ((($976)) + 20|0);
         $978 = HEAP32[$977>>2]|0;
         $979 = ((($974)) + 16|0);
         $980 = HEAP32[$979>>2]|0;
         $981 = ($978>>>0)>($980>>>0);
         $$$i141$i = $981 ? $980 : $978;
         $982 = ($$$i141$i|0)==(0);
         if (!($982)) {
          $983 = ((($974)) + 12|0);
          $984 = HEAP32[$983>>2]|0;
          $985 = ((($976)) + 16|0);
          $986 = HEAP32[$985>>2]|0;
          _memcpy(($984|0),($986|0),($$$i141$i|0))|0;
          $987 = HEAP32[$983>>2]|0;
          $988 = (($987) + ($$$i141$i)|0);
          HEAP32[$983>>2] = $988;
          $989 = HEAP32[$985>>2]|0;
          $990 = (($989) + ($$$i141$i)|0);
          HEAP32[$985>>2] = $990;
          $991 = ((($974)) + 20|0);
          $992 = HEAP32[$991>>2]|0;
          $993 = (($992) + ($$$i141$i))|0;
          HEAP32[$991>>2] = $993;
          $994 = HEAP32[$979>>2]|0;
          $995 = (($994) - ($$$i141$i))|0;
          HEAP32[$979>>2] = $995;
          $996 = HEAP32[$977>>2]|0;
          $997 = (($996) - ($$$i141$i))|0;
          HEAP32[$977>>2] = $997;
          $998 = ($997|0)==(0);
          if ($998) {
           $999 = ((($976)) + 8|0);
           $1000 = HEAP32[$999>>2]|0;
           HEAP32[$985>>2] = $1000;
          }
         }
         $1001 = HEAP32[$4>>2]|0;
         $1002 = ((($1001)) + 16|0);
         $1003 = HEAP32[$1002>>2]|0;
         $1004 = ($1003|0)==(0);
         if ($1004) {
          label = 189;
         }
        }
        break;
       }
       default: {
        $1005 = ((($4)) + 132|0);
        $1006 = HEAP32[$1005>>2]|0;
        $1007 = (((8304 + (($1006*12)|0)|0)) + 8|0);
        $1008 = HEAP32[$1007>>2]|0;
        $1009 = (FUNCTION_TABLE_iii[$1008 & 3]($4,$1)|0);
        $1011 = $1009;
        label = 186;
       }
       }
      } while(0);
      if ((label|0) == 186) {
       $1010 = $1011 | 1;
       $1012 = ($1010|0)==(3);
       if ($1012) {
        HEAP32[$16>>2] = 666;
       }
       $1013 = $1011 | 2;
       $1014 = ($1013|0)==(2);
       if ($1014) {
        label = 189;
       } else {
        $1017 = ($1011|0)==(1);
        if (!($1017)) {
         break;
        }
       }
      }
      if ((label|0) == 189) {
       $1015 = HEAP32[$22>>2]|0;
       $1016 = ($1015|0)==(0);
       if (!($1016)) {
        $$1 = 0;
        return ($$1|0);
       }
       HEAP32[$27>>2] = -1;
       $$1 = 0;
       return ($$1|0);
      }
      switch ($1|0) {
      case 1:  {
       __tr_align($4);
       break;
      }
      case 5:  {
       break;
      }
      default: {
       __tr_stored_block($4,0,0,0);
       $1018 = ($1|0)==(3);
       if ($1018) {
        $1019 = ((($4)) + 68|0);
        $1020 = HEAP32[$1019>>2]|0;
        $1021 = ((($4)) + 76|0);
        $1022 = HEAP32[$1021>>2]|0;
        $1023 = (($1022) + -1)|0;
        $1024 = (($1020) + ($1023<<1)|0);
        HEAP16[$1024>>1] = 0;
        $1025 = $1022 << 1;
        $1026 = (($1025) + -2)|0;
        _memset(($1020|0),0,($1026|0))|0;
        $1027 = ((($4)) + 116|0);
        $1028 = HEAP32[$1027>>2]|0;
        $1029 = ($1028|0)==(0);
        if ($1029) {
         $1030 = ((($4)) + 108|0);
         HEAP32[$1030>>2] = 0;
         $1031 = ((($4)) + 92|0);
         HEAP32[$1031>>2] = 0;
         $1032 = ((($4)) + 5812|0);
         HEAP32[$1032>>2] = 0;
        }
       }
      }
      }
      $1033 = HEAP32[$3>>2]|0;
      __tr_flush_bits($1033);
      $1034 = ((($1033)) + 20|0);
      $1035 = HEAP32[$1034>>2]|0;
      $1036 = HEAP32[$22>>2]|0;
      $1037 = ($1035>>>0)>($1036>>>0);
      $$$i372 = $1037 ? $1036 : $1035;
      $1038 = ($$$i372|0)==(0);
      if ($1038) {
       $1056 = $1036;
      } else {
       $1039 = HEAP32[$8>>2]|0;
       $1040 = ((($1033)) + 16|0);
       $1041 = HEAP32[$1040>>2]|0;
       _memcpy(($1039|0),($1041|0),($$$i372|0))|0;
       $1042 = HEAP32[$8>>2]|0;
       $1043 = (($1042) + ($$$i372)|0);
       HEAP32[$8>>2] = $1043;
       $1044 = HEAP32[$1040>>2]|0;
       $1045 = (($1044) + ($$$i372)|0);
       HEAP32[$1040>>2] = $1045;
       $1046 = ((($0)) + 20|0);
       $1047 = HEAP32[$1046>>2]|0;
       $1048 = (($1047) + ($$$i372))|0;
       HEAP32[$1046>>2] = $1048;
       $1049 = HEAP32[$22>>2]|0;
       $1050 = (($1049) - ($$$i372))|0;
       HEAP32[$22>>2] = $1050;
       $1051 = HEAP32[$1034>>2]|0;
       $1052 = (($1051) - ($$$i372))|0;
       HEAP32[$1034>>2] = $1052;
       $1053 = ($1052|0)==(0);
       if ($1053) {
        $1054 = ((($1033)) + 8|0);
        $1055 = HEAP32[$1054>>2]|0;
        HEAP32[$1040>>2] = $1055;
        $1056 = $1050;
       } else {
        $1056 = $1050;
       }
      }
      $1057 = ($1056|0)==(0);
      if ($1057) {
       HEAP32[$27>>2] = -1;
       $$1 = 0;
       return ($$1|0);
      }
     }
    } while(0);
    if ($19) {
     $$1 = 0;
     return ($$1|0);
    }
    $1058 = ((($4)) + 24|0);
    $1059 = HEAP32[$1058>>2]|0;
    $1060 = ($1059|0)<(1);
    if ($1060) {
     $$1 = 1;
     return ($$1|0);
    }
    $1061 = ($1059|0)==(2);
    $1062 = ((($0)) + 48|0);
    $1063 = HEAP32[$1062>>2]|0;
    if ($1061) {
     $1064 = $1063&255;
     $1065 = ((($4)) + 8|0);
     $1066 = HEAP32[$1065>>2]|0;
     $1067 = HEAP32[$561>>2]|0;
     $1068 = (($1067) + 1)|0;
     HEAP32[$561>>2] = $1068;
     $1069 = (($1066) + ($1067)|0);
     HEAP8[$1069>>0] = $1064;
     $1070 = HEAP32[$1062>>2]|0;
     $1071 = $1070 >>> 8;
     $1072 = $1071&255;
     $1073 = HEAP32[$1065>>2]|0;
     $1074 = HEAP32[$561>>2]|0;
     $1075 = (($1074) + 1)|0;
     HEAP32[$561>>2] = $1075;
     $1076 = (($1073) + ($1074)|0);
     HEAP8[$1076>>0] = $1072;
     $1077 = HEAP32[$1062>>2]|0;
     $1078 = $1077 >>> 16;
     $1079 = $1078&255;
     $1080 = HEAP32[$1065>>2]|0;
     $1081 = HEAP32[$561>>2]|0;
     $1082 = (($1081) + 1)|0;
     HEAP32[$561>>2] = $1082;
     $1083 = (($1080) + ($1081)|0);
     HEAP8[$1083>>0] = $1079;
     $1084 = HEAP32[$1062>>2]|0;
     $1085 = $1084 >>> 24;
     $1086 = $1085&255;
     $1087 = HEAP32[$1065>>2]|0;
     $1088 = HEAP32[$561>>2]|0;
     $1089 = (($1088) + 1)|0;
     HEAP32[$561>>2] = $1089;
     $1090 = (($1087) + ($1088)|0);
     HEAP8[$1090>>0] = $1086;
     $1091 = ((($0)) + 8|0);
     $1092 = HEAP32[$1091>>2]|0;
     $1093 = $1092&255;
     $1094 = HEAP32[$1065>>2]|0;
     $1095 = HEAP32[$561>>2]|0;
     $1096 = (($1095) + 1)|0;
     HEAP32[$561>>2] = $1096;
     $1097 = (($1094) + ($1095)|0);
     HEAP8[$1097>>0] = $1093;
     $1098 = HEAP32[$1091>>2]|0;
     $1099 = $1098 >>> 8;
     $1100 = $1099&255;
     $1101 = HEAP32[$1065>>2]|0;
     $1102 = HEAP32[$561>>2]|0;
     $1103 = (($1102) + 1)|0;
     HEAP32[$561>>2] = $1103;
     $1104 = (($1101) + ($1102)|0);
     HEAP8[$1104>>0] = $1100;
     $1105 = HEAP32[$1091>>2]|0;
     $1106 = $1105 >>> 16;
     $1107 = $1106&255;
     $1108 = HEAP32[$1065>>2]|0;
     $1109 = HEAP32[$561>>2]|0;
     $1110 = (($1109) + 1)|0;
     HEAP32[$561>>2] = $1110;
     $1111 = (($1108) + ($1109)|0);
     HEAP8[$1111>>0] = $1107;
     $1112 = HEAP32[$1091>>2]|0;
     $1113 = $1112 >>> 24;
     $1114 = HEAP32[$1065>>2]|0;
     $1115 = HEAP32[$561>>2]|0;
     $1116 = (($1115) + 1)|0;
     HEAP32[$561>>2] = $1116;
     $1117 = (($1114) + ($1115)|0);
     $$sink405$in = $1113;$$sink406 = $1117;
    } else {
     $1118 = $1063 >>> 16;
     $1119 = $1063 >>> 24;
     $1120 = $1119&255;
     $1121 = ((($4)) + 8|0);
     $1122 = HEAP32[$1121>>2]|0;
     $1123 = HEAP32[$561>>2]|0;
     $1124 = (($1123) + 1)|0;
     HEAP32[$561>>2] = $1124;
     $1125 = (($1122) + ($1123)|0);
     HEAP8[$1125>>0] = $1120;
     $1126 = $1118&255;
     $1127 = HEAP32[$1121>>2]|0;
     $1128 = HEAP32[$561>>2]|0;
     $1129 = (($1128) + 1)|0;
     HEAP32[$561>>2] = $1129;
     $1130 = (($1127) + ($1128)|0);
     HEAP8[$1130>>0] = $1126;
     $1131 = HEAP32[$1062>>2]|0;
     $1132 = $1131 >>> 8;
     $1133 = $1132&255;
     $1134 = HEAP32[$1121>>2]|0;
     $1135 = HEAP32[$561>>2]|0;
     $1136 = (($1135) + 1)|0;
     HEAP32[$561>>2] = $1136;
     $1137 = (($1134) + ($1135)|0);
     HEAP8[$1137>>0] = $1133;
     $1138 = HEAP32[$1121>>2]|0;
     $1139 = HEAP32[$561>>2]|0;
     $1140 = (($1139) + 1)|0;
     HEAP32[$561>>2] = $1140;
     $1141 = (($1138) + ($1139)|0);
     $$sink405$in = $1131;$$sink406 = $1141;
    }
    $$sink405 = $$sink405$in&255;
    HEAP8[$$sink406>>0] = $$sink405;
    $1142 = HEAP32[$3>>2]|0;
    __tr_flush_bits($1142);
    $1143 = ((($1142)) + 20|0);
    $1144 = HEAP32[$1143>>2]|0;
    $1145 = HEAP32[$22>>2]|0;
    $1146 = ($1144>>>0)>($1145>>>0);
    $$$i = $1146 ? $1145 : $1144;
    $1147 = ($$$i|0)==(0);
    if (!($1147)) {
     $1148 = HEAP32[$8>>2]|0;
     $1149 = ((($1142)) + 16|0);
     $1150 = HEAP32[$1149>>2]|0;
     _memcpy(($1148|0),($1150|0),($$$i|0))|0;
     $1151 = HEAP32[$8>>2]|0;
     $1152 = (($1151) + ($$$i)|0);
     HEAP32[$8>>2] = $1152;
     $1153 = HEAP32[$1149>>2]|0;
     $1154 = (($1153) + ($$$i)|0);
     HEAP32[$1149>>2] = $1154;
     $1155 = ((($0)) + 20|0);
     $1156 = HEAP32[$1155>>2]|0;
     $1157 = (($1156) + ($$$i))|0;
     HEAP32[$1155>>2] = $1157;
     $1158 = HEAP32[$22>>2]|0;
     $1159 = (($1158) - ($$$i))|0;
     HEAP32[$22>>2] = $1159;
     $1160 = HEAP32[$1143>>2]|0;
     $1161 = (($1160) - ($$$i))|0;
     HEAP32[$1143>>2] = $1161;
     $1162 = ($1161|0)==(0);
     if ($1162) {
      $1163 = ((($1142)) + 8|0);
      $1164 = HEAP32[$1163>>2]|0;
      HEAP32[$1149>>2] = $1164;
     }
    }
    $1165 = HEAP32[$1058>>2]|0;
    $1166 = ($1165|0)>(0);
    if ($1166) {
     $1167 = (0 - ($1165))|0;
     HEAP32[$1058>>2] = $1167;
    }
    $1168 = HEAP32[$561>>2]|0;
    $1169 = ($1168|0)==(0);
    $1170 = $1169&1;
    $$1 = $1170;
    return ($$1|0);
   }
  }
 } while(0);
 $20 = HEAP32[(88)>>2]|0;
 $21 = ((($0)) + 24|0);
 HEAP32[$21>>2] = $20;
 $$1 = -2;
 return ($$1|0);
}
function _inflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0297 = 0, $$0300 = 0, $$0304 = 0, $$0310 = 0, $$0319 = 0, $$0328 = 0, $$1 = 0, $$10 = 0, $$10338 = 0, $$1298$lcssa = 0, $$1298$ph = 0, $$1298411 = 0, $$1301 = 0, $$1305 = 0, $$1311 = 0, $$1320 = 0, $$1329 = 0, $$2 = 0, $$2299 = 0;
 var $$2302 = 0, $$2306 = 0, $$2312 = 0, $$3 = 0, $$3303 = 0, $$3307 = 0, $$3313 = 0, $$3322 = 0, $$3331 = 0, $$4$lcssa = 0, $$4$ph = 0, $$4308 = 0, $$4314 = 0, $$4323 = 0, $$4332 = 0, $$4412 = 0, $$5 = 0, $$5309 = 0, $$5315$lcssa = 0, $$5315$ph = 0;
 var $$5315410 = 0, $$5324 = 0, $$5333 = 0, $$6 = 0, $$6316 = 0, $$7 = 0, $$7$ph = 0, $$7317 = 0, $$7326 = 0, $$7335 = 0, $$8 = 0, $$8318 = 0, $$8327 = 0, $$8336 = 0, $$9 = 0, $$9$ph = 0, $$9337 = 0, $$9337$ph = 0, $$lcssa = 0, $$lcssa356 = 0;
 var $$lcssa359 = 0, $$lcssa365 = 0, $$lcssa367 = 0, $$sink = 0, $$sink345 = 0, $$sroa$0$0 = 0, $$sroa$0$0$in = 0, $$sroa$0$0$in387 = 0, $$sroa$0$0390 = 0, $$sroa$0$1 = 0, $$sroa$0$1$in = 0, $$sroa$0$1$in396 = 0, $$sroa$0$1399 = 0, $$sroa$10$0 = 0, $$sroa$10$0$in = 0, $$sroa$10$0$in389 = 0, $$sroa$10$0$lcssa$off0 = 0, $$sroa$10$0392 = 0, $$sroa$10$0393 = 0, $$sroa$10$1 = 0;
 var $$sroa$10$1$in = 0, $$sroa$10$1$in398 = 0, $$sroa$10$1$lcssa = 0, $$sroa$10$1401 = 0, $$sroa$10$1402 = 0, $$sroa$8$0 = 0, $$sroa$8$0$in = 0, $$sroa$8$0$in388 = 0, $$sroa$8$0391 = 0, $$sroa$8$1 = 0, $$sroa$8$1$in = 0, $$sroa$8$1$in397 = 0, $$sroa$8$1400 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extract$t = 0, $extract$t418 = 0, $or$cond = 0, $scevgep = 0, $scevgep464 = 0, $scevgep466 = 0, $scevgep467 = 0, $scevgep469 = 0, $scevgep470 = 0, $scevgep473 = 0, $scevgep474 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + -1|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -5)|0;
 $9 = (($5) + ($8)|0);
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + -1|0);
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($1))|0;
 $16 = (($12) + ($15)|0);
 $17 = (($14) + -257)|0;
 $18 = (($12) + ($17)|0);
 $19 = ((($3)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($3)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($3)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($3)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($3)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($3)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($3)) + 76|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($3)) + 80|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($3)) + 84|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = 1 << $36;
 $38 = (($37) + -1)|0;
 $39 = ((($3)) + 88|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = 1 << $40;
 $42 = (($41) + -1)|0;
 $43 = $16;
 $44 = ((($3)) + 7104|0);
 $45 = ((($26)) + -1|0);
 $46 = ($24|0)==(0);
 $47 = (($24) + ($20))|0;
 $48 = (($43) - ($24))|0;
 $$0304 = $5;$$0310 = $12;$$0319 = $28;$$0328 = $30;
 L1: while(1) {
  $49 = ($$0328>>>0)<(15);
  if ($49) {
   $50 = ((($$0304)) + 1|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $52 << $$0328;
   $54 = (($53) + ($$0319))|0;
   $55 = (($$0328) + 8)|0;
   $56 = ((($$0304)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 << $55;
   $60 = (($54) + ($59))|0;
   $61 = (($$0328) + 16)|0;
   $$1305 = $56;$$1320 = $60;$$1329 = $61;
  } else {
   $$1305 = $$0304;$$1320 = $$0319;$$1329 = $$0328;
  }
  $62 = $$1320 & $38;
  $$sroa$0$0$in387 = (($32) + ($62<<2)|0);
  $$sroa$8$0$in388 = (((($32) + ($62<<2)|0)) + 1|0);
  $$sroa$10$0$in389 = (((($32) + ($62<<2)|0)) + 2|0);
  $$sroa$0$0390 = HEAP8[$$sroa$0$0$in387>>0]|0;
  $$sroa$8$0391 = HEAP8[$$sroa$8$0$in388>>0]|0;
  $$sroa$10$0392 = HEAP16[$$sroa$10$0$in389>>1]|0;
  $63 = $$sroa$8$0391&255;
  $64 = $$1320 >>> $63;
  $65 = (($$1329) - ($63))|0;
  $66 = ($$sroa$0$0390<<24>>24)==(0);
  $extract$t = $$sroa$10$0392&255;
  do {
   if ($66) {
    $$lcssa356 = $65;$$lcssa359 = $64;$$sroa$10$0$lcssa$off0 = $extract$t;
    label = 7;
   } else {
    $67 = $$sroa$0$0390&255;
    $$sroa$10$0393 = $$sroa$10$0392;$70 = $67;$75 = $65;$83 = $64;
    while(1) {
     $69 = $70 & 16;
     $71 = ($69|0)==(0);
     if (!($71)) {
      break;
     }
     $241 = $70 & 64;
     $242 = ($241|0)==(0);
     if (!($242)) {
      label = 53;
      break L1;
     }
     $243 = $$sroa$10$0393&65535;
     $244 = 1 << $70;
     $245 = (($244) + -1)|0;
     $246 = $83 & $245;
     $247 = (($246) + ($243))|0;
     $$sroa$0$0$in = (($32) + ($247<<2)|0);
     $$sroa$8$0$in = (((($32) + ($247<<2)|0)) + 1|0);
     $$sroa$10$0$in = (((($32) + ($247<<2)|0)) + 2|0);
     $$sroa$0$0 = HEAP8[$$sroa$0$0$in>>0]|0;
     $$sroa$8$0 = HEAP8[$$sroa$8$0$in>>0]|0;
     $$sroa$10$0 = HEAP16[$$sroa$10$0$in>>1]|0;
     $248 = $$sroa$8$0&255;
     $249 = $83 >>> $248;
     $250 = (($75) - ($248))|0;
     $251 = $$sroa$0$0&255;
     $252 = ($$sroa$0$0<<24>>24)==(0);
     if ($252) {
      label = 6;
      break;
     } else {
      $$sroa$10$0393 = $$sroa$10$0;$70 = $251;$75 = $250;$83 = $249;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $extract$t418 = $$sroa$10$0&255;
     $$lcssa356 = $250;$$lcssa359 = $249;$$sroa$10$0$lcssa$off0 = $extract$t418;
     label = 7;
     break;
    }
    $72 = $$sroa$10$0393&65535;
    $73 = $70 & 15;
    $74 = ($73|0)==(0);
    if ($74) {
     $$0297 = $72;$$3307 = $$1305;$$4323 = $83;$$4332 = $75;
    } else {
     $76 = ($75>>>0)<($73>>>0);
     $77 = ((($$1305)) + 1|0);
     if ($76) {
      $78 = (($75) + 8)|0;
      $79 = HEAP8[$77>>0]|0;
      $80 = $79&255;
      $81 = $80 << $75;
      $82 = (($81) + ($83))|0;
      $$2306 = $77;$$3322 = $82;$$3331 = $78;
     } else {
      $$2306 = $$1305;$$3322 = $83;$$3331 = $75;
     }
     $84 = 1 << $73;
     $85 = (($84) + -1)|0;
     $86 = $$3322 & $85;
     $87 = (($86) + ($72))|0;
     $88 = $$3322 >>> $73;
     $89 = (($$3331) - ($73))|0;
     $$0297 = $87;$$3307 = $$2306;$$4323 = $88;$$4332 = $89;
    }
    $90 = ($$4332>>>0)<(15);
    if ($90) {
     $91 = ((($$3307)) + 1|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $93 << $$4332;
     $95 = (($94) + ($$4323))|0;
     $96 = (($$4332) + 8)|0;
     $97 = ((($$3307)) + 2|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98&255;
     $100 = $99 << $96;
     $101 = (($95) + ($100))|0;
     $102 = (($$4332) + 16)|0;
     $$4308 = $97;$$5324 = $101;$$5333 = $102;
    } else {
     $$4308 = $$3307;$$5324 = $$4323;$$5333 = $$4332;
    }
    $103 = $$5324 & $42;
    $$sroa$0$1$in396 = (($34) + ($103<<2)|0);
    $$sroa$8$1$in397 = (((($34) + ($103<<2)|0)) + 1|0);
    $$sroa$10$1$in398 = (((($34) + ($103<<2)|0)) + 2|0);
    $$sroa$0$1399 = HEAP8[$$sroa$0$1$in396>>0]|0;
    $$sroa$8$1400 = HEAP8[$$sroa$8$1$in397>>0]|0;
    $$sroa$10$1401 = HEAP16[$$sroa$10$1$in398>>1]|0;
    $104 = $$sroa$8$1400&255;
    $105 = $$5324 >>> $104;
    $106 = (($$5333) - ($104))|0;
    $107 = $$sroa$0$1399&255;
    $108 = $107 & 16;
    $109 = ($108|0)==(0);
    if ($109) {
     $$sroa$10$1402 = $$sroa$10$1401;$226 = $107;$232 = $105;$237 = $106;
     while(1) {
      $225 = $226 & 64;
      $227 = ($225|0)==(0);
      if (!($227)) {
       $$7$ph = $$4308;$$9$ph = $232;$$9337$ph = $237;$$sink345 = 16772;
       label = 55;
       break L1;
      }
      $228 = $$sroa$10$1402&65535;
      $229 = 1 << $226;
      $230 = (($229) + -1)|0;
      $231 = $232 & $230;
      $233 = (($231) + ($228))|0;
      $$sroa$0$1$in = (($34) + ($233<<2)|0);
      $$sroa$8$1$in = (((($34) + ($233<<2)|0)) + 1|0);
      $$sroa$10$1$in = (((($34) + ($233<<2)|0)) + 2|0);
      $$sroa$0$1 = HEAP8[$$sroa$0$1$in>>0]|0;
      $$sroa$8$1 = HEAP8[$$sroa$8$1$in>>0]|0;
      $$sroa$10$1 = HEAP16[$$sroa$10$1$in>>1]|0;
      $234 = $$sroa$8$1&255;
      $235 = $232 >>> $234;
      $236 = (($237) - ($234))|0;
      $238 = $$sroa$0$1&255;
      $239 = $238 & 16;
      $240 = ($239|0)==(0);
      if ($240) {
       $$sroa$10$1402 = $$sroa$10$1;$226 = $238;$232 = $235;$237 = $236;
      } else {
       $$lcssa = $238;$$lcssa365 = $236;$$lcssa367 = $235;$$sroa$10$1$lcssa = $$sroa$10$1;
       break;
      }
     }
    } else {
     $$lcssa = $107;$$lcssa365 = $106;$$lcssa367 = $105;$$sroa$10$1$lcssa = $$sroa$10$1401;
    }
    $110 = $$sroa$10$1$lcssa&65535;
    $111 = $$lcssa & 15;
    $112 = ($$lcssa365>>>0)<($111>>>0);
    if ($112) {
     $113 = ((($$4308)) + 1|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = $115 << $$lcssa365;
     $117 = (($116) + ($$lcssa367))|0;
     $118 = (($$lcssa365) + 8)|0;
     $119 = ($118>>>0)<($111>>>0);
     $120 = ((($$4308)) + 2|0);
     if ($119) {
      $121 = (($$lcssa365) + 16)|0;
      $122 = HEAP8[$120>>0]|0;
      $123 = $122&255;
      $124 = $123 << $118;
      $125 = (($124) + ($117))|0;
      $$5309 = $120;$$7326 = $125;$$7335 = $121;
     } else {
      $$5309 = $113;$$7326 = $117;$$7335 = $118;
     }
    } else {
     $$5309 = $$4308;$$7326 = $$lcssa367;$$7335 = $$lcssa365;
    }
    $126 = 1 << $111;
    $127 = (($126) + -1)|0;
    $128 = $$7326 & $127;
    $129 = (($128) + ($110))|0;
    $130 = $$7326 >>> $111;
    $131 = (($$7335) - ($111))|0;
    $132 = $$0310;
    $133 = (($132) - ($43))|0;
    $134 = ($129>>>0)>($133>>>0);
    if (!($134)) {
     $204 = (0 - ($129))|0;
     $205 = (($$0310) + ($204)|0);
     $$2299 = $$0297;$$5 = $205;$$6316 = $$0310;
     while(1) {
      $206 = ((($$5)) + 1|0);
      $207 = HEAP8[$206>>0]|0;
      $208 = ((($$6316)) + 1|0);
      HEAP8[$208>>0] = $207;
      $209 = ((($$5)) + 2|0);
      $210 = HEAP8[$209>>0]|0;
      $211 = ((($$6316)) + 2|0);
      HEAP8[$211>>0] = $210;
      $212 = ((($$5)) + 3|0);
      $213 = HEAP8[$212>>0]|0;
      $214 = ((($$6316)) + 3|0);
      HEAP8[$214>>0] = $213;
      $215 = (($$2299) + -3)|0;
      $216 = ($215>>>0)>(2);
      if ($216) {
       $$2299 = $215;$$5 = $212;$$6316 = $214;
      } else {
       break;
      }
     }
     $217 = ($215|0)==(0);
     if ($217) {
      $$6 = $$5309;$$7317 = $214;$$8327 = $130;$$8336 = $131;
      break;
     }
     $218 = ((($$5)) + 4|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = ((($$6316)) + 4|0);
     HEAP8[$220>>0] = $219;
     $221 = ($215|0)==(1);
     if ($221) {
      $$6 = $$5309;$$7317 = $220;$$8327 = $130;$$8336 = $131;
      break;
     }
     $222 = ((($$5)) + 5|0);
     $223 = HEAP8[$222>>0]|0;
     $224 = ((($$6316)) + 5|0);
     HEAP8[$224>>0] = $223;
     $$6 = $$5309;$$7317 = $224;$$8327 = $130;$$8336 = $131;
     break;
    }
    $135 = (($129) - ($133))|0;
    $136 = ($135>>>0)>($22>>>0);
    if ($136) {
     $137 = HEAP32[$44>>2]|0;
     $138 = ($137|0)==(0);
     if (!($138)) {
      $$7$ph = $$5309;$$9$ph = $130;$$9337$ph = $131;$$sink345 = 16794;
      label = 55;
      break L1;
     }
    }
    do {
     if ($46) {
      $139 = (($20) - ($135))|0;
      $140 = (($45) + ($139)|0);
      $141 = ($$0297>>>0)>($135>>>0);
      if ($141) {
       $142 = (($$0297) - ($135))|0;
       $143 = (($129) - ($132))|0;
       $$0 = $140;$$0300 = $135;$$1311 = $$0310;
       while(1) {
        $144 = ((($$0)) + 1|0);
        $145 = HEAP8[$144>>0]|0;
        $146 = ((($$1311)) + 1|0);
        HEAP8[$146>>0] = $145;
        $147 = (($$0300) + -1)|0;
        $148 = ($147|0)==(0);
        if ($148) {
         break;
        } else {
         $$0 = $144;$$0300 = $147;$$1311 = $146;
        }
       }
       $scevgep473 = (($$0310) + ($43)|0);
       $scevgep474 = (($scevgep473) + ($143)|0);
       $149 = (0 - ($129))|0;
       $150 = (($scevgep474) + ($149)|0);
       $$1298$ph = $142;$$4$ph = $150;$$5315$ph = $scevgep474;
      } else {
       $$1298$ph = $$0297;$$4$ph = $140;$$5315$ph = $$0310;
      }
     } else {
      $151 = ($24>>>0)<($135>>>0);
      if (!($151)) {
       $172 = (($24) - ($135))|0;
       $173 = (($45) + ($172)|0);
       $174 = ($$0297>>>0)>($135>>>0);
       if (!($174)) {
        $$1298$ph = $$0297;$$4$ph = $173;$$5315$ph = $$0310;
        break;
       }
       $175 = (($$0297) - ($135))|0;
       $176 = (($129) - ($132))|0;
       $$3 = $173;$$3303 = $135;$$4314 = $$0310;
       while(1) {
        $177 = ((($$3)) + 1|0);
        $178 = HEAP8[$177>>0]|0;
        $179 = ((($$4314)) + 1|0);
        HEAP8[$179>>0] = $178;
        $180 = (($$3303) + -1)|0;
        $181 = ($180|0)==(0);
        if ($181) {
         break;
        } else {
         $$3 = $177;$$3303 = $180;$$4314 = $179;
        }
       }
       $scevgep = (($$0310) + ($43)|0);
       $scevgep464 = (($scevgep) + ($176)|0);
       $182 = (0 - ($129))|0;
       $183 = (($scevgep464) + ($182)|0);
       $$1298$ph = $175;$$4$ph = $183;$$5315$ph = $scevgep464;
       break;
      }
      $152 = (($47) - ($135))|0;
      $153 = (($45) + ($152)|0);
      $154 = (($135) - ($24))|0;
      $155 = ($$0297>>>0)>($154>>>0);
      if ($155) {
       $156 = (($$0297) - ($154))|0;
       $157 = (($129) - ($132))|0;
       $$1 = $153;$$1301 = $154;$$2312 = $$0310;
       while(1) {
        $158 = ((($$1)) + 1|0);
        $159 = HEAP8[$158>>0]|0;
        $160 = ((($$2312)) + 1|0);
        HEAP8[$160>>0] = $159;
        $161 = (($$1301) + -1)|0;
        $162 = ($161|0)==(0);
        if ($162) {
         break;
        } else {
         $$1 = $158;$$1301 = $161;$$2312 = $160;
        }
       }
       $scevgep466 = (($$0310) + ($48)|0);
       $scevgep467 = (($scevgep466) + ($157)|0);
       $163 = ($156>>>0)>($24>>>0);
       if ($163) {
        $scevgep469 = (($$0310) + ($43)|0);
        $$2 = $45;$$2302 = $24;$$3313 = $scevgep467;
        while(1) {
         $164 = ((($$2)) + 1|0);
         $165 = HEAP8[$164>>0]|0;
         $166 = ((($$3313)) + 1|0);
         HEAP8[$166>>0] = $165;
         $167 = (($$2302) + -1)|0;
         $168 = ($167|0)==(0);
         if ($168) {
          break;
         } else {
          $$2 = $164;$$2302 = $167;$$3313 = $166;
         }
        }
        $169 = (($156) - ($24))|0;
        $scevgep470 = (($scevgep469) + ($157)|0);
        $170 = (0 - ($129))|0;
        $171 = (($scevgep470) + ($170)|0);
        $$1298$ph = $169;$$4$ph = $171;$$5315$ph = $scevgep470;
       } else {
        $$1298$ph = $156;$$4$ph = $45;$$5315$ph = $scevgep467;
       }
      } else {
       $$1298$ph = $$0297;$$4$ph = $153;$$5315$ph = $$0310;
      }
     }
    } while(0);
    $184 = ($$1298$ph>>>0)>(2);
    if ($184) {
     $$1298411 = $$1298$ph;$$4412 = $$4$ph;$$5315410 = $$5315$ph;
     while(1) {
      $185 = ((($$4412)) + 1|0);
      $186 = HEAP8[$185>>0]|0;
      $187 = ((($$5315410)) + 1|0);
      HEAP8[$187>>0] = $186;
      $188 = ((($$4412)) + 2|0);
      $189 = HEAP8[$188>>0]|0;
      $190 = ((($$5315410)) + 2|0);
      HEAP8[$190>>0] = $189;
      $191 = ((($$4412)) + 3|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = ((($$5315410)) + 3|0);
      HEAP8[$193>>0] = $192;
      $194 = (($$1298411) + -3)|0;
      $195 = ($194>>>0)>(2);
      if ($195) {
       $$1298411 = $194;$$4412 = $191;$$5315410 = $193;
      } else {
       $$1298$lcssa = $194;$$4$lcssa = $191;$$5315$lcssa = $193;
       break;
      }
     }
    } else {
     $$1298$lcssa = $$1298$ph;$$4$lcssa = $$4$ph;$$5315$lcssa = $$5315$ph;
    }
    $196 = ($$1298$lcssa|0)==(0);
    if ($196) {
     $$6 = $$5309;$$7317 = $$5315$lcssa;$$8327 = $130;$$8336 = $131;
    } else {
     $197 = ((($$4$lcssa)) + 1|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = ((($$5315$lcssa)) + 1|0);
     HEAP8[$199>>0] = $198;
     $200 = ($$1298$lcssa|0)==(1);
     if ($200) {
      $$6 = $$5309;$$7317 = $199;$$8327 = $130;$$8336 = $131;
     } else {
      $201 = ((($$4$lcssa)) + 2|0);
      $202 = HEAP8[$201>>0]|0;
      $203 = ((($$5315$lcssa)) + 2|0);
      HEAP8[$203>>0] = $202;
      $$6 = $$5309;$$7317 = $203;$$8327 = $130;$$8336 = $131;
     }
    }
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $68 = ((($$0310)) + 1|0);
   HEAP8[$68>>0] = $$sroa$10$0$lcssa$off0;
   $$6 = $$1305;$$7317 = $68;$$8327 = $$lcssa359;$$8336 = $$lcssa356;
  }
  $255 = ($$6>>>0)<($9>>>0);
  $256 = ($$7317>>>0)<($18>>>0);
  $or$cond = $256 & $255;
  if ($or$cond) {
   $$0304 = $$6;$$0310 = $$7317;$$0319 = $$8327;$$0328 = $$8336;
  } else {
   $$10 = $$8327;$$10338 = $$8336;$$8 = $$6;$$8318 = $$7317;
   label = 57;
   break;
  }
 }
 if ((label|0) == 53) {
  $253 = $70 & 32;
  $254 = ($253|0)==(0);
  if ($254) {
   $$7$ph = $$1305;$$9$ph = $83;$$9337$ph = $75;$$sink345 = 16744;
   label = 55;
  } else {
   $$7 = $$1305;$$9 = $83;$$9337 = $75;$$sink = 11;
  }
 }
 else if ((label|0) == 57) {
  $258 = $$10338 >>> 3;
  $259 = (0 - ($258))|0;
  $260 = (($$8) + ($259)|0);
  $261 = $$10338 & 7;
  $262 = 1 << $261;
  $263 = (($262) + -1)|0;
  $264 = $263 & $$10;
  $265 = ((($260)) + 1|0);
  HEAP32[$0>>2] = $265;
  $266 = ((($$8318)) + 1|0);
  HEAP32[$10>>2] = $266;
  $267 = $260;
  $268 = $9;
  $269 = (($268) + 5)|0;
  $270 = (($269) - ($267))|0;
  HEAP32[$6>>2] = $270;
  $271 = $$8318;
  $272 = $18;
  $273 = (($272) + 257)|0;
  $274 = (($273) - ($271))|0;
  HEAP32[$13>>2] = $274;
  HEAP32[$27>>2] = $264;
  HEAP32[$29>>2] = $261;
  return;
 }
 if ((label|0) == 55) {
  $257 = ((($0)) + 24|0);
  HEAP32[$257>>2] = $$sink345;
  $$7 = $$7$ph;$$9 = $$9$ph;$$9337 = $$9337$ph;$$sink = 29;
 }
 HEAP32[$3>>2] = $$sink;
 $$10 = $$9;$$10338 = $$9337;$$8 = $$7;$$8318 = $$0310;
 $258 = $$10338 >>> 3;
 $259 = (0 - ($258))|0;
 $260 = (($$8) + ($259)|0);
 $261 = $$10338 & 7;
 $262 = 1 << $261;
 $263 = (($262) + -1)|0;
 $264 = $263 & $$10;
 $265 = ((($260)) + 1|0);
 HEAP32[$0>>2] = $265;
 $266 = ((($$8318)) + 1|0);
 HEAP32[$10>>2] = $266;
 $267 = $260;
 $268 = $9;
 $269 = (($268) + 5)|0;
 $270 = (($269) - ($267))|0;
 HEAP32[$6>>2] = $270;
 $271 = $$8318;
 $272 = $18;
 $273 = (($272) + 257)|0;
 $274 = (($273) - ($271))|0;
 HEAP32[$13>>2] = $274;
 HEAP32[$27>>2] = $264;
 HEAP32[$29>>2] = $261;
 return;
}
function __tr_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 148|0);
 $2 = ((($0)) + 2840|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 2848|0);
 HEAP32[$3>>2] = 8424;
 $4 = ((($0)) + 2440|0);
 $5 = ((($0)) + 2852|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 2860|0);
 HEAP32[$6>>2] = 8444;
 $7 = ((($0)) + 2684|0);
 $8 = ((($0)) + 2864|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 2872|0);
 HEAP32[$9>>2] = 8464;
 $10 = ((($0)) + 5816|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($0)) + 5820|0);
 HEAP32[$11>>2] = 0;
 _init_block($0);
 return;
}
function _init_block($0) {
 $0 = $0|0;
 var $$019 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$019 = 0;
 while(1) {
  $1 = (((($0)) + 148|0) + ($$019<<2)|0);
  HEAP16[$1>>1] = 0;
  $2 = (($$019) + 1)|0;
  $exitcond = ($2|0)==(286);
  if ($exitcond) {
   break;
  } else {
   $$019 = $2;
  }
 }
 $3 = ((($0)) + 2440|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($0)) + 2444|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($0)) + 2448|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 2452|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($0)) + 2456|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($0)) + 2460|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($0)) + 2464|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($0)) + 2468|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($0)) + 2472|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($0)) + 2476|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($0)) + 2480|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($0)) + 2484|0);
 HEAP16[$14>>1] = 0;
 $15 = ((($0)) + 2488|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($0)) + 2492|0);
 HEAP16[$16>>1] = 0;
 $17 = ((($0)) + 2496|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($0)) + 2500|0);
 HEAP16[$18>>1] = 0;
 $19 = ((($0)) + 2504|0);
 HEAP16[$19>>1] = 0;
 $20 = ((($0)) + 2508|0);
 HEAP16[$20>>1] = 0;
 $21 = ((($0)) + 2512|0);
 HEAP16[$21>>1] = 0;
 $22 = ((($0)) + 2516|0);
 HEAP16[$22>>1] = 0;
 $23 = ((($0)) + 2520|0);
 HEAP16[$23>>1] = 0;
 $24 = ((($0)) + 2524|0);
 HEAP16[$24>>1] = 0;
 $25 = ((($0)) + 2528|0);
 HEAP16[$25>>1] = 0;
 $26 = ((($0)) + 2532|0);
 HEAP16[$26>>1] = 0;
 $27 = ((($0)) + 2536|0);
 HEAP16[$27>>1] = 0;
 $28 = ((($0)) + 2540|0);
 HEAP16[$28>>1] = 0;
 $29 = ((($0)) + 2544|0);
 HEAP16[$29>>1] = 0;
 $30 = ((($0)) + 2548|0);
 HEAP16[$30>>1] = 0;
 $31 = ((($0)) + 2552|0);
 HEAP16[$31>>1] = 0;
 $32 = ((($0)) + 2556|0);
 HEAP16[$32>>1] = 0;
 $33 = ((($0)) + 2684|0);
 HEAP16[$33>>1] = 0;
 $34 = ((($0)) + 2688|0);
 HEAP16[$34>>1] = 0;
 $35 = ((($0)) + 2692|0);
 HEAP16[$35>>1] = 0;
 $36 = ((($0)) + 2696|0);
 HEAP16[$36>>1] = 0;
 $37 = ((($0)) + 2700|0);
 HEAP16[$37>>1] = 0;
 $38 = ((($0)) + 2704|0);
 HEAP16[$38>>1] = 0;
 $39 = ((($0)) + 2708|0);
 HEAP16[$39>>1] = 0;
 $40 = ((($0)) + 2712|0);
 HEAP16[$40>>1] = 0;
 $41 = ((($0)) + 2716|0);
 HEAP16[$41>>1] = 0;
 $42 = ((($0)) + 2720|0);
 HEAP16[$42>>1] = 0;
 $43 = ((($0)) + 2724|0);
 HEAP16[$43>>1] = 0;
 $44 = ((($0)) + 2728|0);
 HEAP16[$44>>1] = 0;
 $45 = ((($0)) + 2732|0);
 HEAP16[$45>>1] = 0;
 $46 = ((($0)) + 2736|0);
 HEAP16[$46>>1] = 0;
 $47 = ((($0)) + 2740|0);
 HEAP16[$47>>1] = 0;
 $48 = ((($0)) + 2744|0);
 HEAP16[$48>>1] = 0;
 $49 = ((($0)) + 2748|0);
 HEAP16[$49>>1] = 0;
 $50 = ((($0)) + 2752|0);
 HEAP16[$50>>1] = 0;
 $51 = ((($0)) + 2756|0);
 HEAP16[$51>>1] = 0;
 $52 = ((($0)) + 1172|0);
 HEAP16[$52>>1] = 1;
 $53 = ((($0)) + 5804|0);
 HEAP32[$53>>2] = 0;
 $54 = ((($0)) + 5800|0);
 HEAP32[$54>>2] = 0;
 $55 = ((($0)) + 5808|0);
 HEAP32[$55>>2] = 0;
 $56 = ((($0)) + 5792|0);
 HEAP32[$56>>2] = 0;
 return;
}
function __tr_stored_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0181$i = 0, $$02$i = 0, $$off0 = 0, $$off0$in = 0, $$sink$i$i = 0, $$sink1$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5820|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(13);
 $7 = $3 & 65535;
 $8 = $7 << $5;
 $9 = ((($0)) + 5816|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $8 | $11;
 $13 = $12&65535;
 HEAP16[$9>>1] = $13;
 if ($6) {
  $14 = $12&255;
  $15 = ((($0)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  $20 = (($16) + ($18)|0);
  HEAP8[$20>>0] = $14;
  $21 = HEAP16[$9>>1]|0;
  $22 = ($21&65535) >>> 8;
  $23 = $22&255;
  $24 = HEAP32[$15>>2]|0;
  $25 = HEAP32[$17>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$17>>2] = $26;
  $27 = (($24) + ($25)|0);
  HEAP8[$27>>0] = $23;
  $28 = HEAP32[$4>>2]|0;
  $29 = (16 - ($28))|0;
  $30 = $7 >>> $29;
  $31 = $30&65535;
  HEAP16[$9>>1] = $31;
  $32 = (($28) + -13)|0;
  $$off0$in = $30;$storemerge = $32;
 } else {
  $33 = (($5) + 3)|0;
  $$off0$in = $12;$storemerge = $33;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$4>>2] = $storemerge;
 $34 = ($storemerge|0)>(8);
 if ($34) {
  $35 = ((($0)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($0)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$37>>2] = $39;
  $40 = (($36) + ($38)|0);
  HEAP8[$40>>0] = $$off0;
  $41 = HEAP16[$9>>1]|0;
  $42 = ($41&65535) >>> 8;
  $43 = $42&255;
  $44 = HEAP32[$35>>2]|0;
  $45 = HEAP32[$37>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$37>>2] = $46;
  $47 = (($44) + ($45)|0);
  $$sink$i$i = $43;$$sink1$i$i = $47;
  label = 8;
 } else {
  $48 = ($storemerge|0)>(0);
  if ($48) {
   $49 = ((($0)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($0)) + 20|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$51>>2] = $53;
   $54 = (($50) + ($52)|0);
   $$sink$i$i = $$off0;$$sink1$i$i = $54;
   label = 8;
  }
 }
 if ((label|0) == 8) {
  HEAP8[$$sink1$i$i>>0] = $$sink$i$i;
 }
 HEAP16[$9>>1] = 0;
 HEAP32[$4>>2] = 0;
 $55 = $2&255;
 $56 = ((($0)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($0)) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[$58>>2] = $60;
 $61 = (($57) + ($59)|0);
 HEAP8[$61>>0] = $55;
 $62 = $2 >>> 8;
 $63 = $62&255;
 $64 = HEAP32[$56>>2]|0;
 $65 = HEAP32[$58>>2]|0;
 $66 = (($65) + 1)|0;
 HEAP32[$58>>2] = $66;
 $67 = (($64) + ($65)|0);
 HEAP8[$67>>0] = $63;
 $68 = $2 & 65535;
 $69 = $68 ^ 65535;
 $70 = $69&255;
 $71 = HEAP32[$56>>2]|0;
 $72 = HEAP32[$58>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[$58>>2] = $73;
 $74 = (($71) + ($72)|0);
 HEAP8[$74>>0] = $70;
 $75 = $69 >>> 8;
 $76 = $75&255;
 $77 = HEAP32[$56>>2]|0;
 $78 = HEAP32[$58>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[$58>>2] = $79;
 $80 = (($77) + ($78)|0);
 HEAP8[$80>>0] = $76;
 $81 = ($2|0)==(0);
 if ($81) {
  return;
 } else {
  $$0181$i = $2;$$02$i = $1;
 }
 while(1) {
  $82 = (($$0181$i) + -1)|0;
  $83 = ((($$02$i)) + 1|0);
  $84 = HEAP8[$$02$i>>0]|0;
  $85 = HEAP32[$56>>2]|0;
  $86 = HEAP32[$58>>2]|0;
  $87 = (($86) + 1)|0;
  HEAP32[$58>>2] = $87;
  $88 = (($85) + ($86)|0);
  HEAP8[$88>>0] = $84;
  $89 = ($82|0)==(0);
  if ($89) {
   break;
  } else {
   $$0181$i = $82;$$02$i = $83;
  }
 }
 return;
}
function __tr_flush_bits($0) {
 $0 = $0|0;
 var $$sink$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5820|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(16);
 do {
  if ($3) {
   $4 = ((($0)) + 5816|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&255;
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 1)|0;
   HEAP32[$9>>2] = $11;
   $12 = (($8) + ($10)|0);
   HEAP8[$12>>0] = $6;
   $13 = HEAP16[$4>>1]|0;
   $14 = ($13&65535) >>> 8;
   $15 = $14&255;
   $16 = HEAP32[$7>>2]|0;
   $17 = HEAP32[$9>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[$9>>2] = $18;
   $19 = (($16) + ($17)|0);
   HEAP8[$19>>0] = $15;
   HEAP16[$4>>1] = 0;
   $$sink$i = 0;
  } else {
   $20 = ($2|0)>(7);
   if ($20) {
    $21 = ((($0)) + 5816|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $22&255;
    $24 = ((($0)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($0)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$26>>2] = $28;
    $29 = (($25) + ($27)|0);
    HEAP8[$29>>0] = $23;
    $30 = HEAP16[$21>>1]|0;
    $31 = ($30&65535) >>> 8;
    HEAP16[$21>>1] = $31;
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + -8)|0;
    $$sink$i = $33;
    break;
   } else {
    return;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $$sink$i;
 return;
}
function __tr_align($0) {
 $0 = $0|0;
 var $$off0 = 0, $$off0$in = 0, $$off049 = 0, $$sink$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5820|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(13);
 $4 = 2 << $2;
 $5 = ((($0)) + 5816|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $4 | $7;
 $9 = $8&65535;
 HEAP16[$5>>1] = $9;
 if ($3) {
  $10 = $8&255;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = (($12) + ($14)|0);
  HEAP8[$16>>0] = $10;
  $17 = HEAP16[$5>>1]|0;
  $18 = ($17&65535) >>> 8;
  $19 = $18&255;
  $20 = HEAP32[$11>>2]|0;
  $21 = HEAP32[$13>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$13>>2] = $22;
  $23 = (($20) + ($21)|0);
  HEAP8[$23>>0] = $19;
  $24 = HEAP32[$1>>2]|0;
  $25 = (16 - ($24))|0;
  $26 = 2 >>> $25;
  $27 = $26&65535;
  HEAP16[$5>>1] = $27;
  $28 = (($24) + -13)|0;
  $$off0$in = $26;$storemerge = $28;
 } else {
  $29 = (($2) + 3)|0;
  $$off0$in = $8;$storemerge = $29;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$1>>2] = $storemerge;
 $30 = ($storemerge|0)>(9);
 if ($30) {
  $31 = ((($0)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  $36 = (($32) + ($34)|0);
  HEAP8[$36>>0] = $$off0;
  $37 = HEAP16[$5>>1]|0;
  $38 = ($37&65535) >>> 8;
  $39 = $38&255;
  $40 = HEAP32[$31>>2]|0;
  $41 = HEAP32[$33>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$33>>2] = $42;
  $43 = (($40) + ($41)|0);
  HEAP8[$43>>0] = $39;
  HEAP16[$5>>1] = 0;
  $44 = HEAP32[$1>>2]|0;
  $45 = (($44) + -9)|0;
  $$off049 = 0;$storemerge47 = $45;
 } else {
  $46 = (($storemerge) + 7)|0;
  $$off049 = $$off0;$storemerge47 = $46;
 }
 HEAP32[$1>>2] = $storemerge47;
 $47 = ($storemerge47|0)==(16);
 do {
  if ($47) {
   $48 = ((($0)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($0)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$50>>2] = $52;
   $53 = (($49) + ($51)|0);
   HEAP8[$53>>0] = $$off049;
   $54 = HEAP16[$5>>1]|0;
   $55 = ($54&65535) >>> 8;
   $56 = $55&255;
   $57 = HEAP32[$48>>2]|0;
   $58 = HEAP32[$50>>2]|0;
   $59 = (($58) + 1)|0;
   HEAP32[$50>>2] = $59;
   $60 = (($57) + ($58)|0);
   HEAP8[$60>>0] = $56;
   HEAP16[$5>>1] = 0;
   $$sink$i = 0;
  } else {
   $61 = ($storemerge47|0)>(7);
   if ($61) {
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($0)) + 20|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + 1)|0;
    HEAP32[$64>>2] = $66;
    $67 = (($63) + ($65)|0);
    HEAP8[$67>>0] = $$off049;
    $68 = HEAP16[$5>>1]|0;
    $69 = ($68&65535) >>> 8;
    HEAP16[$5>>1] = $69;
    $70 = HEAP32[$1>>2]|0;
    $71 = (($70) + -8)|0;
    $$sink$i = $71;
    break;
   } else {
    return;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $$sink$i;
 return;
}
function __tr_flush_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$58$i$i = 0, $$$58$i29$i = 0, $$$59$i$i = 0, $$$59$i30$i = 0, $$$i = 0, $$$i$i = 0, $$$i15$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0118$i = 0, $$017$i = 0, $$051$i$i = 0, $$051$i24$i = 0, $$053$ph$i$i = 0, $$053$ph$i19$i = 0, $$054$i$i = 0, $$054$i23$i = 0, $$054$ph$i$i = 0, $$054$ph$i18$i = 0;
 var $$055$ph$i$i = 0, $$055$ph$i$i$phi = 0, $$055$ph$i17$i = 0, $$055$ph$i17$i$phi = 0, $$092 = 0, $$093 = 0, $$1$ph$i$i = 0, $$1$ph$i21$i = 0, $$119$i = 0, $$149$ph$i$i = 0, $$149$ph$i20$i = 0, $$57$i$i = 0, $$57$i16$i = 0, $$58$i$i = 0, $$58$i28$i = 0, $$pre = 0, $$pre$phi119Z2D = 0, $$pre$phiZ2D = 0, $$pre118 = 0, $$sink$i = 0;
 var $$sink$i$i = 0, $$sink$i26$i = 0, $$sink$sink5$i$i = 0, $$sink$sink5$i27$i = 0, $$sink1$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $or$cond = 0, $or$cond$i$i = 0, $or$cond$i25$i = 0, $or$cond95 = 0, $storemerge = 0, $storemerge116$i = 0, $storemerge117$i = 0, $storemerge94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 132|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(2);
  if ($10) {
   $11 = ((($0)) + 148|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12<<16>>16)==(0);
   L5: do {
    if ($13) {
     $25 = ((($0)) + 152|0);
     $26 = HEAP16[$25>>1]|0;
     $27 = ($26<<16>>16)==(0);
     if ($27) {
      $28 = ((($0)) + 156|0);
      $29 = HEAP16[$28>>1]|0;
      $30 = ($29<<16>>16)==(0);
      if ($30) {
       $31 = ((($0)) + 160|0);
       $32 = HEAP16[$31>>1]|0;
       $33 = ($32<<16>>16)==(0);
       if ($33) {
        $34 = ((($0)) + 164|0);
        $35 = HEAP16[$34>>1]|0;
        $36 = ($35<<16>>16)==(0);
        if ($36) {
         $37 = ((($0)) + 168|0);
         $38 = HEAP16[$37>>1]|0;
         $39 = ($38<<16>>16)==(0);
         if ($39) {
          $40 = ((($0)) + 172|0);
          $41 = HEAP16[$40>>1]|0;
          $42 = ($41<<16>>16)==(0);
          if ($42) {
           $43 = ((($0)) + 204|0);
           $44 = HEAP16[$43>>1]|0;
           $45 = ($44<<16>>16)==(0);
           if ($45) {
            $46 = ((($0)) + 208|0);
            $47 = HEAP16[$46>>1]|0;
            $48 = ($47<<16>>16)==(0);
            if ($48) {
             $49 = ((($0)) + 212|0);
             $50 = HEAP16[$49>>1]|0;
             $51 = ($50<<16>>16)==(0);
             if ($51) {
              $52 = ((($0)) + 216|0);
              $53 = HEAP16[$52>>1]|0;
              $54 = ($53<<16>>16)==(0);
              if ($54) {
               $55 = ((($0)) + 220|0);
               $56 = HEAP16[$55>>1]|0;
               $57 = ($56<<16>>16)==(0);
               if ($57) {
                $58 = ((($0)) + 224|0);
                $59 = HEAP16[$58>>1]|0;
                $60 = ($59<<16>>16)==(0);
                if ($60) {
                 $61 = ((($0)) + 228|0);
                 $62 = HEAP16[$61>>1]|0;
                 $63 = ($62<<16>>16)==(0);
                 if ($63) {
                  $64 = ((($0)) + 232|0);
                  $65 = HEAP16[$64>>1]|0;
                  $66 = ($65<<16>>16)==(0);
                  if ($66) {
                   $67 = ((($0)) + 236|0);
                   $68 = HEAP16[$67>>1]|0;
                   $69 = ($68<<16>>16)==(0);
                   if (!($69)) {
                    $$017$i = 0;
                    break;
                   }
                   $70 = ((($0)) + 240|0);
                   $71 = HEAP16[$70>>1]|0;
                   $72 = ($71<<16>>16)==(0);
                   if (!($72)) {
                    $$017$i = 0;
                    break;
                   }
                   $73 = ((($0)) + 244|0);
                   $74 = HEAP16[$73>>1]|0;
                   $75 = ($74<<16>>16)==(0);
                   if (!($75)) {
                    $$017$i = 0;
                    break;
                   }
                   $76 = ((($0)) + 248|0);
                   $77 = HEAP16[$76>>1]|0;
                   $78 = ($77<<16>>16)==(0);
                   if (!($78)) {
                    $$017$i = 0;
                    break;
                   }
                   $79 = ((($0)) + 260|0);
                   $80 = HEAP16[$79>>1]|0;
                   $81 = ($80<<16>>16)==(0);
                   if (!($81)) {
                    $$017$i = 0;
                    break;
                   }
                   $82 = ((($0)) + 264|0);
                   $83 = HEAP16[$82>>1]|0;
                   $84 = ($83<<16>>16)==(0);
                   if (!($84)) {
                    $$017$i = 0;
                    break;
                   }
                   $85 = ((($0)) + 268|0);
                   $86 = HEAP16[$85>>1]|0;
                   $87 = ($86<<16>>16)==(0);
                   if (!($87)) {
                    $$017$i = 0;
                    break;
                   }
                   $88 = ((($0)) + 272|0);
                   $89 = HEAP16[$88>>1]|0;
                   $90 = ($89<<16>>16)==(0);
                   if (!($90)) {
                    $$017$i = 0;
                    break;
                   }
                   $91 = ((($0)) + 184|0);
                   $92 = HEAP16[$91>>1]|0;
                   $93 = ($92<<16>>16)==(0);
                   if (!($93)) {
                    $$017$i = 1;
                    break;
                   }
                   $14 = ((($0)) + 188|0);
                   $15 = HEAP16[$14>>1]|0;
                   $16 = ($15<<16>>16)==(0);
                   if (!($16)) {
                    $$017$i = 1;
                    break;
                   }
                   $17 = ((($0)) + 200|0);
                   $18 = HEAP16[$17>>1]|0;
                   $19 = ($18<<16>>16)==(0);
                   if ($19) {
                    $$119$i = 32;
                   } else {
                    $$017$i = 1;
                    break;
                   }
                   while(1) {
                    $22 = (((($0)) + 148|0) + ($$119$i<<2)|0);
                    $23 = HEAP16[$22>>1]|0;
                    $24 = ($23<<16>>16)==(0);
                    if (!($24)) {
                     $$017$i = 1;
                     break L5;
                    }
                    $20 = (($$119$i) + 1)|0;
                    $21 = ($$119$i|0)<(255);
                    if ($21) {
                     $$119$i = $20;
                    } else {
                     $$017$i = 0;
                     break;
                    }
                   }
                  } else {
                   $$017$i = 0;
                  }
                 } else {
                  $$017$i = 0;
                 }
                } else {
                 $$017$i = 0;
                }
               } else {
                $$017$i = 0;
               }
              } else {
               $$017$i = 0;
              }
             } else {
              $$017$i = 0;
             }
            } else {
             $$017$i = 0;
            }
           } else {
            $$017$i = 0;
           }
          } else {
           $$017$i = 0;
          }
         } else {
          $$017$i = 0;
         }
        } else {
         $$017$i = 0;
        }
       } else {
        $$017$i = 0;
       }
      } else {
       $$017$i = 0;
      }
     } else {
      $$017$i = 0;
     }
    } else {
     $$017$i = 0;
    }
   } while(0);
   HEAP32[$8>>2] = $$017$i;
  }
  $94 = ((($0)) + 2840|0);
  _build_tree($0,$94);
  $95 = ((($0)) + 2852|0);
  _build_tree($0,$95);
  $96 = ((($0)) + 2844|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($0)) + 150|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99&65535;
  $101 = ($99<<16>>16)==(0);
  $$$i$i = $101 ? 138 : 7;
  $$57$i$i = $101 ? 3 : 4;
  $102 = (($97) + 1)|0;
  $103 = (((((($0)) + 148|0) + ($102<<2)|0)) + 2|0);
  HEAP16[$103>>1] = -1;
  $104 = ((($0)) + 2756|0);
  $105 = ((($0)) + 2752|0);
  $106 = ((($0)) + 2748|0);
  $$053$ph$i$i = $100;$$054$ph$i$i = 0;$$055$ph$i$i = -1;$$1$ph$i$i = $$57$i$i;$$149$ph$i$i = $$$i$i;
  L36: while(1) {
   $$051$i$i = 0;$$054$i$i = $$054$ph$i$i;
   while(1) {
    $107 = ($$054$i$i|0)>($97|0);
    if ($107) {
     break L36;
    }
    $108 = (($$054$i$i) + 1)|0;
    $109 = (((((($0)) + 148|0) + ($108<<2)|0)) + 2|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110&65535;
    $112 = (($$051$i$i) + 1)|0;
    $113 = ($112|0)<($$149$ph$i$i|0);
    $114 = ($$053$ph$i$i|0)==($111|0);
    $or$cond$i$i = $113 & $114;
    if ($or$cond$i$i) {
     $$051$i$i = $112;$$054$i$i = $108;
    } else {
     break;
    }
   }
   $115 = ($112|0)<($$1$ph$i$i|0);
   if ($115) {
    $116 = (((($0)) + 2684|0) + ($$053$ph$i$i<<2)|0);
    $117 = HEAP16[$116>>1]|0;
    $118 = $117&65535;
    $119 = (($112) + ($118))|0;
    $120 = $119&65535;
    HEAP16[$116>>1] = $120;
   } else {
    $121 = ($$053$ph$i$i|0)==(0);
    if ($121) {
     $126 = ($$051$i$i|0)<(10);
     $$sink$i$i = $126 ? $105 : $104;
     $$sink$sink5$i$i = $$sink$i$i;
    } else {
     $122 = ($$053$ph$i$i|0)==($$055$ph$i$i|0);
     $123 = (((($0)) + 2684|0) + ($$053$ph$i$i<<2)|0);
     if ($122) {
      $$sink$sink5$i$i = $106;
     } else {
      $124 = HEAP16[$123>>1]|0;
      $125 = (($124) + 1)<<16>>16;
      HEAP16[$123>>1] = $125;
      $$sink$sink5$i$i = $106;
     }
    }
    $127 = HEAP16[$$sink$sink5$i$i>>1]|0;
    $128 = (($127) + 1)<<16>>16;
    HEAP16[$$sink$sink5$i$i>>1] = $128;
   }
   $129 = ($110<<16>>16)==(0);
   $$58$i$i = $114 ? 6 : 7;
   $$$58$i$i = $129 ? 138 : $$58$i$i;
   $130 = $129 | $114;
   $$$59$i$i = $130 ? 3 : 4;
   $$055$ph$i$i$phi = $$053$ph$i$i;$$053$ph$i$i = $111;$$054$ph$i$i = $108;$$1$ph$i$i = $$$59$i$i;$$149$ph$i$i = $$$58$i$i;$$055$ph$i$i = $$055$ph$i$i$phi;
  }
  $131 = ((($0)) + 2856|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ((($0)) + 2442|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = $134&65535;
  $136 = ($134<<16>>16)==(0);
  $$$i15$i = $136 ? 138 : 7;
  $$57$i16$i = $136 ? 3 : 4;
  $137 = (($132) + 1)|0;
  $138 = (((((($0)) + 2440|0) + ($137<<2)|0)) + 2|0);
  HEAP16[$138>>1] = -1;
  $$053$ph$i19$i = $135;$$054$ph$i18$i = 0;$$055$ph$i17$i = -1;$$1$ph$i21$i = $$57$i16$i;$$149$ph$i20$i = $$$i15$i;
  L52: while(1) {
   $$051$i24$i = 0;$$054$i23$i = $$054$ph$i18$i;
   while(1) {
    $139 = ($$054$i23$i|0)>($132|0);
    if ($139) {
     break L52;
    }
    $140 = (($$054$i23$i) + 1)|0;
    $141 = (((((($0)) + 2440|0) + ($140<<2)|0)) + 2|0);
    $142 = HEAP16[$141>>1]|0;
    $143 = $142&65535;
    $144 = (($$051$i24$i) + 1)|0;
    $145 = ($144|0)<($$149$ph$i20$i|0);
    $146 = ($$053$ph$i19$i|0)==($143|0);
    $or$cond$i25$i = $145 & $146;
    if ($or$cond$i25$i) {
     $$051$i24$i = $144;$$054$i23$i = $140;
    } else {
     break;
    }
   }
   $147 = ($144|0)<($$1$ph$i21$i|0);
   if ($147) {
    $148 = (((($0)) + 2684|0) + ($$053$ph$i19$i<<2)|0);
    $149 = HEAP16[$148>>1]|0;
    $150 = $149&65535;
    $151 = (($144) + ($150))|0;
    $152 = $151&65535;
    HEAP16[$148>>1] = $152;
   } else {
    $153 = ($$053$ph$i19$i|0)==(0);
    if ($153) {
     $158 = ($$051$i24$i|0)<(10);
     $$sink$i26$i = $158 ? $105 : $104;
     $$sink$sink5$i27$i = $$sink$i26$i;
    } else {
     $154 = ($$053$ph$i19$i|0)==($$055$ph$i17$i|0);
     $155 = (((($0)) + 2684|0) + ($$053$ph$i19$i<<2)|0);
     if ($154) {
      $$sink$sink5$i27$i = $106;
     } else {
      $156 = HEAP16[$155>>1]|0;
      $157 = (($156) + 1)<<16>>16;
      HEAP16[$155>>1] = $157;
      $$sink$sink5$i27$i = $106;
     }
    }
    $159 = HEAP16[$$sink$sink5$i27$i>>1]|0;
    $160 = (($159) + 1)<<16>>16;
    HEAP16[$$sink$sink5$i27$i>>1] = $160;
   }
   $161 = ($142<<16>>16)==(0);
   $$58$i28$i = $146 ? 6 : 7;
   $$$58$i29$i = $161 ? 138 : $$58$i28$i;
   $162 = $161 | $146;
   $$$59$i30$i = $162 ? 3 : 4;
   $$055$ph$i17$i$phi = $$053$ph$i19$i;$$053$ph$i19$i = $143;$$054$ph$i18$i = $140;$$1$ph$i21$i = $$$59$i30$i;$$149$ph$i20$i = $$$58$i29$i;$$055$ph$i17$i = $$055$ph$i17$i$phi;
  }
  $163 = ((($0)) + 2864|0);
  _build_tree($0,$163);
  $164 = ((($0)) + 2746|0);
  $165 = HEAP16[$164>>1]|0;
  $166 = ($165<<16>>16)==(0);
  if ($166) {
   $167 = ((($0)) + 2690|0);
   $168 = HEAP16[$167>>1]|0;
   $169 = ($168<<16>>16)==(0);
   if ($169) {
    $170 = ((($0)) + 2742|0);
    $171 = HEAP16[$170>>1]|0;
    $172 = ($171<<16>>16)==(0);
    if ($172) {
     $173 = ((($0)) + 2694|0);
     $174 = HEAP16[$173>>1]|0;
     $175 = ($174<<16>>16)==(0);
     if ($175) {
      $176 = ((($0)) + 2738|0);
      $177 = HEAP16[$176>>1]|0;
      $178 = ($177<<16>>16)==(0);
      if ($178) {
       $179 = ((($0)) + 2698|0);
       $180 = HEAP16[$179>>1]|0;
       $181 = ($180<<16>>16)==(0);
       if ($181) {
        $182 = ((($0)) + 2734|0);
        $183 = HEAP16[$182>>1]|0;
        $184 = ($183<<16>>16)==(0);
        if ($184) {
         $185 = ((($0)) + 2702|0);
         $186 = HEAP16[$185>>1]|0;
         $187 = ($186<<16>>16)==(0);
         if ($187) {
          $188 = ((($0)) + 2730|0);
          $189 = HEAP16[$188>>1]|0;
          $190 = ($189<<16>>16)==(0);
          if ($190) {
           $191 = ((($0)) + 2706|0);
           $192 = HEAP16[$191>>1]|0;
           $193 = ($192<<16>>16)==(0);
           if ($193) {
            $194 = ((($0)) + 2726|0);
            $195 = HEAP16[$194>>1]|0;
            $196 = ($195<<16>>16)==(0);
            if ($196) {
             $197 = ((($0)) + 2710|0);
             $198 = HEAP16[$197>>1]|0;
             $199 = ($198<<16>>16)==(0);
             if ($199) {
              $200 = ((($0)) + 2722|0);
              $201 = HEAP16[$200>>1]|0;
              $202 = ($201<<16>>16)==(0);
              if ($202) {
               $203 = ((($0)) + 2714|0);
               $204 = HEAP16[$203>>1]|0;
               $205 = ($204<<16>>16)==(0);
               if ($205) {
                $206 = ((($0)) + 2718|0);
                $207 = HEAP16[$206>>1]|0;
                $208 = ($207<<16>>16)==(0);
                if ($208) {
                 $209 = ((($0)) + 2686|0);
                 $210 = HEAP16[$209>>1]|0;
                 $211 = ($210<<16>>16)==(0);
                 $$$i = $211 ? 2 : 3;
                 $$0$lcssa$i = $$$i;
                } else {
                 $$0$lcssa$i = 4;
                }
               } else {
                $$0$lcssa$i = 5;
               }
              } else {
               $$0$lcssa$i = 6;
              }
             } else {
              $$0$lcssa$i = 7;
             }
            } else {
             $$0$lcssa$i = 8;
            }
           } else {
            $$0$lcssa$i = 9;
           }
          } else {
           $$0$lcssa$i = 10;
          }
         } else {
          $$0$lcssa$i = 11;
         }
        } else {
         $$0$lcssa$i = 12;
        }
       } else {
        $$0$lcssa$i = 13;
       }
      } else {
       $$0$lcssa$i = 14;
      }
     } else {
      $$0$lcssa$i = 15;
     }
    } else {
     $$0$lcssa$i = 16;
    }
   } else {
    $$0$lcssa$i = 17;
   }
  } else {
   $$0$lcssa$i = 18;
  }
  $212 = ($$0$lcssa$i*3)|0;
  $213 = (($212) + 17)|0;
  $214 = ((($0)) + 5800|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = (($213) + ($215))|0;
  HEAP32[$214>>2] = $216;
  $217 = (($216) + 10)|0;
  $218 = $217 >>> 3;
  $219 = ((($0)) + 5804|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = (($220) + 10)|0;
  $222 = $221 >>> 3;
  $223 = ($222>>>0)>($218>>>0);
  $$ = $223 ? $218 : $222;
  $$0 = $$;$$092 = $222;$$093 = $$0$lcssa$i;
 } else {
  $224 = (($2) + 5)|0;
  $$0 = $224;$$092 = $224;$$093 = 0;
 }
 $225 = (($2) + 4)|0;
 $226 = ($225>>>0)<=($$0>>>0);
 $227 = ($1|0)!=(0|0);
 $or$cond = $227 & $226;
 do {
  if ($or$cond) {
   __tr_stored_block($0,$1,$2,$3);
  } else {
   $228 = ((($0)) + 136|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = ($229|0)==(4);
   $231 = ($$092|0)==($$0|0);
   $or$cond95 = $231 | $230;
   $232 = ((($0)) + 5820|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ($233|0)>(13);
   if ($or$cond95) {
    $235 = (($3) + 2)|0;
    $236 = $235 & 65535;
    $237 = $236 << $233;
    $238 = ((($0)) + 5816|0);
    $239 = HEAP16[$238>>1]|0;
    $240 = $239&65535;
    $241 = $237 | $240;
    $242 = $241&65535;
    HEAP16[$238>>1] = $242;
    if ($234) {
     $243 = $241&255;
     $244 = ((($0)) + 8|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = ((($0)) + 20|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 1)|0;
     HEAP32[$246>>2] = $248;
     $249 = (($245) + ($247)|0);
     HEAP8[$249>>0] = $243;
     $250 = HEAP16[$238>>1]|0;
     $251 = ($250&65535) >>> 8;
     $252 = $251&255;
     $253 = HEAP32[$244>>2]|0;
     $254 = HEAP32[$246>>2]|0;
     $255 = (($254) + 1)|0;
     HEAP32[$246>>2] = $255;
     $256 = (($253) + ($254)|0);
     HEAP8[$256>>0] = $252;
     $257 = HEAP32[$232>>2]|0;
     $258 = (16 - ($257))|0;
     $259 = $236 >>> $258;
     $260 = $259&65535;
     HEAP16[$238>>1] = $260;
     $261 = (($257) + -13)|0;
     $storemerge94 = $261;
    } else {
     $262 = (($233) + 3)|0;
     $storemerge94 = $262;
    }
    HEAP32[$232>>2] = $storemerge94;
    _compress_block($0,12622,12502);
    break;
   }
   $263 = (($3) + 4)|0;
   $264 = $263 & 65535;
   $265 = $264 << $233;
   $266 = ((($0)) + 5816|0);
   $267 = HEAP16[$266>>1]|0;
   $268 = $267&65535;
   $269 = $265 | $268;
   $270 = $269&65535;
   HEAP16[$266>>1] = $270;
   if ($234) {
    $271 = $269&255;
    $272 = ((($0)) + 8|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ((($0)) + 20|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($275) + 1)|0;
    HEAP32[$274>>2] = $276;
    $277 = (($273) + ($275)|0);
    HEAP8[$277>>0] = $271;
    $278 = HEAP16[$266>>1]|0;
    $279 = ($278&65535) >>> 8;
    $280 = $279&255;
    $281 = HEAP32[$272>>2]|0;
    $282 = HEAP32[$274>>2]|0;
    $283 = (($282) + 1)|0;
    HEAP32[$274>>2] = $283;
    $284 = (($281) + ($282)|0);
    HEAP8[$284>>0] = $280;
    $285 = HEAP32[$232>>2]|0;
    $286 = (16 - ($285))|0;
    $287 = $264 >>> $286;
    $288 = $287&65535;
    HEAP16[$266>>1] = $288;
    $289 = (($285) + -13)|0;
    $300 = $287;$storemerge = $289;
   } else {
    $290 = (($233) + 3)|0;
    $300 = $269;$storemerge = $290;
   }
   HEAP32[$232>>2] = $storemerge;
   $291 = ((($0)) + 2844|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = ((($0)) + 2856|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = ($storemerge|0)>(11);
   $296 = (($292) + 65280)|0;
   $297 = $296 & 65535;
   $298 = $297 << $storemerge;
   $299 = $300 & 65535;
   $301 = $298 | $299;
   $302 = $301&65535;
   HEAP16[$266>>1] = $302;
   if ($295) {
    $303 = $301&255;
    $304 = ((($0)) + 8|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = ((($0)) + 20|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = (($307) + 1)|0;
    HEAP32[$306>>2] = $308;
    $309 = (($305) + ($307)|0);
    HEAP8[$309>>0] = $303;
    $310 = HEAP16[$266>>1]|0;
    $311 = ($310&65535) >>> 8;
    $312 = $311&255;
    $313 = HEAP32[$304>>2]|0;
    $314 = HEAP32[$306>>2]|0;
    $315 = (($314) + 1)|0;
    HEAP32[$306>>2] = $315;
    $316 = (($313) + ($314)|0);
    HEAP8[$316>>0] = $312;
    $317 = HEAP32[$232>>2]|0;
    $318 = (16 - ($317))|0;
    $319 = $297 >>> $318;
    $320 = $319&65535;
    HEAP16[$266>>1] = $320;
    $321 = (($317) + -11)|0;
    $323 = $321;$328 = $319;
   } else {
    $322 = (($storemerge) + 5)|0;
    $323 = $322;$328 = $301;
   }
   HEAP32[$232>>2] = $323;
   $324 = ($323|0)>(11);
   $325 = $294 & 65535;
   $326 = $325 << $323;
   $327 = $328 & 65535;
   $329 = $326 | $327;
   $330 = $329&65535;
   HEAP16[$266>>1] = $330;
   if ($324) {
    $331 = $329&255;
    $332 = ((($0)) + 8|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = ((($0)) + 20|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = (($335) + 1)|0;
    HEAP32[$334>>2] = $336;
    $337 = (($333) + ($335)|0);
    HEAP8[$337>>0] = $331;
    $338 = HEAP16[$266>>1]|0;
    $339 = ($338&65535) >>> 8;
    $340 = $339&255;
    $341 = HEAP32[$332>>2]|0;
    $342 = HEAP32[$334>>2]|0;
    $343 = (($342) + 1)|0;
    HEAP32[$334>>2] = $343;
    $344 = (($341) + ($342)|0);
    HEAP8[$344>>0] = $340;
    $345 = HEAP32[$232>>2]|0;
    $346 = (16 - ($345))|0;
    $347 = $325 >>> $346;
    $348 = $347&65535;
    HEAP16[$266>>1] = $348;
    $349 = (($345) + -11)|0;
    $351 = $349;$357 = $347;
   } else {
    $350 = (($323) + 5)|0;
    $351 = $350;$357 = $329;
   }
   HEAP32[$232>>2] = $351;
   $352 = ($351|0)>(12);
   $353 = (($$093) + 65533)|0;
   $354 = $353 & 65535;
   $355 = $354 << $351;
   $356 = $357 & 65535;
   $358 = $355 | $356;
   $359 = $358&65535;
   HEAP16[$266>>1] = $359;
   if ($352) {
    $360 = $358&255;
    $361 = ((($0)) + 8|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = ((($0)) + 20|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = (($364) + 1)|0;
    HEAP32[$363>>2] = $365;
    $366 = (($362) + ($364)|0);
    HEAP8[$366>>0] = $360;
    $367 = HEAP16[$266>>1]|0;
    $368 = ($367&65535) >>> 8;
    $369 = $368&255;
    $370 = HEAP32[$361>>2]|0;
    $371 = HEAP32[$363>>2]|0;
    $372 = (($371) + 1)|0;
    HEAP32[$363>>2] = $372;
    $373 = (($370) + ($371)|0);
    HEAP8[$373>>0] = $369;
    $374 = HEAP32[$232>>2]|0;
    $375 = (16 - ($374))|0;
    $376 = $354 >>> $375;
    $377 = $376&65535;
    HEAP16[$266>>1] = $377;
    $378 = (($374) + -12)|0;
    $$pre$phi119Z2D = $363;$$pre$phiZ2D = $361;$445 = $376;$storemerge116$i = $378;
   } else {
    $379 = (($351) + 4)|0;
    $$pre = ((($0)) + 8|0);
    $$pre118 = ((($0)) + 20|0);
    $$pre$phi119Z2D = $$pre118;$$pre$phiZ2D = $$pre;$445 = $358;$storemerge116$i = $379;
   }
   HEAP32[$232>>2] = $storemerge116$i;
   $$0118$i = 0;$380 = $storemerge116$i;$390 = $445;
   while(1) {
    $381 = ($380|0)>(13);
    $382 = (17592 + ($$0118$i)|0);
    $383 = HEAP8[$382>>0]|0;
    $384 = $383&255;
    $385 = (((((($0)) + 2684|0) + ($384<<2)|0)) + 2|0);
    $386 = HEAP16[$385>>1]|0;
    $387 = $386&65535;
    $388 = $387 << $380;
    $389 = $390 & 65535;
    $391 = $388 | $389;
    $392 = $391&65535;
    HEAP16[$266>>1] = $392;
    if ($381) {
     $393 = $391&255;
     $394 = HEAP32[$$pre$phiZ2D>>2]|0;
     $395 = HEAP32[$$pre$phi119Z2D>>2]|0;
     $396 = (($395) + 1)|0;
     HEAP32[$$pre$phi119Z2D>>2] = $396;
     $397 = (($394) + ($395)|0);
     HEAP8[$397>>0] = $393;
     $398 = HEAP16[$266>>1]|0;
     $399 = ($398&65535) >>> 8;
     $400 = $399&255;
     $401 = HEAP32[$$pre$phiZ2D>>2]|0;
     $402 = HEAP32[$$pre$phi119Z2D>>2]|0;
     $403 = (($402) + 1)|0;
     HEAP32[$$pre$phi119Z2D>>2] = $403;
     $404 = (($401) + ($402)|0);
     HEAP8[$404>>0] = $400;
     $405 = HEAP32[$232>>2]|0;
     $406 = (16 - ($405))|0;
     $407 = $387 >>> $406;
     $408 = $407&65535;
     HEAP16[$266>>1] = $408;
     $409 = (($405) + -13)|0;
     $446 = $407;$storemerge117$i = $409;
    } else {
     $410 = (($380) + 3)|0;
     $446 = $391;$storemerge117$i = $410;
    }
    HEAP32[$232>>2] = $storemerge117$i;
    $411 = (($$0118$i) + 1)|0;
    $exitcond$i = ($$0118$i|0)==($$093|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0118$i = $411;$380 = $storemerge117$i;$390 = $446;
    }
   }
   $412 = ((($0)) + 148|0);
   _send_tree($0,$412,$292);
   $413 = ((($0)) + 2440|0);
   _send_tree($0,$413,$294);
   _compress_block($0,$412,$413);
  }
 } while(0);
 _init_block($0);
 $414 = ($3|0)==(0);
 if ($414) {
  return;
 }
 $415 = ((($0)) + 5820|0);
 $416 = HEAP32[$415>>2]|0;
 $417 = ($416|0)>(8);
 if ($417) {
  $418 = ((($0)) + 5816|0);
  $419 = HEAP16[$418>>1]|0;
  $420 = $419&255;
  $421 = ((($0)) + 8|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = ((($0)) + 20|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = (($424) + 1)|0;
  HEAP32[$423>>2] = $425;
  $426 = (($422) + ($424)|0);
  HEAP8[$426>>0] = $420;
  $427 = HEAP16[$418>>1]|0;
  $428 = ($427&65535) >>> 8;
  $429 = $428&255;
  $430 = HEAP32[$421>>2]|0;
  $431 = HEAP32[$423>>2]|0;
  $432 = (($431) + 1)|0;
  HEAP32[$423>>2] = $432;
  $433 = (($430) + ($431)|0);
  $$sink$i = $429;$$sink1$i = $433;
  label = 104;
 } else {
  $434 = ($416|0)>(0);
  if ($434) {
   $435 = ((($0)) + 5816|0);
   $436 = HEAP16[$435>>1]|0;
   $437 = $436&255;
   $438 = ((($0)) + 8|0);
   $439 = HEAP32[$438>>2]|0;
   $440 = ((($0)) + 20|0);
   $441 = HEAP32[$440>>2]|0;
   $442 = (($441) + 1)|0;
   HEAP32[$440>>2] = $442;
   $443 = (($439) + ($441)|0);
   $$sink$i = $437;$$sink1$i = $443;
   label = 104;
  }
 }
 if ((label|0) == 104) {
  HEAP8[$$sink1$i>>0] = $$sink$i;
 }
 $444 = ((($0)) + 5816|0);
 HEAP16[$444>>1] = 0;
 HEAP32[$415>>2] = 0;
 return;
}
function _build_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$2 = 0, $$$2$us = 0, $$$i = 0, $$$us = 0, $$$us$i = 0, $$0 = 0, $$0$$i = 0, $$0$$us$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i109 = 0, $$0$i117 = 0, $$0$lcssa$i = 0, $$0109$i = 0, $$0109$us$i = 0, $$010910$i = 0, $$010912$i = 0, $$010912$us$i = 0, $$011$i = 0;
 var $$011$us$i = 0, $$0112$i = 0, $$0112$us$i = 0, $$0116$ph$i129 = 0, $$02426$i = 0, $$052$lcssa$i = 0, $$052$lcssa$i110 = 0, $$052$lcssa$i118 = 0, $$05254$i = 0, $$05254$i107 = 0, $$05254$i115 = 0, $$053$i = 0, $$055$i = 0, $$055$i106 = 0, $$055$i114 = 0, $$07$i$i = 0, $$08$i$i = 0, $$098$lcssa150 = 0, $$098136 = 0, $$099135 = 0;
 var $$1 = 0, $$1$i = 0, $$1$i108 = 0, $$1$i116 = 0, $$1100131 = 0, $$11109$i = 0, $$2$i = 0, $$2$lcssa = 0, $$2111$i = 0, $$2111$ph$i$lcssa = 0, $$2111$ph$i130 = 0, $$2115$i = 0, $$2115$in$i = 0, $$2132 = 0, $$2132$us = 0, $$37$i = 0, $$idx$val = 0, $$idx101$val = 0, $$idx102$val = 0, $$phi$trans$insert$i = 0;
 var $$pre = 0, $$pre$i = 0, $$pre147 = 0, $$pre148$pre = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $not$$i = 0, $not$$us$i = 0, $scevgep$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 5200|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 5204|0);
 HEAP32[$10>>2] = 573;
 $11 = ($8|0)>(0);
 if ($11) {
  $$098136 = -1;$$099135 = 0;
  while(1) {
   $27 = (($3) + ($$099135<<2)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = ($28<<16>>16)==(0);
   if ($29) {
    $34 = (((($3) + ($$099135<<2)|0)) + 2|0);
    HEAP16[$34>>1] = 0;
    $$1 = $$098136;
   } else {
    $30 = HEAP32[$9>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$9>>2] = $31;
    $32 = (((($0)) + 2908|0) + ($31<<2)|0);
    HEAP32[$32>>2] = $$099135;
    $33 = (((($0)) + 5208|0) + ($$099135)|0);
    HEAP8[$33>>0] = 0;
    $$1 = $$099135;
   }
   $35 = (($$099135) + 1)|0;
   $exitcond = ($35|0)==($8|0);
   if ($exitcond) {
    break;
   } else {
    $$098136 = $$1;$$099135 = $35;
   }
  }
  $$pre = HEAP32[$9>>2]|0;
  $12 = ($$pre|0)<(2);
  if ($12) {
   $$098$lcssa150 = $$1;$463 = $$pre;
   label = 3;
  } else {
   $$2$lcssa = $$1;$54 = $$pre;
  }
 } else {
  $$098$lcssa150 = -1;$463 = 0;
  label = 3;
 }
 if ((label|0) == 3) {
  $13 = ((($0)) + 5800|0);
  $14 = ($6|0)==(0|0);
  $15 = ((($0)) + 5804|0);
  if ($14) {
   $$2132$us = $$098$lcssa150;$19 = $463;
   while(1) {
    $16 = ($$2132$us|0)<(2);
    $17 = (($$2132$us) + 1)|0;
    $$$2$us = $16 ? $17 : $$2132$us;
    $$$us = $16 ? $17 : 0;
    $18 = (($19) + 1)|0;
    HEAP32[$9>>2] = $18;
    $20 = (((($0)) + 2908|0) + ($18<<2)|0);
    HEAP32[$20>>2] = $$$us;
    $21 = (($3) + ($$$us<<2)|0);
    HEAP16[$21>>1] = 1;
    $22 = (((($0)) + 5208|0) + ($$$us)|0);
    HEAP8[$22>>0] = 0;
    $23 = HEAP32[$13>>2]|0;
    $24 = (($23) + -1)|0;
    HEAP32[$13>>2] = $24;
    $25 = HEAP32[$9>>2]|0;
    $26 = ($25|0)<(2);
    if ($26) {
     $$2132$us = $$$2$us;$19 = $25;
    } else {
     $$2$lcssa = $$$2$us;$54 = $25;
     break;
    }
   }
  } else {
   $$2132 = $$098$lcssa150;$39 = $463;
   while(1) {
    $36 = ($$2132|0)<(2);
    $37 = (($$2132) + 1)|0;
    $$$2 = $36 ? $37 : $$2132;
    $$ = $36 ? $37 : 0;
    $38 = (($39) + 1)|0;
    HEAP32[$9>>2] = $38;
    $40 = (((($0)) + 2908|0) + ($38<<2)|0);
    HEAP32[$40>>2] = $$;
    $41 = (($3) + ($$<<2)|0);
    HEAP16[$41>>1] = 1;
    $42 = (((($0)) + 5208|0) + ($$)|0);
    HEAP8[$42>>0] = 0;
    $43 = HEAP32[$13>>2]|0;
    $44 = (($43) + -1)|0;
    HEAP32[$13>>2] = $44;
    $45 = (((($6) + ($$<<2)|0)) + 2|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = $46&65535;
    $48 = HEAP32[$15>>2]|0;
    $49 = (($48) - ($47))|0;
    HEAP32[$15>>2] = $49;
    $50 = HEAP32[$9>>2]|0;
    $51 = ($50|0)<(2);
    if ($51) {
     $$2132 = $$$2;$39 = $50;
    } else {
     $$2$lcssa = $$$2;$54 = $50;
     break;
    }
   }
  }
 }
 $52 = ((($1)) + 4|0);
 HEAP32[$52>>2] = $$2$lcssa;
 $53 = (($54|0) / 2)&-1;
 $$1100131 = $53;$60 = $54;
 while(1) {
  $56 = (((($0)) + 2908|0) + ($$1100131<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (((($0)) + 5208|0) + ($57)|0);
  $$053$i = $$1100131 << 1;
  $59 = ($$053$i|0)>($60|0);
  L19: do {
   if ($59) {
    $$052$lcssa$i = $$1100131;
   } else {
    $61 = (($3) + ($57<<2)|0);
    $$05254$i = $$1100131;$$055$i = $$053$i;$63 = $60;
    while(1) {
     $62 = ($$055$i|0)<($63|0);
     do {
      if ($62) {
       $64 = $$055$i | 1;
       $65 = (((($0)) + 2908|0) + ($64<<2)|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($3) + ($66<<2)|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = (((($0)) + 2908|0) + ($$055$i<<2)|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = (($3) + ($70<<2)|0);
       $72 = HEAP16[$71>>1]|0;
       $73 = ($68&65535)<($72&65535);
       if (!($73)) {
        $74 = ($68<<16>>16)==($72<<16>>16);
        if (!($74)) {
         $$1$i = $$055$i;
         break;
        }
        $75 = (((($0)) + 5208|0) + ($66)|0);
        $76 = HEAP8[$75>>0]|0;
        $77 = (((($0)) + 5208|0) + ($70)|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = ($76&255)>($78&255);
        if ($79) {
         $$1$i = $$055$i;
         break;
        }
       }
       $$1$i = $64;
      } else {
       $$1$i = $$055$i;
      }
     } while(0);
     $80 = HEAP16[$61>>1]|0;
     $81 = (((($0)) + 2908|0) + ($$1$i<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($3) + ($82<<2)|0);
     $84 = HEAP16[$83>>1]|0;
     $85 = ($80&65535)<($84&65535);
     if ($85) {
      $$052$lcssa$i = $$05254$i;
      break L19;
     }
     $86 = ($80<<16>>16)==($84<<16>>16);
     if ($86) {
      $87 = HEAP8[$58>>0]|0;
      $88 = (((($0)) + 5208|0) + ($82)|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = ($87&255)>($89&255);
      if (!($90)) {
       $$052$lcssa$i = $$05254$i;
       break L19;
      }
     }
     $91 = (((($0)) + 2908|0) + ($$05254$i<<2)|0);
     HEAP32[$91>>2] = $82;
     $$0$i = $$1$i << 1;
     $92 = HEAP32[$9>>2]|0;
     $93 = ($$0$i|0)>($92|0);
     if ($93) {
      $$052$lcssa$i = $$1$i;
      break;
     } else {
      $$05254$i = $$1$i;$$055$i = $$0$i;$63 = $92;
     }
    }
   }
  } while(0);
  $94 = (((($0)) + 2908|0) + ($$052$lcssa$i<<2)|0);
  HEAP32[$94>>2] = $57;
  $95 = ($$1100131|0)>(1);
  if (!($95)) {
   break;
  }
  $96 = (($$1100131) + -1)|0;
  $$pre147 = HEAP32[$9>>2]|0;
  $$1100131 = $96;$60 = $$pre147;
 }
 $$pre148$pre = HEAP32[$9>>2]|0;
 $55 = ((($0)) + 2912|0);
 $$0 = $8;$99 = $$pre148$pre;
 while(1) {
  $97 = HEAP32[$55>>2]|0;
  $98 = (($99) + -1)|0;
  HEAP32[$9>>2] = $98;
  $100 = (((($0)) + 2908|0) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  HEAP32[$55>>2] = $101;
  $102 = (((($0)) + 5208|0) + ($101)|0);
  $103 = ($99|0)<(3);
  L39: do {
   if ($103) {
    $$052$lcssa$i118 = 1;
   } else {
    $104 = (($3) + ($101<<2)|0);
    $$05254$i115 = 1;$$055$i114 = 2;$106 = $98;
    while(1) {
     $105 = ($$055$i114|0)<($106|0);
     do {
      if ($105) {
       $107 = $$055$i114 | 1;
       $108 = (((($0)) + 2908|0) + ($107<<2)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($3) + ($109<<2)|0);
       $111 = HEAP16[$110>>1]|0;
       $112 = (((($0)) + 2908|0) + ($$055$i114<<2)|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (($3) + ($113<<2)|0);
       $115 = HEAP16[$114>>1]|0;
       $116 = ($111&65535)<($115&65535);
       if (!($116)) {
        $117 = ($111<<16>>16)==($115<<16>>16);
        if (!($117)) {
         $$1$i116 = $$055$i114;
         break;
        }
        $118 = (((($0)) + 5208|0) + ($109)|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = (((($0)) + 5208|0) + ($113)|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = ($119&255)>($121&255);
        if ($122) {
         $$1$i116 = $$055$i114;
         break;
        }
       }
       $$1$i116 = $107;
      } else {
       $$1$i116 = $$055$i114;
      }
     } while(0);
     $123 = HEAP16[$104>>1]|0;
     $124 = (((($0)) + 2908|0) + ($$1$i116<<2)|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($3) + ($125<<2)|0);
     $127 = HEAP16[$126>>1]|0;
     $128 = ($123&65535)<($127&65535);
     if ($128) {
      $$052$lcssa$i118 = $$05254$i115;
      break L39;
     }
     $129 = ($123<<16>>16)==($127<<16>>16);
     if ($129) {
      $130 = HEAP8[$102>>0]|0;
      $131 = (((($0)) + 5208|0) + ($125)|0);
      $132 = HEAP8[$131>>0]|0;
      $133 = ($130&255)>($132&255);
      if (!($133)) {
       $$052$lcssa$i118 = $$05254$i115;
       break L39;
      }
     }
     $134 = (((($0)) + 2908|0) + ($$05254$i115<<2)|0);
     HEAP32[$134>>2] = $125;
     $$0$i117 = $$1$i116 << 1;
     $135 = HEAP32[$9>>2]|0;
     $136 = ($$0$i117|0)>($135|0);
     if ($136) {
      $$052$lcssa$i118 = $$1$i116;
      break;
     } else {
      $$05254$i115 = $$1$i116;$$055$i114 = $$0$i117;$106 = $135;
     }
    }
   }
  } while(0);
  $137 = (((($0)) + 2908|0) + ($$052$lcssa$i118<<2)|0);
  HEAP32[$137>>2] = $101;
  $138 = HEAP32[$55>>2]|0;
  $139 = HEAP32[$10>>2]|0;
  $140 = (($139) + -1)|0;
  HEAP32[$10>>2] = $140;
  $141 = (((($0)) + 2908|0) + ($140<<2)|0);
  HEAP32[$141>>2] = $97;
  $142 = HEAP32[$10>>2]|0;
  $143 = (($142) + -1)|0;
  HEAP32[$10>>2] = $143;
  $144 = (((($0)) + 2908|0) + ($143<<2)|0);
  HEAP32[$144>>2] = $138;
  $145 = (($3) + ($97<<2)|0);
  $146 = HEAP16[$145>>1]|0;
  $147 = $146&65535;
  $148 = (($3) + ($138<<2)|0);
  $149 = HEAP16[$148>>1]|0;
  $150 = $149&65535;
  $151 = (($150) + ($147))|0;
  $152 = $151&65535;
  $153 = (($3) + ($$0<<2)|0);
  HEAP16[$153>>1] = $152;
  $154 = (((($0)) + 5208|0) + ($97)|0);
  $155 = HEAP8[$154>>0]|0;
  $156 = (((($0)) + 5208|0) + ($138)|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = ($155&255)>=($157&255);
  $$sink = $158 ? $97 : $138;
  $159 = (((($0)) + 5208|0) + ($$sink)|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = (($161) + 1)|0;
  $163 = $162&255;
  $164 = (((($0)) + 5208|0) + ($$0)|0);
  HEAP8[$164>>0] = $163;
  $165 = $$0&65535;
  $166 = (((($3) + ($138<<2)|0)) + 2|0);
  HEAP16[$166>>1] = $165;
  $167 = (((($3) + ($97<<2)|0)) + 2|0);
  HEAP16[$167>>1] = $165;
  $168 = (($$0) + 1)|0;
  HEAP32[$55>>2] = $$0;
  $169 = HEAP32[$9>>2]|0;
  $170 = ($169|0)<(2);
  L55: do {
   if ($170) {
    $$052$lcssa$i110 = 1;
   } else {
    $$05254$i107 = 1;$$055$i106 = 2;$172 = $169;
    while(1) {
     $171 = ($$055$i106|0)<($172|0);
     do {
      if ($171) {
       $173 = $$055$i106 | 1;
       $174 = (((($0)) + 2908|0) + ($173<<2)|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = (($3) + ($175<<2)|0);
       $177 = HEAP16[$176>>1]|0;
       $178 = (((($0)) + 2908|0) + ($$055$i106<<2)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = (($3) + ($179<<2)|0);
       $181 = HEAP16[$180>>1]|0;
       $182 = ($177&65535)<($181&65535);
       if (!($182)) {
        $183 = ($177<<16>>16)==($181<<16>>16);
        if (!($183)) {
         $$1$i108 = $$055$i106;
         break;
        }
        $184 = (((($0)) + 5208|0) + ($175)|0);
        $185 = HEAP8[$184>>0]|0;
        $186 = (((($0)) + 5208|0) + ($179)|0);
        $187 = HEAP8[$186>>0]|0;
        $188 = ($185&255)>($187&255);
        if ($188) {
         $$1$i108 = $$055$i106;
         break;
        }
       }
       $$1$i108 = $173;
      } else {
       $$1$i108 = $$055$i106;
      }
     } while(0);
     $189 = HEAP16[$153>>1]|0;
     $190 = (((($0)) + 2908|0) + ($$1$i108<<2)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($3) + ($191<<2)|0);
     $193 = HEAP16[$192>>1]|0;
     $194 = ($189&65535)<($193&65535);
     if ($194) {
      $$052$lcssa$i110 = $$05254$i107;
      break L55;
     }
     $195 = ($189<<16>>16)==($193<<16>>16);
     if ($195) {
      $196 = HEAP8[$164>>0]|0;
      $197 = (((($0)) + 5208|0) + ($191)|0);
      $198 = HEAP8[$197>>0]|0;
      $199 = ($196&255)>($198&255);
      if (!($199)) {
       $$052$lcssa$i110 = $$05254$i107;
       break L55;
      }
     }
     $200 = (((($0)) + 2908|0) + ($$05254$i107<<2)|0);
     HEAP32[$200>>2] = $191;
     $$0$i109 = $$1$i108 << 1;
     $201 = HEAP32[$9>>2]|0;
     $202 = ($$0$i109|0)>($201|0);
     if ($202) {
      $$052$lcssa$i110 = $$1$i108;
      break;
     } else {
      $$05254$i107 = $$1$i108;$$055$i106 = $$0$i109;$172 = $201;
     }
    }
   }
  } while(0);
  $203 = (((($0)) + 2908|0) + ($$052$lcssa$i110<<2)|0);
  HEAP32[$203>>2] = $$0;
  $204 = HEAP32[$9>>2]|0;
  $205 = ($204|0)>(1);
  if ($205) {
   $$0 = $168;$99 = $204;
  } else {
   break;
  }
 }
 $206 = HEAP32[$55>>2]|0;
 $207 = HEAP32[$10>>2]|0;
 $208 = (($207) + -1)|0;
 HEAP32[$10>>2] = $208;
 $209 = (((($0)) + 2908|0) + ($208<<2)|0);
 HEAP32[$209>>2] = $206;
 $$idx$val = HEAP32[$1>>2]|0;
 $$idx101$val = HEAP32[$52>>2]|0;
 $$idx102$val = HEAP32[$4>>2]|0;
 $210 = HEAP32[$$idx102$val>>2]|0;
 $211 = ((($$idx102$val)) + 4|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = ((($$idx102$val)) + 8|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ((($$idx102$val)) + 16|0);
 $216 = HEAP32[$215>>2]|0;
 $scevgep$i = ((($0)) + 2876|0);
 dest=$scevgep$i; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $217 = HEAP32[$10>>2]|0;
 $218 = (((($0)) + 2908|0) + ($217<<2)|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = (((($$idx$val) + ($219<<2)|0)) + 2|0);
 HEAP16[$220>>1] = 0;
 $221 = HEAP32[$10>>2]|0;
 $$010910$i = (($221) + 1)|0;
 $222 = ($221|0)<(572);
 L71: do {
  if ($222) {
   $223 = ((($0)) + 5800|0);
   $224 = ($210|0)==(0|0);
   $225 = ((($0)) + 5804|0);
   if ($224) {
    $$010912$us$i = $$010910$i;$$011$us$i = 0;
    while(1) {
     $226 = (((($0)) + 2908|0) + ($$010912$us$i<<2)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = (((($$idx$val) + ($227<<2)|0)) + 2|0);
     $229 = HEAP16[$228>>1]|0;
     $230 = $229&65535;
     $231 = (((($$idx$val) + ($230<<2)|0)) + 2|0);
     $232 = HEAP16[$231>>1]|0;
     $233 = $232&65535;
     $234 = (($233) + 1)|0;
     $235 = ($216|0)>($233|0);
     $$$us$i = $235 ? $234 : $216;
     $not$$us$i = $235 ^ 1;
     $236 = $not$$us$i&1;
     $$0$$us$i = (($$011$us$i) + ($236))|0;
     $237 = $$$us$i&65535;
     HEAP16[$228>>1] = $237;
     $238 = ($227|0)>($$idx101$val|0);
     if (!($238)) {
      $239 = (((($0)) + 2876|0) + ($$$us$i<<1)|0);
      $240 = HEAP16[$239>>1]|0;
      $241 = (($240) + 1)<<16>>16;
      HEAP16[$239>>1] = $241;
      $242 = ($227|0)<($214|0);
      if ($242) {
       $$0112$us$i = 0;
      } else {
       $243 = (($227) - ($214))|0;
       $244 = (($212) + ($243<<2)|0);
       $245 = HEAP32[$244>>2]|0;
       $$0112$us$i = $245;
      }
      $246 = (($$idx$val) + ($227<<2)|0);
      $247 = HEAP16[$246>>1]|0;
      $248 = $247&65535;
      $249 = (($$0112$us$i) + ($$$us$i))|0;
      $250 = Math_imul($249, $248)|0;
      $251 = HEAP32[$223>>2]|0;
      $252 = (($250) + ($251))|0;
      HEAP32[$223>>2] = $252;
     }
     $$0109$us$i = (($$010912$us$i) + 1)|0;
     $253 = ($$010912$us$i|0)<(572);
     if ($253) {
      $$010912$us$i = $$0109$us$i;$$011$us$i = $$0$$us$i;
     } else {
      $$0$lcssa$i = $$0$$us$i;
      break;
     }
    }
   } else {
    $$010912$i = $$010910$i;$$011$i = 0;
    while(1) {
     $254 = (((($0)) + 2908|0) + ($$010912$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = (((($$idx$val) + ($255<<2)|0)) + 2|0);
     $257 = HEAP16[$256>>1]|0;
     $258 = $257&65535;
     $259 = (((($$idx$val) + ($258<<2)|0)) + 2|0);
     $260 = HEAP16[$259>>1]|0;
     $261 = $260&65535;
     $262 = (($261) + 1)|0;
     $263 = ($216|0)>($261|0);
     $$$i = $263 ? $262 : $216;
     $not$$i = $263 ^ 1;
     $264 = $not$$i&1;
     $$0$$i = (($$011$i) + ($264))|0;
     $265 = $$$i&65535;
     HEAP16[$256>>1] = $265;
     $266 = ($255|0)>($$idx101$val|0);
     if (!($266)) {
      $267 = (((($0)) + 2876|0) + ($$$i<<1)|0);
      $268 = HEAP16[$267>>1]|0;
      $269 = (($268) + 1)<<16>>16;
      HEAP16[$267>>1] = $269;
      $270 = ($255|0)<($214|0);
      if ($270) {
       $$0112$i = 0;
      } else {
       $271 = (($255) - ($214))|0;
       $272 = (($212) + ($271<<2)|0);
       $273 = HEAP32[$272>>2]|0;
       $$0112$i = $273;
      }
      $274 = (($$idx$val) + ($255<<2)|0);
      $275 = HEAP16[$274>>1]|0;
      $276 = $275&65535;
      $277 = (($$0112$i) + ($$$i))|0;
      $278 = Math_imul($277, $276)|0;
      $279 = HEAP32[$223>>2]|0;
      $280 = (($278) + ($279))|0;
      HEAP32[$223>>2] = $280;
      $281 = (((($210) + ($255<<2)|0)) + 2|0);
      $282 = HEAP16[$281>>1]|0;
      $283 = $282&65535;
      $284 = (($$0112$i) + ($283))|0;
      $285 = Math_imul($284, $276)|0;
      $286 = HEAP32[$225>>2]|0;
      $287 = (($285) + ($286))|0;
      HEAP32[$225>>2] = $287;
     }
     $$0109$i = (($$010912$i) + 1)|0;
     $288 = ($$010912$i|0)<(572);
     if ($288) {
      $$010912$i = $$0109$i;$$011$i = $$0$$i;
     } else {
      $$0$lcssa$i = $$0$$i;
      break;
     }
    }
   }
   $289 = ($$0$lcssa$i|0)==(0);
   if (!($289)) {
    $290 = (((($0)) + 2876|0) + ($216<<1)|0);
    $$2$i = $$0$lcssa$i;
    while(1) {
     $$2115$in$i = $216;
     while(1) {
      $$2115$i = (($$2115$in$i) + -1)|0;
      $291 = (((($0)) + 2876|0) + ($$2115$i<<1)|0);
      $292 = HEAP16[$291>>1]|0;
      $293 = ($292<<16>>16)==(0);
      if ($293) {
       $$2115$in$i = $$2115$i;
      } else {
       break;
      }
     }
     $294 = (($292) + -1)<<16>>16;
     HEAP16[$291>>1] = $294;
     $295 = (((($0)) + 2876|0) + ($$2115$in$i<<1)|0);
     $296 = HEAP16[$295>>1]|0;
     $297 = $296&65535;
     $298 = (($297) + 2)|0;
     $299 = $298&65535;
     HEAP16[$295>>1] = $299;
     $300 = HEAP16[$290>>1]|0;
     $301 = (($300) + -1)<<16>>16;
     HEAP16[$290>>1] = $301;
     $302 = (($$2$i) + -2)|0;
     $303 = ($$2$i|0)>(2);
     if ($303) {
      $$2$i = $302;
     } else {
      break;
     }
    }
    $304 = ($216|0)==(0);
    if (!($304)) {
     $$11109$i = 573;$$37$i = $216;$306 = $301;
     while(1) {
      $305 = $$37$i&65535;
      $307 = ($306<<16>>16)==(0);
      if ($307) {
       $$2111$ph$i$lcssa = $$11109$i;
      } else {
       $308 = $306&65535;
       $$0116$ph$i129 = $308;$$2111$ph$i130 = $$11109$i;
       while(1) {
        $$2111$i = $$2111$ph$i130;
        while(1) {
         $309 = (($$2111$i) + -1)|0;
         $310 = (((($0)) + 2908|0) + ($309<<2)|0);
         $311 = HEAP32[$310>>2]|0;
         $312 = ($311|0)>($$idx101$val|0);
         if ($312) {
          $$2111$i = $309;
         } else {
          break;
         }
        }
        $313 = (((($$idx$val) + ($311<<2)|0)) + 2|0);
        $314 = HEAP16[$313>>1]|0;
        $315 = $314&65535;
        $316 = ($$37$i|0)==($315|0);
        if (!($316)) {
         $317 = (($$37$i) - ($315))|0;
         $318 = (($$idx$val) + ($311<<2)|0);
         $319 = HEAP16[$318>>1]|0;
         $320 = $319&65535;
         $321 = Math_imul($317, $320)|0;
         $322 = HEAP32[$223>>2]|0;
         $323 = (($321) + ($322))|0;
         HEAP32[$223>>2] = $323;
         HEAP16[$313>>1] = $305;
        }
        $324 = (($$0116$ph$i129) + -1)|0;
        $325 = ($324|0)==(0);
        if ($325) {
         $$2111$ph$i$lcssa = $309;
         break;
        } else {
         $$0116$ph$i129 = $324;$$2111$ph$i130 = $309;
        }
       }
      }
      $326 = (($$37$i) + -1)|0;
      $327 = ($326|0)==(0);
      if ($327) {
       break L71;
      }
      $$phi$trans$insert$i = (((($0)) + 2876|0) + ($326<<1)|0);
      $$pre$i = HEAP16[$$phi$trans$insert$i>>1]|0;
      $$11109$i = $$2111$ph$i$lcssa;$$37$i = $326;$306 = $$pre$i;
     }
    }
   }
  }
 } while(0);
 $328 = HEAP16[$scevgep$i>>1]|0;
 $329 = $328&65535;
 $330 = $329 << 1;
 $331 = $330&65535;
 $332 = ((($2)) + 2|0);
 HEAP16[$332>>1] = $331;
 $333 = $330 & 65534;
 $334 = ((($0)) + 2878|0);
 $335 = HEAP16[$334>>1]|0;
 $336 = $335&65535;
 $337 = (($333) + ($336))|0;
 $338 = $337 << 1;
 $339 = $338&65535;
 $340 = ((($2)) + 4|0);
 HEAP16[$340>>1] = $339;
 $341 = $338 & 65534;
 $342 = ((($0)) + 2880|0);
 $343 = HEAP16[$342>>1]|0;
 $344 = $343&65535;
 $345 = (($341) + ($344))|0;
 $346 = $345 << 1;
 $347 = $346&65535;
 $348 = ((($2)) + 6|0);
 HEAP16[$348>>1] = $347;
 $349 = $346 & 65534;
 $350 = ((($0)) + 2882|0);
 $351 = HEAP16[$350>>1]|0;
 $352 = $351&65535;
 $353 = (($349) + ($352))|0;
 $354 = $353 << 1;
 $355 = $354&65535;
 $356 = ((($2)) + 8|0);
 HEAP16[$356>>1] = $355;
 $357 = $354 & 65534;
 $358 = ((($0)) + 2884|0);
 $359 = HEAP16[$358>>1]|0;
 $360 = $359&65535;
 $361 = (($357) + ($360))|0;
 $362 = $361 << 1;
 $363 = $362&65535;
 $364 = ((($2)) + 10|0);
 HEAP16[$364>>1] = $363;
 $365 = $362 & 65534;
 $366 = ((($0)) + 2886|0);
 $367 = HEAP16[$366>>1]|0;
 $368 = $367&65535;
 $369 = (($365) + ($368))|0;
 $370 = $369 << 1;
 $371 = $370&65535;
 $372 = ((($2)) + 12|0);
 HEAP16[$372>>1] = $371;
 $373 = $370 & 65534;
 $374 = ((($0)) + 2888|0);
 $375 = HEAP16[$374>>1]|0;
 $376 = $375&65535;
 $377 = (($373) + ($376))|0;
 $378 = $377 << 1;
 $379 = $378&65535;
 $380 = ((($2)) + 14|0);
 HEAP16[$380>>1] = $379;
 $381 = $378 & 65534;
 $382 = ((($0)) + 2890|0);
 $383 = HEAP16[$382>>1]|0;
 $384 = $383&65535;
 $385 = (($381) + ($384))|0;
 $386 = $385 << 1;
 $387 = $386&65535;
 $388 = ((($2)) + 16|0);
 HEAP16[$388>>1] = $387;
 $389 = $386 & 65534;
 $390 = ((($0)) + 2892|0);
 $391 = HEAP16[$390>>1]|0;
 $392 = $391&65535;
 $393 = (($389) + ($392))|0;
 $394 = $393 << 1;
 $395 = $394&65535;
 $396 = ((($2)) + 18|0);
 HEAP16[$396>>1] = $395;
 $397 = $394 & 65534;
 $398 = ((($0)) + 2894|0);
 $399 = HEAP16[$398>>1]|0;
 $400 = $399&65535;
 $401 = (($397) + ($400))|0;
 $402 = $401 << 1;
 $403 = $402&65535;
 $404 = ((($2)) + 20|0);
 HEAP16[$404>>1] = $403;
 $405 = $402 & 65534;
 $406 = ((($0)) + 2896|0);
 $407 = HEAP16[$406>>1]|0;
 $408 = $407&65535;
 $409 = (($405) + ($408))|0;
 $410 = $409 << 1;
 $411 = $410&65535;
 $412 = ((($2)) + 22|0);
 HEAP16[$412>>1] = $411;
 $413 = $410 & 65534;
 $414 = ((($0)) + 2898|0);
 $415 = HEAP16[$414>>1]|0;
 $416 = $415&65535;
 $417 = (($413) + ($416))|0;
 $418 = $417 << 1;
 $419 = $418&65535;
 $420 = ((($2)) + 24|0);
 HEAP16[$420>>1] = $419;
 $421 = $418 & 65534;
 $422 = ((($0)) + 2900|0);
 $423 = HEAP16[$422>>1]|0;
 $424 = $423&65535;
 $425 = (($421) + ($424))|0;
 $426 = $425 << 1;
 $427 = $426&65535;
 $428 = ((($2)) + 26|0);
 HEAP16[$428>>1] = $427;
 $429 = $426 & 65534;
 $430 = ((($0)) + 2902|0);
 $431 = HEAP16[$430>>1]|0;
 $432 = $431&65535;
 $433 = (($429) + ($432))|0;
 $434 = $433 << 1;
 $435 = $434&65535;
 $436 = ((($2)) + 28|0);
 HEAP16[$436>>1] = $435;
 $437 = $434 & 65534;
 $438 = ((($0)) + 2904|0);
 $439 = HEAP16[$438>>1]|0;
 $440 = $439&65535;
 $441 = (($437) + ($440))|0;
 $442 = $441 << 1;
 $443 = $442&65535;
 $444 = ((($2)) + 30|0);
 HEAP16[$444>>1] = $443;
 $445 = ($$2$lcssa|0)<(0);
 if ($445) {
  STACKTOP = sp;return;
 } else {
  $$02426$i = 0;
 }
 while(1) {
  $446 = (((($3) + ($$02426$i<<2)|0)) + 2|0);
  $447 = HEAP16[$446>>1]|0;
  $448 = $447&65535;
  $449 = ($447<<16>>16)==(0);
  if (!($449)) {
   $450 = (($2) + ($448<<1)|0);
   $451 = HEAP16[$450>>1]|0;
   $452 = (($451) + 1)<<16>>16;
   HEAP16[$450>>1] = $452;
   $453 = $451&65535;
   $$0$i$i = 0;$$07$i$i = $448;$$08$i$i = $453;
   while(1) {
    $454 = $$08$i$i & 1;
    $455 = $$0$i$i | $454;
    $456 = $$08$i$i >>> 1;
    $457 = $455 << 1;
    $458 = (($$07$i$i) + -1)|0;
    $459 = ($$07$i$i|0)>(1);
    if ($459) {
     $$0$i$i = $457;$$07$i$i = $458;$$08$i$i = $456;
    } else {
     break;
    }
   }
   $460 = $455&65535;
   $461 = (($3) + ($$02426$i<<2)|0);
   HEAP16[$461>>1] = $460;
  }
  $462 = (($$02426$i) + 1)|0;
  $exitcond$i = ($$02426$i|0)==($$2$lcssa|0);
  if ($exitcond$i) {
   break;
  } else {
   $$02426$i = $462;
  }
 }
 STACKTOP = sp;return;
}
function _compress_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert205 = 0, $$pre = 0, $$pre$phi207Z2D = 0, $$pre$phiZ2D = 0, $$pre206 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, $storemerge203 = 0, $storemerge204$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5792|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$phi$trans$insert = ((($0)) + 5820|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert205 = ((($0)) + 5816|0);
  $$pre206 = HEAP16[$$phi$trans$insert205>>1]|0;
  $$pre$phi207Z2D = $$phi$trans$insert205;$$pre$phiZ2D = $$phi$trans$insert;$209 = $$pre;$216 = $$pre206;
 } else {
  $6 = ((($0)) + 5796|0);
  $7 = ((($0)) + 5784|0);
  $8 = ((($0)) + 5820|0);
  $9 = ((($0)) + 5816|0);
  $10 = ((($0)) + 8|0);
  $11 = ((($0)) + 20|0);
  $$0 = 0;
  while(1) {
   $12 = HEAP32[$6>>2]|0;
   $13 = (($12) + ($$0<<1)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = HEAP32[$7>>2]|0;
   $17 = (($$0) + 1)|0;
   $18 = (($16) + ($$0)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($14<<16>>16)==(0);
   do {
    if ($21) {
     $22 = (((($1) + ($20<<2)|0)) + 2|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = $23&65535;
     $25 = HEAP32[$8>>2]|0;
     $26 = (16 - ($24))|0;
     $27 = ($25|0)>($26|0);
     $28 = (($1) + ($20<<2)|0);
     $29 = HEAP16[$28>>1]|0;
     $30 = $29&65535;
     $31 = $30 << $25;
     $32 = HEAP16[$9>>1]|0;
     $33 = $32&65535;
     $34 = $31 | $33;
     $35 = $34&65535;
     HEAP16[$9>>1] = $35;
     if ($27) {
      $36 = $34&255;
      $37 = HEAP32[$10>>2]|0;
      $38 = HEAP32[$11>>2]|0;
      $39 = (($38) + 1)|0;
      HEAP32[$11>>2] = $39;
      $40 = (($37) + ($38)|0);
      HEAP8[$40>>0] = $36;
      $41 = HEAP16[$9>>1]|0;
      $42 = ($41&65535) >>> 8;
      $43 = $42&255;
      $44 = HEAP32[$10>>2]|0;
      $45 = HEAP32[$11>>2]|0;
      $46 = (($45) + 1)|0;
      HEAP32[$11>>2] = $46;
      $47 = (($44) + ($45)|0);
      HEAP8[$47>>0] = $43;
      $48 = HEAP32[$8>>2]|0;
      $49 = (16 - ($48))|0;
      $50 = $30 >>> $49;
      $51 = $50&65535;
      HEAP16[$9>>1] = $51;
      $52 = (($24) + -16)|0;
      $53 = (($52) + ($48))|0;
      $$ph = $51;$storemerge204$sink = $53;
      label = 23;
      break;
     } else {
      $54 = (($25) + ($24))|0;
      $$ph = $35;$storemerge204$sink = $54;
      label = 23;
      break;
     }
    } else {
     $55 = (17336 + ($20)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = $57 | 256;
     $59 = (($58) + 1)|0;
     $60 = (((($1) + ($59<<2)|0)) + 2|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61&65535;
     $63 = HEAP32[$8>>2]|0;
     $64 = (16 - ($62))|0;
     $65 = ($63|0)>($64|0);
     $66 = (($1) + ($59<<2)|0);
     $67 = HEAP16[$66>>1]|0;
     $68 = $67&65535;
     $69 = $68 << $63;
     $70 = HEAP16[$9>>1]|0;
     $71 = $70&65535;
     $72 = $69 | $71;
     $73 = $72&65535;
     HEAP16[$9>>1] = $73;
     if ($65) {
      $74 = $72&255;
      $75 = HEAP32[$10>>2]|0;
      $76 = HEAP32[$11>>2]|0;
      $77 = (($76) + 1)|0;
      HEAP32[$11>>2] = $77;
      $78 = (($75) + ($76)|0);
      HEAP8[$78>>0] = $74;
      $79 = HEAP16[$9>>1]|0;
      $80 = ($79&65535) >>> 8;
      $81 = $80&255;
      $82 = HEAP32[$10>>2]|0;
      $83 = HEAP32[$11>>2]|0;
      $84 = (($83) + 1)|0;
      HEAP32[$11>>2] = $84;
      $85 = (($82) + ($83)|0);
      HEAP8[$85>>0] = $81;
      $86 = HEAP32[$8>>2]|0;
      $87 = (16 - ($86))|0;
      $88 = $68 >>> $87;
      $89 = $88&65535;
      HEAP16[$9>>1] = $89;
      $90 = (($62) + -16)|0;
      $91 = (($90) + ($86))|0;
      $106 = $89;$93 = $91;
     } else {
      $92 = (($63) + ($62))|0;
      $106 = $73;$93 = $92;
     }
     HEAP32[$8>>2] = $93;
     $94 = (8680 + ($57<<2)|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($57) + -8)|0;
     $97 = ($96>>>0)<(20);
     if ($97) {
      $98 = (8796 + ($57<<2)|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($20) - ($99))|0;
      $101 = (16 - ($95))|0;
      $102 = ($93|0)>($101|0);
      $103 = $100 & 65535;
      $104 = $103 << $93;
      $105 = $106&65535;
      $107 = $104 | $105;
      $108 = $107&65535;
      HEAP16[$9>>1] = $108;
      if ($102) {
       $109 = $107&255;
       $110 = HEAP32[$10>>2]|0;
       $111 = HEAP32[$11>>2]|0;
       $112 = (($111) + 1)|0;
       HEAP32[$11>>2] = $112;
       $113 = (($110) + ($111)|0);
       HEAP8[$113>>0] = $109;
       $114 = HEAP16[$9>>1]|0;
       $115 = ($114&65535) >>> 8;
       $116 = $115&255;
       $117 = HEAP32[$10>>2]|0;
       $118 = HEAP32[$11>>2]|0;
       $119 = (($118) + 1)|0;
       HEAP32[$11>>2] = $119;
       $120 = (($117) + ($118)|0);
       HEAP8[$120>>0] = $116;
       $121 = HEAP32[$8>>2]|0;
       $122 = (16 - ($121))|0;
       $123 = $103 >>> $122;
       $124 = $123&65535;
       HEAP16[$9>>1] = $124;
       $125 = (($95) + -16)|0;
       $126 = (($125) + ($121))|0;
       $240 = $124;$storemerge203 = $126;
      } else {
       $127 = (($93) + ($95))|0;
       $240 = $108;$storemerge203 = $127;
      }
      HEAP32[$8>>2] = $storemerge203;
      $139 = $storemerge203;$146 = $240;
     } else {
      $139 = $93;$146 = $106;
     }
     $128 = (($15) + -1)|0;
     $129 = ($128>>>0)<(256);
     $130 = $128 >>> 7;
     $131 = (($130) + 256)|0;
     $$sink = $129 ? $128 : $131;
     $132 = (16824 + ($$sink)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133&255;
     $135 = (((($2) + ($134<<2)|0)) + 2|0);
     $136 = HEAP16[$135>>1]|0;
     $137 = $136&65535;
     $138 = (16 - ($137))|0;
     $140 = ($139|0)>($138|0);
     $141 = (($2) + ($134<<2)|0);
     $142 = HEAP16[$141>>1]|0;
     $143 = $142&65535;
     $144 = $143 << $139;
     $145 = $146&65535;
     $147 = $144 | $145;
     $148 = $147&65535;
     HEAP16[$9>>1] = $148;
     if ($140) {
      $149 = $147&255;
      $150 = HEAP32[$10>>2]|0;
      $151 = HEAP32[$11>>2]|0;
      $152 = (($151) + 1)|0;
      HEAP32[$11>>2] = $152;
      $153 = (($150) + ($151)|0);
      HEAP8[$153>>0] = $149;
      $154 = HEAP16[$9>>1]|0;
      $155 = ($154&65535) >>> 8;
      $156 = $155&255;
      $157 = HEAP32[$10>>2]|0;
      $158 = HEAP32[$11>>2]|0;
      $159 = (($158) + 1)|0;
      HEAP32[$11>>2] = $159;
      $160 = (($157) + ($158)|0);
      HEAP8[$160>>0] = $156;
      $161 = HEAP32[$8>>2]|0;
      $162 = (16 - ($161))|0;
      $163 = $143 >>> $162;
      $164 = $163&65535;
      HEAP16[$9>>1] = $164;
      $165 = (($137) + -16)|0;
      $166 = (($165) + ($161))|0;
      $168 = $166;$181 = $164;
     } else {
      $167 = (($139) + ($137))|0;
      $168 = $167;$181 = $148;
     }
     HEAP32[$8>>2] = $168;
     $169 = (8560 + ($134<<2)|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (($134) + -4)|0;
     $172 = ($171>>>0)<(26);
     if ($172) {
      $173 = (8912 + ($134<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (($128) - ($174))|0;
      $176 = (16 - ($170))|0;
      $177 = ($168|0)>($176|0);
      $178 = $175 & 65535;
      $179 = $178 << $168;
      $180 = $181&65535;
      $182 = $179 | $180;
      $183 = $182&65535;
      HEAP16[$9>>1] = $183;
      if ($177) {
       $184 = $182&255;
       $185 = HEAP32[$10>>2]|0;
       $186 = HEAP32[$11>>2]|0;
       $187 = (($186) + 1)|0;
       HEAP32[$11>>2] = $187;
       $188 = (($185) + ($186)|0);
       HEAP8[$188>>0] = $184;
       $189 = HEAP16[$9>>1]|0;
       $190 = ($189&65535) >>> 8;
       $191 = $190&255;
       $192 = HEAP32[$10>>2]|0;
       $193 = HEAP32[$11>>2]|0;
       $194 = (($193) + 1)|0;
       HEAP32[$11>>2] = $194;
       $195 = (($192) + ($193)|0);
       HEAP8[$195>>0] = $191;
       $196 = HEAP32[$8>>2]|0;
       $197 = (16 - ($196))|0;
       $198 = $178 >>> $197;
       $199 = $198&65535;
       HEAP16[$9>>1] = $199;
       $200 = (($170) + -16)|0;
       $201 = (($200) + ($196))|0;
       $$ph = $199;$storemerge204$sink = $201;
       label = 23;
       break;
      } else {
       $202 = (($168) + ($170))|0;
       $$ph = $183;$storemerge204$sink = $202;
       label = 23;
       break;
      }
     } else {
      $241 = $181;$242 = $168;
     }
    }
   } while(0);
   if ((label|0) == 23) {
    label = 0;
    HEAP32[$8>>2] = $storemerge204$sink;
    $241 = $$ph;$242 = $storemerge204$sink;
   }
   $203 = HEAP32[$3>>2]|0;
   $204 = ($17>>>0)<($203>>>0);
   if ($204) {
    $$0 = $17;
   } else {
    $$pre$phi207Z2D = $9;$$pre$phiZ2D = $8;$209 = $242;$216 = $241;
    break;
   }
  }
 }
 $205 = ((($1)) + 1026|0);
 $206 = HEAP16[$205>>1]|0;
 $207 = $206&65535;
 $208 = (16 - ($207))|0;
 $210 = ($209|0)>($208|0);
 $211 = ((($1)) + 1024|0);
 $212 = HEAP16[$211>>1]|0;
 $213 = $212&65535;
 $214 = $213 << $209;
 $215 = $216&65535;
 $217 = $214 | $215;
 $218 = $217&65535;
 HEAP16[$$pre$phi207Z2D>>1] = $218;
 if ($210) {
  $219 = $217&255;
  $220 = ((($0)) + 8|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = ((($0)) + 20|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($223) + 1)|0;
  HEAP32[$222>>2] = $224;
  $225 = (($221) + ($223)|0);
  HEAP8[$225>>0] = $219;
  $226 = HEAP16[$$pre$phi207Z2D>>1]|0;
  $227 = ($226&65535) >>> 8;
  $228 = $227&255;
  $229 = HEAP32[$220>>2]|0;
  $230 = HEAP32[$222>>2]|0;
  $231 = (($230) + 1)|0;
  HEAP32[$222>>2] = $231;
  $232 = (($229) + ($230)|0);
  HEAP8[$232>>0] = $228;
  $233 = HEAP32[$$pre$phiZ2D>>2]|0;
  $234 = (16 - ($233))|0;
  $235 = $213 >>> $234;
  $236 = $235&65535;
  HEAP16[$$pre$phi207Z2D>>1] = $236;
  $237 = (($207) + -16)|0;
  $238 = (($237) + ($233))|0;
  $storemerge = $238;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 } else {
  $239 = (($209) + ($207))|0;
  $storemerge = $239;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 }
}
function _send_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$273 = 0, $$$274 = 0, $$0 = 0, $$0$ph = 0, $$0255$ph = 0, $$0255$ph$phi = 0, $$0256$ph = 0, $$0257 = 0, $$1258 = 0, $$1260$ph = 0, $$1263$ph = 0, $$2 = 0, $$272 = 0, $$274 = 0, $$pre = 0, $$pre287 = 0, $$pre288 = 0, $$pre289 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge267$sink = 0, $storemerge270 = 0, $storemerge271 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 2|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ($4<<16>>16)==(0);
 $$ = $6 ? 3 : 4;
 $$272 = $6 ? 138 : 7;
 $7 = ((($0)) + 2754|0);
 $8 = ((($0)) + 5820|0);
 $9 = ((($0)) + 2752|0);
 $10 = ((($0)) + 5816|0);
 $11 = ((($0)) + 8|0);
 $12 = ((($0)) + 20|0);
 $13 = ((($0)) + 2758|0);
 $14 = ((($0)) + 2756|0);
 $15 = ((($0)) + 2750|0);
 $16 = ((($0)) + 2748|0);
 $$0$ph = 0;$$0255$ph = -1;$$0256$ph = $5;$$1260$ph = $$272;$$1263$ph = $$;
 L1: while(1) {
  $$0 = $$0$ph;$$0257 = 0;
  while(1) {
   $17 = ($$0|0)>($2|0);
   if ($17) {
    break L1;
   }
   $18 = (($$0) + 1)|0;
   $19 = (((($1) + ($18<<2)|0)) + 2|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = (($$0257) + 1)|0;
   $23 = ($22|0)<($$1260$ph|0);
   $24 = ($$0256$ph|0)==($21|0);
   $or$cond = $23 & $24;
   if ($or$cond) {
    $$0 = $18;$$0257 = $22;
   } else {
    break;
   }
  }
  $25 = ($22|0)<($$1263$ph|0);
  if ($25) {
   $26 = (((((($0)) + 2684|0) + ($$0256$ph<<2)|0)) + 2|0);
   $27 = (((($0)) + 2684|0) + ($$0256$ph<<2)|0);
   $$pre288 = HEAP32[$8>>2]|0;
   $$pre289 = HEAP16[$10>>1]|0;
   $$1258 = $22;$31 = $$pre288;$37 = $$pre289;
   while(1) {
    $28 = HEAP16[$26>>1]|0;
    $29 = $28&65535;
    $30 = (16 - ($29))|0;
    $32 = ($31|0)>($30|0);
    $33 = HEAP16[$27>>1]|0;
    $34 = $33&65535;
    $35 = $34 << $31;
    $36 = $37&65535;
    $38 = $35 | $36;
    $39 = $38&65535;
    HEAP16[$10>>1] = $39;
    if ($32) {
     $40 = $38&255;
     $41 = HEAP32[$11>>2]|0;
     $42 = HEAP32[$12>>2]|0;
     $43 = (($42) + 1)|0;
     HEAP32[$12>>2] = $43;
     $44 = (($41) + ($42)|0);
     HEAP8[$44>>0] = $40;
     $45 = HEAP16[$10>>1]|0;
     $46 = ($45&65535) >>> 8;
     $47 = $46&255;
     $48 = HEAP32[$11>>2]|0;
     $49 = HEAP32[$12>>2]|0;
     $50 = (($49) + 1)|0;
     HEAP32[$12>>2] = $50;
     $51 = (($48) + ($49)|0);
     HEAP8[$51>>0] = $47;
     $52 = HEAP32[$8>>2]|0;
     $53 = (16 - ($52))|0;
     $54 = $34 >>> $53;
     $55 = $54&65535;
     HEAP16[$10>>1] = $55;
     $56 = (($29) + -16)|0;
     $57 = (($56) + ($52))|0;
     $273 = $55;$storemerge271 = $57;
    } else {
     $58 = (($31) + ($29))|0;
     $273 = $39;$storemerge271 = $58;
    }
    HEAP32[$8>>2] = $storemerge271;
    $59 = (($$1258) + -1)|0;
    $60 = ($59|0)==(0);
    if ($60) {
     break;
    } else {
     $$1258 = $59;$31 = $storemerge271;$37 = $273;
    }
   }
  } else {
   $61 = ($$0256$ph|0)==(0);
   do {
    if ($61) {
     $154 = ($$0257|0)<(10);
     if ($154) {
      $155 = HEAP16[$7>>1]|0;
      $156 = $155&65535;
      $157 = HEAP32[$8>>2]|0;
      $158 = (16 - ($156))|0;
      $159 = ($157|0)>($158|0);
      $160 = HEAP16[$9>>1]|0;
      $161 = $160&65535;
      $162 = $161 << $157;
      $163 = HEAP16[$10>>1]|0;
      $164 = $163&65535;
      $165 = $162 | $164;
      $166 = $165&65535;
      HEAP16[$10>>1] = $166;
      if ($159) {
       $167 = $165&255;
       $168 = HEAP32[$11>>2]|0;
       $169 = HEAP32[$12>>2]|0;
       $170 = (($169) + 1)|0;
       HEAP32[$12>>2] = $170;
       $171 = (($168) + ($169)|0);
       HEAP8[$171>>0] = $167;
       $172 = HEAP16[$10>>1]|0;
       $173 = ($172&65535) >>> 8;
       $174 = $173&255;
       $175 = HEAP32[$11>>2]|0;
       $176 = HEAP32[$12>>2]|0;
       $177 = (($176) + 1)|0;
       HEAP32[$12>>2] = $177;
       $178 = (($175) + ($176)|0);
       HEAP8[$178>>0] = $174;
       $179 = HEAP32[$8>>2]|0;
       $180 = (16 - ($179))|0;
       $181 = $161 >>> $180;
       $182 = $181&65535;
       HEAP16[$10>>1] = $182;
       $183 = (($156) + -16)|0;
       $184 = (($183) + ($179))|0;
       $186 = $184;$192 = $181;
      } else {
       $185 = (($157) + ($156))|0;
       $186 = $185;$192 = $165;
      }
      HEAP32[$8>>2] = $186;
      $187 = ($186|0)>(13);
      $188 = (($$0257) + 65534)|0;
      $189 = $188 & 65535;
      $190 = $189 << $186;
      $191 = $192 & 65535;
      $193 = $190 | $191;
      $194 = $193&65535;
      HEAP16[$10>>1] = $194;
      if ($187) {
       $195 = $193&255;
       $196 = HEAP32[$11>>2]|0;
       $197 = HEAP32[$12>>2]|0;
       $198 = (($197) + 1)|0;
       HEAP32[$12>>2] = $198;
       $199 = (($196) + ($197)|0);
       HEAP8[$199>>0] = $195;
       $200 = HEAP16[$10>>1]|0;
       $201 = ($200&65535) >>> 8;
       $202 = $201&255;
       $203 = HEAP32[$11>>2]|0;
       $204 = HEAP32[$12>>2]|0;
       $205 = (($204) + 1)|0;
       HEAP32[$12>>2] = $205;
       $206 = (($203) + ($204)|0);
       HEAP8[$206>>0] = $202;
       $207 = HEAP32[$8>>2]|0;
       $208 = (16 - ($207))|0;
       $209 = $189 >>> $208;
       $210 = $209&65535;
       HEAP16[$10>>1] = $210;
       $211 = (($207) + -13)|0;
       $storemerge267$sink = $211;
       break;
      } else {
       $212 = (($186) + 3)|0;
       $storemerge267$sink = $212;
       break;
      }
     } else {
      $213 = HEAP16[$13>>1]|0;
      $214 = $213&65535;
      $215 = HEAP32[$8>>2]|0;
      $216 = (16 - ($214))|0;
      $217 = ($215|0)>($216|0);
      $218 = HEAP16[$14>>1]|0;
      $219 = $218&65535;
      $220 = $219 << $215;
      $221 = HEAP16[$10>>1]|0;
      $222 = $221&65535;
      $223 = $220 | $222;
      $224 = $223&65535;
      HEAP16[$10>>1] = $224;
      if ($217) {
       $225 = $223&255;
       $226 = HEAP32[$11>>2]|0;
       $227 = HEAP32[$12>>2]|0;
       $228 = (($227) + 1)|0;
       HEAP32[$12>>2] = $228;
       $229 = (($226) + ($227)|0);
       HEAP8[$229>>0] = $225;
       $230 = HEAP16[$10>>1]|0;
       $231 = ($230&65535) >>> 8;
       $232 = $231&255;
       $233 = HEAP32[$11>>2]|0;
       $234 = HEAP32[$12>>2]|0;
       $235 = (($234) + 1)|0;
       HEAP32[$12>>2] = $235;
       $236 = (($233) + ($234)|0);
       HEAP8[$236>>0] = $232;
       $237 = HEAP32[$8>>2]|0;
       $238 = (16 - ($237))|0;
       $239 = $219 >>> $238;
       $240 = $239&65535;
       HEAP16[$10>>1] = $240;
       $241 = (($214) + -16)|0;
       $242 = (($241) + ($237))|0;
       $244 = $242;$250 = $239;
      } else {
       $243 = (($215) + ($214))|0;
       $244 = $243;$250 = $223;
      }
      HEAP32[$8>>2] = $244;
      $245 = ($244|0)>(9);
      $246 = (($$0257) + 65526)|0;
      $247 = $246 & 65535;
      $248 = $247 << $244;
      $249 = $250 & 65535;
      $251 = $248 | $249;
      $252 = $251&65535;
      HEAP16[$10>>1] = $252;
      if ($245) {
       $253 = $251&255;
       $254 = HEAP32[$11>>2]|0;
       $255 = HEAP32[$12>>2]|0;
       $256 = (($255) + 1)|0;
       HEAP32[$12>>2] = $256;
       $257 = (($254) + ($255)|0);
       HEAP8[$257>>0] = $253;
       $258 = HEAP16[$10>>1]|0;
       $259 = ($258&65535) >>> 8;
       $260 = $259&255;
       $261 = HEAP32[$11>>2]|0;
       $262 = HEAP32[$12>>2]|0;
       $263 = (($262) + 1)|0;
       HEAP32[$12>>2] = $263;
       $264 = (($261) + ($262)|0);
       HEAP8[$264>>0] = $260;
       $265 = HEAP32[$8>>2]|0;
       $266 = (16 - ($265))|0;
       $267 = $247 >>> $266;
       $268 = $267&65535;
       HEAP16[$10>>1] = $268;
       $269 = (($265) + -9)|0;
       $storemerge267$sink = $269;
       break;
      } else {
       $270 = (($244) + 7)|0;
       $storemerge267$sink = $270;
       break;
      }
     }
    } else {
     $62 = ($$0256$ph|0)==($$0255$ph|0);
     if ($62) {
      $$pre = HEAP32[$8>>2]|0;
      $$pre287 = HEAP16[$10>>1]|0;
      $$2 = $22;$105 = $$pre287;$99 = $$pre;
     } else {
      $63 = (((((($0)) + 2684|0) + ($$0256$ph<<2)|0)) + 2|0);
      $64 = HEAP16[$63>>1]|0;
      $65 = $64&65535;
      $66 = HEAP32[$8>>2]|0;
      $67 = (16 - ($65))|0;
      $68 = ($66|0)>($67|0);
      $69 = (((($0)) + 2684|0) + ($$0256$ph<<2)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 << $66;
      $73 = HEAP16[$10>>1]|0;
      $74 = $73&65535;
      $75 = $72 | $74;
      $76 = $75&65535;
      HEAP16[$10>>1] = $76;
      if ($68) {
       $77 = $75&255;
       $78 = HEAP32[$11>>2]|0;
       $79 = HEAP32[$12>>2]|0;
       $80 = (($79) + 1)|0;
       HEAP32[$12>>2] = $80;
       $81 = (($78) + ($79)|0);
       HEAP8[$81>>0] = $77;
       $82 = HEAP16[$10>>1]|0;
       $83 = ($82&65535) >>> 8;
       $84 = $83&255;
       $85 = HEAP32[$11>>2]|0;
       $86 = HEAP32[$12>>2]|0;
       $87 = (($86) + 1)|0;
       HEAP32[$12>>2] = $87;
       $88 = (($85) + ($86)|0);
       HEAP8[$88>>0] = $84;
       $89 = HEAP32[$8>>2]|0;
       $90 = (16 - ($89))|0;
       $91 = $71 >>> $90;
       $92 = $91&65535;
       HEAP16[$10>>1] = $92;
       $93 = (($65) + -16)|0;
       $94 = (($93) + ($89))|0;
       $274 = $92;$storemerge270 = $94;
      } else {
       $95 = (($66) + ($65))|0;
       $274 = $76;$storemerge270 = $95;
      }
      HEAP32[$8>>2] = $storemerge270;
      $$2 = $$0257;$105 = $274;$99 = $storemerge270;
     }
     $96 = HEAP16[$15>>1]|0;
     $97 = $96&65535;
     $98 = (16 - ($97))|0;
     $100 = ($99|0)>($98|0);
     $101 = HEAP16[$16>>1]|0;
     $102 = $101&65535;
     $103 = $102 << $99;
     $104 = $105&65535;
     $106 = $103 | $104;
     $107 = $106&65535;
     HEAP16[$10>>1] = $107;
     if ($100) {
      $108 = $106&255;
      $109 = HEAP32[$11>>2]|0;
      $110 = HEAP32[$12>>2]|0;
      $111 = (($110) + 1)|0;
      HEAP32[$12>>2] = $111;
      $112 = (($109) + ($110)|0);
      HEAP8[$112>>0] = $108;
      $113 = HEAP16[$10>>1]|0;
      $114 = ($113&65535) >>> 8;
      $115 = $114&255;
      $116 = HEAP32[$11>>2]|0;
      $117 = HEAP32[$12>>2]|0;
      $118 = (($117) + 1)|0;
      HEAP32[$12>>2] = $118;
      $119 = (($116) + ($117)|0);
      HEAP8[$119>>0] = $115;
      $120 = HEAP32[$8>>2]|0;
      $121 = (16 - ($120))|0;
      $122 = $102 >>> $121;
      $123 = $122&65535;
      HEAP16[$10>>1] = $123;
      $124 = (($97) + -16)|0;
      $125 = (($124) + ($120))|0;
      $127 = $125;$133 = $122;
     } else {
      $126 = (($99) + ($97))|0;
      $127 = $126;$133 = $106;
     }
     HEAP32[$8>>2] = $127;
     $128 = ($127|0)>(14);
     $129 = (($$2) + 65533)|0;
     $130 = $129 & 65535;
     $131 = $130 << $127;
     $132 = $133 & 65535;
     $134 = $131 | $132;
     $135 = $134&65535;
     HEAP16[$10>>1] = $135;
     if ($128) {
      $136 = $134&255;
      $137 = HEAP32[$11>>2]|0;
      $138 = HEAP32[$12>>2]|0;
      $139 = (($138) + 1)|0;
      HEAP32[$12>>2] = $139;
      $140 = (($137) + ($138)|0);
      HEAP8[$140>>0] = $136;
      $141 = HEAP16[$10>>1]|0;
      $142 = ($141&65535) >>> 8;
      $143 = $142&255;
      $144 = HEAP32[$11>>2]|0;
      $145 = HEAP32[$12>>2]|0;
      $146 = (($145) + 1)|0;
      HEAP32[$12>>2] = $146;
      $147 = (($144) + ($145)|0);
      HEAP8[$147>>0] = $143;
      $148 = HEAP32[$8>>2]|0;
      $149 = (16 - ($148))|0;
      $150 = $130 >>> $149;
      $151 = $150&65535;
      HEAP16[$10>>1] = $151;
      $152 = (($148) + -14)|0;
      $storemerge267$sink = $152;
      break;
     } else {
      $153 = (($127) + 2)|0;
      $storemerge267$sink = $153;
      break;
     }
    }
   } while(0);
   HEAP32[$8>>2] = $storemerge267$sink;
  }
  $271 = ($20<<16>>16)==(0);
  $$274 = $24 ? 6 : 7;
  $272 = $271 | $24;
  $$$273 = $272 ? 3 : 4;
  $$$274 = $271 ? 138 : $$274;
  $$0255$ph$phi = $$0256$ph;$$0$ph = $18;$$0256$ph = $21;$$1260$ph = $$$274;$$1263$ph = $$$273;$$0255$ph = $$0255$ph$phi;
 }
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
 var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
 var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
 var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
 var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
 var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[5026]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (20144 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[5026] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(20112)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (20144 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[5026] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(20124)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (20144 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[5026] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(20112)>>2] = $76;
     HEAP32[(20124)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(20108)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (20408 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     $$sink12$i = $131&1;
     $132 = (((($124)) + 16|0) + ($$sink12$i<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(0|0);
     if ($134) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01724$i = $124;$$01733$i = $128;$136 = $133;
      while(1) {
       $135 = ((($136)) + 4|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = $137 & -8;
       $139 = (($138) - ($6))|0;
       $140 = ($139>>>0)<($$01733$i>>>0);
       $$$0173$i = $140 ? $139 : $$01733$i;
       $$$0172$i = $140 ? $136 : $$01724$i;
       $141 = ((($136)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       $$sink1$i = $143&1;
       $144 = (((($136)) + 16|0) + ($$sink1$i<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(0|0);
       if ($146) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01724$i = $$$0172$i;$$01733$i = $$$0173$i;$136 = $145;
       }
      }
     }
     $147 = (($$0172$lcssa$i) + ($6)|0);
     $148 = ($147>>>0)>($$0172$lcssa$i>>>0);
     if ($148) {
      $149 = ((($$0172$lcssa$i)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ((($$0172$lcssa$i)) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==($$0172$lcssa$i|0);
      do {
       if ($153) {
        $158 = ((($$0172$lcssa$i)) + 20|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        if ($160) {
         $161 = ((($$0172$lcssa$i)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0|0);
         if ($163) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $162;$$1178$i = $161;
         }
        } else {
         $$1176$i = $159;$$1178$i = $158;
        }
        while(1) {
         $164 = ((($$1176$i)) + 20|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $$1176$i = $165;$$1178$i = $164;
          continue;
         }
         $167 = ((($$1176$i)) + 16|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          break;
         } else {
          $$1176$i = $168;$$1178$i = $167;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $154 = ((($$0172$lcssa$i)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($155)) + 12|0);
        HEAP32[$156>>2] = $152;
        $157 = ((($152)) + 8|0);
        HEAP32[$157>>2] = $155;
        $$3$i = $152;
       }
      } while(0);
      $170 = ($150|0)==(0|0);
      do {
       if (!($170)) {
        $171 = ((($$0172$lcssa$i)) + 28|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (20408 + ($172<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($$0172$lcssa$i|0)==($174|0);
        if ($175) {
         HEAP32[$173>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $176 = 1 << $172;
          $177 = $176 ^ -1;
          $178 = $98 & $177;
          HEAP32[(20108)>>2] = $178;
          break;
         }
        } else {
         $179 = ((($150)) + 16|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $181&1;
         $182 = (((($150)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$182>>2] = $$3$i;
         $183 = ($$3$i|0)==(0|0);
         if ($183) {
          break;
         }
        }
        $184 = ((($$3$i)) + 24|0);
        HEAP32[$184>>2] = $150;
        $185 = ((($$0172$lcssa$i)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(0|0);
        if (!($187)) {
         $188 = ((($$3$i)) + 16|0);
         HEAP32[$188>>2] = $186;
         $189 = ((($186)) + 24|0);
         HEAP32[$189>>2] = $$3$i;
        }
        $190 = ((($$0172$lcssa$i)) + 20|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(0|0);
        if (!($192)) {
         $193 = ((($$3$i)) + 20|0);
         HEAP32[$193>>2] = $191;
         $194 = ((($191)) + 24|0);
         HEAP32[$194>>2] = $$3$i;
        }
       }
      } while(0);
      $195 = ($$0173$lcssa$i>>>0)<(16);
      if ($195) {
       $196 = (($$0173$lcssa$i) + ($6))|0;
       $197 = $196 | 3;
       $198 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = (($$0172$lcssa$i) + ($196)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 1;
       HEAP32[$200>>2] = $202;
      } else {
       $203 = $6 | 3;
       $204 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$204>>2] = $203;
       $205 = $$0173$lcssa$i | 1;
       $206 = ((($147)) + 4|0);
       HEAP32[$206>>2] = $205;
       $207 = (($147) + ($$0173$lcssa$i)|0);
       HEAP32[$207>>2] = $$0173$lcssa$i;
       $208 = ($33|0)==(0);
       if (!($208)) {
        $209 = HEAP32[(20124)>>2]|0;
        $210 = $33 >>> 3;
        $211 = $210 << 1;
        $212 = (20144 + ($211<<2)|0);
        $213 = 1 << $210;
        $214 = $8 & $213;
        $215 = ($214|0)==(0);
        if ($215) {
         $216 = $8 | $213;
         HEAP32[5026] = $216;
         $$pre$i = ((($212)) + 8|0);
         $$0$i = $212;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $217 = ((($212)) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $$0$i = $218;$$pre$phi$iZ2D = $217;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $209;
        $219 = ((($$0$i)) + 12|0);
        HEAP32[$219>>2] = $209;
        $220 = ((($209)) + 8|0);
        HEAP32[$220>>2] = $$0$i;
        $221 = ((($209)) + 12|0);
        HEAP32[$221>>2] = $212;
       }
       HEAP32[(20112)>>2] = $$0173$lcssa$i;
       HEAP32[(20124)>>2] = $147;
      }
      $222 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $222;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $223 = ($0>>>0)>(4294967231);
   if ($223) {
    $$0192 = -1;
   } else {
    $224 = (($0) + 11)|0;
    $225 = $224 & -8;
    $226 = HEAP32[(20108)>>2]|0;
    $227 = ($226|0)==(0);
    if ($227) {
     $$0192 = $225;
    } else {
     $228 = (0 - ($225))|0;
     $229 = $224 >>> 8;
     $230 = ($229|0)==(0);
     if ($230) {
      $$0336$i = 0;
     } else {
      $231 = ($225>>>0)>(16777215);
      if ($231) {
       $$0336$i = 31;
      } else {
       $232 = (($229) + 1048320)|0;
       $233 = $232 >>> 16;
       $234 = $233 & 8;
       $235 = $229 << $234;
       $236 = (($235) + 520192)|0;
       $237 = $236 >>> 16;
       $238 = $237 & 4;
       $239 = $238 | $234;
       $240 = $235 << $238;
       $241 = (($240) + 245760)|0;
       $242 = $241 >>> 16;
       $243 = $242 & 2;
       $244 = $239 | $243;
       $245 = (14 - ($244))|0;
       $246 = $240 << $243;
       $247 = $246 >>> 15;
       $248 = (($245) + ($247))|0;
       $249 = $248 << 1;
       $250 = (($248) + 7)|0;
       $251 = $225 >>> $250;
       $252 = $251 & 1;
       $253 = $252 | $249;
       $$0336$i = $253;
      }
     }
     $254 = (20408 + ($$0336$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0|0);
     L74: do {
      if ($256) {
       $$2333$i = 0;$$3$i199 = 0;$$3328$i = $228;
       label = 57;
      } else {
       $257 = ($$0336$i|0)==(31);
       $258 = $$0336$i >>> 1;
       $259 = (25 - ($258))|0;
       $260 = $257 ? 0 : $259;
       $261 = $225 << $260;
       $$0320$i = 0;$$0325$i = $228;$$0331$i = $255;$$0337$i = $261;$$0340$i = 0;
       while(1) {
        $262 = ((($$0331$i)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $263 & -8;
        $265 = (($264) - ($225))|0;
        $266 = ($265>>>0)<($$0325$i>>>0);
        if ($266) {
         $267 = ($265|0)==(0);
         if ($267) {
          $$43298$i = 0;$$43357$i = $$0331$i;$$49$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $265;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $268 = ((($$0331$i)) + 20|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $$0337$i >>> 31;
        $271 = (((($$0331$i)) + 16|0) + ($270<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($269|0)==(0|0);
        $274 = ($269|0)==($272|0);
        $or$cond1$i198 = $273 | $274;
        $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
        $275 = ($272|0)==(0|0);
        $not$3$i = $275 ^ 1;
        $276 = $not$3$i&1;
        $$0337$$i = $$0337$i << $276;
        if ($275) {
         $$2333$i = $$1341$i;$$3$i199 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $272;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $277 = ($$2333$i|0)==(0|0);
      $278 = ($$3$i199|0)==(0|0);
      $or$cond$i200 = $277 & $278;
      if ($or$cond$i200) {
       $279 = 2 << $$0336$i;
       $280 = (0 - ($279))|0;
       $281 = $279 | $280;
       $282 = $226 & $281;
       $283 = ($282|0)==(0);
       if ($283) {
        $$0192 = $225;
        break;
       }
       $284 = (0 - ($282))|0;
       $285 = $282 & $284;
       $286 = (($285) + -1)|0;
       $287 = $286 >>> 12;
       $288 = $287 & 16;
       $289 = $286 >>> $288;
       $290 = $289 >>> 5;
       $291 = $290 & 8;
       $292 = $291 | $288;
       $293 = $289 >>> $291;
       $294 = $293 >>> 2;
       $295 = $294 & 4;
       $296 = $292 | $295;
       $297 = $293 >>> $295;
       $298 = $297 >>> 1;
       $299 = $298 & 2;
       $300 = $296 | $299;
       $301 = $297 >>> $299;
       $302 = $301 >>> 1;
       $303 = $302 & 1;
       $304 = $300 | $303;
       $305 = $301 >>> $303;
       $306 = (($304) + ($305))|0;
       $307 = (20408 + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $308;
      } else {
       $$4$ph$i = $$3$i199;$$4335$ph$i = $$2333$i;
      }
      $309 = ($$4335$ph$i|0)==(0|0);
      if ($309) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$43298$i = $$3328$i;$$43357$i = $$4335$ph$i;$$49$i = $$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $310 = ((($$43357$i)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $311 & -8;
       $313 = (($312) - ($225))|0;
       $314 = ($313>>>0)<($$43298$i>>>0);
       $$$4329$i = $314 ? $313 : $$43298$i;
       $$4335$$4$i = $314 ? $$43357$i : $$49$i;
       $315 = ((($$43357$i)) + 16|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)==(0|0);
       $$sink2$i202 = $317&1;
       $318 = (((($$43357$i)) + 16|0) + ($$sink2$i202<<2)|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ($319|0)==(0|0);
       if ($320) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$43298$i = $$$4329$i;$$43357$i = $319;$$49$i = $$4335$$4$i;
        label = 61;
       }
      }
     }
     $321 = ($$4$lcssa$i|0)==(0|0);
     if ($321) {
      $$0192 = $225;
     } else {
      $322 = HEAP32[(20112)>>2]|0;
      $323 = (($322) - ($225))|0;
      $324 = ($$4329$lcssa$i>>>0)<($323>>>0);
      if ($324) {
       $325 = (($$4$lcssa$i) + ($225)|0);
       $326 = ($325>>>0)>($$4$lcssa$i>>>0);
       if (!($326)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $327 = ((($$4$lcssa$i)) + 24|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($$4$lcssa$i)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($330|0)==($$4$lcssa$i|0);
       do {
        if ($331) {
         $336 = ((($$4$lcssa$i)) + 20|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = ($337|0)==(0|0);
         if ($338) {
          $339 = ((($$4$lcssa$i)) + 16|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = ($340|0)==(0|0);
          if ($341) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $340;$$1351$i = $339;
          }
         } else {
          $$1347$i = $337;$$1351$i = $336;
         }
         while(1) {
          $342 = ((($$1347$i)) + 20|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = ($343|0)==(0|0);
          if (!($344)) {
           $$1347$i = $343;$$1351$i = $342;
           continue;
          }
          $345 = ((($$1347$i)) + 16|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($346|0)==(0|0);
          if ($347) {
           break;
          } else {
           $$1347$i = $346;$$1351$i = $345;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $332 = ((($$4$lcssa$i)) + 8|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ((($333)) + 12|0);
         HEAP32[$334>>2] = $330;
         $335 = ((($330)) + 8|0);
         HEAP32[$335>>2] = $333;
         $$3349$i = $330;
        }
       } while(0);
       $348 = ($328|0)==(0|0);
       do {
        if ($348) {
         $431 = $226;
        } else {
         $349 = ((($$4$lcssa$i)) + 28|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (20408 + ($350<<2)|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ($$4$lcssa$i|0)==($352|0);
         if ($353) {
          HEAP32[$351>>2] = $$3349$i;
          $cond$i206 = ($$3349$i|0)==(0|0);
          if ($cond$i206) {
           $354 = 1 << $350;
           $355 = $354 ^ -1;
           $356 = $226 & $355;
           HEAP32[(20108)>>2] = $356;
           $431 = $356;
           break;
          }
         } else {
          $357 = ((($328)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)!=($$4$lcssa$i|0);
          $$sink3$i = $359&1;
          $360 = (((($328)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$360>>2] = $$3349$i;
          $361 = ($$3349$i|0)==(0|0);
          if ($361) {
           $431 = $226;
           break;
          }
         }
         $362 = ((($$3349$i)) + 24|0);
         HEAP32[$362>>2] = $328;
         $363 = ((($$4$lcssa$i)) + 16|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if (!($365)) {
          $366 = ((($$3349$i)) + 16|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
         }
         $368 = ((($$4$lcssa$i)) + 20|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = ($369|0)==(0|0);
         if ($370) {
          $431 = $226;
         } else {
          $371 = ((($$3349$i)) + 20|0);
          HEAP32[$371>>2] = $369;
          $372 = ((($369)) + 24|0);
          HEAP32[$372>>2] = $$3349$i;
          $431 = $226;
         }
        }
       } while(0);
       $373 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($373) {
         $374 = (($$4329$lcssa$i) + ($225))|0;
         $375 = $374 | 3;
         $376 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$376>>2] = $375;
         $377 = (($$4$lcssa$i) + ($374)|0);
         $378 = ((($377)) + 4|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = $379 | 1;
         HEAP32[$378>>2] = $380;
        } else {
         $381 = $225 | 3;
         $382 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$382>>2] = $381;
         $383 = $$4329$lcssa$i | 1;
         $384 = ((($325)) + 4|0);
         HEAP32[$384>>2] = $383;
         $385 = (($325) + ($$4329$lcssa$i)|0);
         HEAP32[$385>>2] = $$4329$lcssa$i;
         $386 = $$4329$lcssa$i >>> 3;
         $387 = ($$4329$lcssa$i>>>0)<(256);
         if ($387) {
          $388 = $386 << 1;
          $389 = (20144 + ($388<<2)|0);
          $390 = HEAP32[5026]|0;
          $391 = 1 << $386;
          $392 = $390 & $391;
          $393 = ($392|0)==(0);
          if ($393) {
           $394 = $390 | $391;
           HEAP32[5026] = $394;
           $$pre$i207 = ((($389)) + 8|0);
           $$0345$i = $389;$$pre$phi$i208Z2D = $$pre$i207;
          } else {
           $395 = ((($389)) + 8|0);
           $396 = HEAP32[$395>>2]|0;
           $$0345$i = $396;$$pre$phi$i208Z2D = $395;
          }
          HEAP32[$$pre$phi$i208Z2D>>2] = $325;
          $397 = ((($$0345$i)) + 12|0);
          HEAP32[$397>>2] = $325;
          $398 = ((($325)) + 8|0);
          HEAP32[$398>>2] = $$0345$i;
          $399 = ((($325)) + 12|0);
          HEAP32[$399>>2] = $389;
          break;
         }
         $400 = $$4329$lcssa$i >>> 8;
         $401 = ($400|0)==(0);
         if ($401) {
          $$0339$i = 0;
         } else {
          $402 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($402) {
           $$0339$i = 31;
          } else {
           $403 = (($400) + 1048320)|0;
           $404 = $403 >>> 16;
           $405 = $404 & 8;
           $406 = $400 << $405;
           $407 = (($406) + 520192)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 4;
           $410 = $409 | $405;
           $411 = $406 << $409;
           $412 = (($411) + 245760)|0;
           $413 = $412 >>> 16;
           $414 = $413 & 2;
           $415 = $410 | $414;
           $416 = (14 - ($415))|0;
           $417 = $411 << $414;
           $418 = $417 >>> 15;
           $419 = (($416) + ($418))|0;
           $420 = $419 << 1;
           $421 = (($419) + 7)|0;
           $422 = $$4329$lcssa$i >>> $421;
           $423 = $422 & 1;
           $424 = $423 | $420;
           $$0339$i = $424;
          }
         }
         $425 = (20408 + ($$0339$i<<2)|0);
         $426 = ((($325)) + 28|0);
         HEAP32[$426>>2] = $$0339$i;
         $427 = ((($325)) + 16|0);
         $428 = ((($427)) + 4|0);
         HEAP32[$428>>2] = 0;
         HEAP32[$427>>2] = 0;
         $429 = 1 << $$0339$i;
         $430 = $431 & $429;
         $432 = ($430|0)==(0);
         if ($432) {
          $433 = $431 | $429;
          HEAP32[(20108)>>2] = $433;
          HEAP32[$425>>2] = $325;
          $434 = ((($325)) + 24|0);
          HEAP32[$434>>2] = $425;
          $435 = ((($325)) + 12|0);
          HEAP32[$435>>2] = $325;
          $436 = ((($325)) + 8|0);
          HEAP32[$436>>2] = $325;
          break;
         }
         $437 = HEAP32[$425>>2]|0;
         $438 = ($$0339$i|0)==(31);
         $439 = $$0339$i >>> 1;
         $440 = (25 - ($439))|0;
         $441 = $438 ? 0 : $440;
         $442 = $$4329$lcssa$i << $441;
         $$0322$i = $442;$$0323$i = $437;
         while(1) {
          $443 = ((($$0323$i)) + 4|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = $444 & -8;
          $446 = ($445|0)==($$4329$lcssa$i|0);
          if ($446) {
           label = 97;
           break;
          }
          $447 = $$0322$i >>> 31;
          $448 = (((($$0323$i)) + 16|0) + ($447<<2)|0);
          $449 = $$0322$i << 1;
          $450 = HEAP32[$448>>2]|0;
          $451 = ($450|0)==(0|0);
          if ($451) {
           label = 96;
           break;
          } else {
           $$0322$i = $449;$$0323$i = $450;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$448>>2] = $325;
          $452 = ((($325)) + 24|0);
          HEAP32[$452>>2] = $$0323$i;
          $453 = ((($325)) + 12|0);
          HEAP32[$453>>2] = $325;
          $454 = ((($325)) + 8|0);
          HEAP32[$454>>2] = $325;
          break;
         }
         else if ((label|0) == 97) {
          $455 = ((($$0323$i)) + 8|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = ((($456)) + 12|0);
          HEAP32[$457>>2] = $325;
          HEAP32[$455>>2] = $325;
          $458 = ((($325)) + 8|0);
          HEAP32[$458>>2] = $456;
          $459 = ((($325)) + 12|0);
          HEAP32[$459>>2] = $$0323$i;
          $460 = ((($325)) + 24|0);
          HEAP32[$460>>2] = 0;
          break;
         }
        }
       } while(0);
       $461 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $461;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $225;
      }
     }
    }
   }
  }
 } while(0);
 $462 = HEAP32[(20112)>>2]|0;
 $463 = ($462>>>0)<($$0192>>>0);
 if (!($463)) {
  $464 = (($462) - ($$0192))|0;
  $465 = HEAP32[(20124)>>2]|0;
  $466 = ($464>>>0)>(15);
  if ($466) {
   $467 = (($465) + ($$0192)|0);
   HEAP32[(20124)>>2] = $467;
   HEAP32[(20112)>>2] = $464;
   $468 = $464 | 1;
   $469 = ((($467)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($465) + ($462)|0);
   HEAP32[$470>>2] = $464;
   $471 = $$0192 | 3;
   $472 = ((($465)) + 4|0);
   HEAP32[$472>>2] = $471;
  } else {
   HEAP32[(20112)>>2] = 0;
   HEAP32[(20124)>>2] = 0;
   $473 = $462 | 3;
   $474 = ((($465)) + 4|0);
   HEAP32[$474>>2] = $473;
   $475 = (($465) + ($462)|0);
   $476 = ((($475)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 | 1;
   HEAP32[$476>>2] = $478;
  }
  $479 = ((($465)) + 8|0);
  $$0 = $479;
  STACKTOP = sp;return ($$0|0);
 }
 $480 = HEAP32[(20116)>>2]|0;
 $481 = ($480>>>0)>($$0192>>>0);
 if ($481) {
  $482 = (($480) - ($$0192))|0;
  HEAP32[(20116)>>2] = $482;
  $483 = HEAP32[(20128)>>2]|0;
  $484 = (($483) + ($$0192)|0);
  HEAP32[(20128)>>2] = $484;
  $485 = $482 | 1;
  $486 = ((($484)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = $$0192 | 3;
  $488 = ((($483)) + 4|0);
  HEAP32[$488>>2] = $487;
  $489 = ((($483)) + 8|0);
  $$0 = $489;
  STACKTOP = sp;return ($$0|0);
 }
 $490 = HEAP32[5144]|0;
 $491 = ($490|0)==(0);
 if ($491) {
  HEAP32[(20584)>>2] = 4096;
  HEAP32[(20580)>>2] = 4096;
  HEAP32[(20588)>>2] = -1;
  HEAP32[(20592)>>2] = -1;
  HEAP32[(20596)>>2] = 0;
  HEAP32[(20548)>>2] = 0;
  $492 = $1;
  $493 = $492 & -16;
  $494 = $493 ^ 1431655768;
  HEAP32[5144] = $494;
  $498 = 4096;
 } else {
  $$pre$i195 = HEAP32[(20584)>>2]|0;
  $498 = $$pre$i195;
 }
 $495 = (($$0192) + 48)|0;
 $496 = (($$0192) + 47)|0;
 $497 = (($498) + ($496))|0;
 $499 = (0 - ($498))|0;
 $500 = $497 & $499;
 $501 = ($500>>>0)>($$0192>>>0);
 if (!($501)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $502 = HEAP32[(20544)>>2]|0;
 $503 = ($502|0)==(0);
 if (!($503)) {
  $504 = HEAP32[(20536)>>2]|0;
  $505 = (($504) + ($500))|0;
  $506 = ($505>>>0)<=($504>>>0);
  $507 = ($505>>>0)>($502>>>0);
  $or$cond1$i = $506 | $507;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $508 = HEAP32[(20548)>>2]|0;
 $509 = $508 & 4;
 $510 = ($509|0)==(0);
 L167: do {
  if ($510) {
   $511 = HEAP32[(20128)>>2]|0;
   $512 = ($511|0)==(0|0);
   L169: do {
    if ($512) {
     label = 118;
    } else {
     $$0$i20$i = (20552);
     while(1) {
      $513 = HEAP32[$$0$i20$i>>2]|0;
      $514 = ($513>>>0)>($511>>>0);
      if (!($514)) {
       $515 = ((($$0$i20$i)) + 4|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = (($513) + ($516)|0);
       $518 = ($517>>>0)>($511>>>0);
       if ($518) {
        break;
       }
      }
      $519 = ((($$0$i20$i)) + 8|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $520;
      }
     }
     $544 = (($497) - ($480))|0;
     $545 = $544 & $499;
     $546 = ($545>>>0)<(2147483647);
     if ($546) {
      $547 = (_sbrk(($545|0))|0);
      $548 = HEAP32[$$0$i20$i>>2]|0;
      $549 = HEAP32[$515>>2]|0;
      $550 = (($548) + ($549)|0);
      $551 = ($547|0)==($550|0);
      if ($551) {
       $552 = ($547|0)==((-1)|0);
       if ($552) {
        $$2234243136$i = $545;
       } else {
        $$723947$i = $545;$$748$i = $547;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $547;$$2253$ph$i = $545;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $522 = (_sbrk(0)|0);
     $523 = ($522|0)==((-1)|0);
     if ($523) {
      $$2234243136$i = 0;
     } else {
      $524 = $522;
      $525 = HEAP32[(20580)>>2]|0;
      $526 = (($525) + -1)|0;
      $527 = $526 & $524;
      $528 = ($527|0)==(0);
      $529 = (($526) + ($524))|0;
      $530 = (0 - ($525))|0;
      $531 = $529 & $530;
      $532 = (($531) - ($524))|0;
      $533 = $528 ? 0 : $532;
      $$$i = (($533) + ($500))|0;
      $534 = HEAP32[(20536)>>2]|0;
      $535 = (($$$i) + ($534))|0;
      $536 = ($$$i>>>0)>($$0192>>>0);
      $537 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $536 & $537;
      if ($or$cond$i) {
       $538 = HEAP32[(20544)>>2]|0;
       $539 = ($538|0)==(0);
       if (!($539)) {
        $540 = ($535>>>0)<=($534>>>0);
        $541 = ($535>>>0)>($538>>>0);
        $or$cond2$i = $540 | $541;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $542 = (_sbrk(($$$i|0))|0);
       $543 = ($542|0)==($522|0);
       if ($543) {
        $$723947$i = $$$i;$$748$i = $522;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $542;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $553 = (0 - ($$2253$ph$i))|0;
     $554 = ($$2247$ph$i|0)!=((-1)|0);
     $555 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $555 & $554;
     $556 = ($495>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $556 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $566 = ($$2247$ph$i|0)==((-1)|0);
      if ($566) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $557 = HEAP32[(20584)>>2]|0;
     $558 = (($496) - ($$2253$ph$i))|0;
     $559 = (($558) + ($557))|0;
     $560 = (0 - ($557))|0;
     $561 = $559 & $560;
     $562 = ($561>>>0)<(2147483647);
     if (!($562)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $563 = (_sbrk(($561|0))|0);
     $564 = ($563|0)==((-1)|0);
     if ($564) {
      (_sbrk(($553|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $565 = (($561) + ($$2253$ph$i))|0;
      $$723947$i = $565;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $567 = HEAP32[(20548)>>2]|0;
   $568 = $567 | 4;
   HEAP32[(20548)>>2] = $568;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $569 = ($500>>>0)<(2147483647);
  if ($569) {
   $570 = (_sbrk(($500|0))|0);
   $571 = (_sbrk(0)|0);
   $572 = ($570|0)!=((-1)|0);
   $573 = ($571|0)!=((-1)|0);
   $or$cond5$i = $572 & $573;
   $574 = ($570>>>0)<($571>>>0);
   $or$cond11$i = $574 & $or$cond5$i;
   $575 = $571;
   $576 = $570;
   $577 = (($575) - ($576))|0;
   $578 = (($$0192) + 40)|0;
   $579 = ($577>>>0)>($578>>>0);
   $$$4236$i = $579 ? $577 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $580 = ($570|0)==((-1)|0);
   $not$$i = $579 ^ 1;
   $581 = $580 | $not$$i;
   $or$cond49$i = $581 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $570;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $582 = HEAP32[(20536)>>2]|0;
  $583 = (($582) + ($$723947$i))|0;
  HEAP32[(20536)>>2] = $583;
  $584 = HEAP32[(20540)>>2]|0;
  $585 = ($583>>>0)>($584>>>0);
  if ($585) {
   HEAP32[(20540)>>2] = $583;
  }
  $586 = HEAP32[(20128)>>2]|0;
  $587 = ($586|0)==(0|0);
  do {
   if ($587) {
    $588 = HEAP32[(20120)>>2]|0;
    $589 = ($588|0)==(0|0);
    $590 = ($$748$i>>>0)<($588>>>0);
    $or$cond12$i = $589 | $590;
    if ($or$cond12$i) {
     HEAP32[(20120)>>2] = $$748$i;
    }
    HEAP32[(20552)>>2] = $$748$i;
    HEAP32[(20556)>>2] = $$723947$i;
    HEAP32[(20564)>>2] = 0;
    $591 = HEAP32[5144]|0;
    HEAP32[(20140)>>2] = $591;
    HEAP32[(20136)>>2] = -1;
    HEAP32[(20156)>>2] = (20144);
    HEAP32[(20152)>>2] = (20144);
    HEAP32[(20164)>>2] = (20152);
    HEAP32[(20160)>>2] = (20152);
    HEAP32[(20172)>>2] = (20160);
    HEAP32[(20168)>>2] = (20160);
    HEAP32[(20180)>>2] = (20168);
    HEAP32[(20176)>>2] = (20168);
    HEAP32[(20188)>>2] = (20176);
    HEAP32[(20184)>>2] = (20176);
    HEAP32[(20196)>>2] = (20184);
    HEAP32[(20192)>>2] = (20184);
    HEAP32[(20204)>>2] = (20192);
    HEAP32[(20200)>>2] = (20192);
    HEAP32[(20212)>>2] = (20200);
    HEAP32[(20208)>>2] = (20200);
    HEAP32[(20220)>>2] = (20208);
    HEAP32[(20216)>>2] = (20208);
    HEAP32[(20228)>>2] = (20216);
    HEAP32[(20224)>>2] = (20216);
    HEAP32[(20236)>>2] = (20224);
    HEAP32[(20232)>>2] = (20224);
    HEAP32[(20244)>>2] = (20232);
    HEAP32[(20240)>>2] = (20232);
    HEAP32[(20252)>>2] = (20240);
    HEAP32[(20248)>>2] = (20240);
    HEAP32[(20260)>>2] = (20248);
    HEAP32[(20256)>>2] = (20248);
    HEAP32[(20268)>>2] = (20256);
    HEAP32[(20264)>>2] = (20256);
    HEAP32[(20276)>>2] = (20264);
    HEAP32[(20272)>>2] = (20264);
    HEAP32[(20284)>>2] = (20272);
    HEAP32[(20280)>>2] = (20272);
    HEAP32[(20292)>>2] = (20280);
    HEAP32[(20288)>>2] = (20280);
    HEAP32[(20300)>>2] = (20288);
    HEAP32[(20296)>>2] = (20288);
    HEAP32[(20308)>>2] = (20296);
    HEAP32[(20304)>>2] = (20296);
    HEAP32[(20316)>>2] = (20304);
    HEAP32[(20312)>>2] = (20304);
    HEAP32[(20324)>>2] = (20312);
    HEAP32[(20320)>>2] = (20312);
    HEAP32[(20332)>>2] = (20320);
    HEAP32[(20328)>>2] = (20320);
    HEAP32[(20340)>>2] = (20328);
    HEAP32[(20336)>>2] = (20328);
    HEAP32[(20348)>>2] = (20336);
    HEAP32[(20344)>>2] = (20336);
    HEAP32[(20356)>>2] = (20344);
    HEAP32[(20352)>>2] = (20344);
    HEAP32[(20364)>>2] = (20352);
    HEAP32[(20360)>>2] = (20352);
    HEAP32[(20372)>>2] = (20360);
    HEAP32[(20368)>>2] = (20360);
    HEAP32[(20380)>>2] = (20368);
    HEAP32[(20376)>>2] = (20368);
    HEAP32[(20388)>>2] = (20376);
    HEAP32[(20384)>>2] = (20376);
    HEAP32[(20396)>>2] = (20384);
    HEAP32[(20392)>>2] = (20384);
    HEAP32[(20404)>>2] = (20392);
    HEAP32[(20400)>>2] = (20392);
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(20128)>>2] = $600;
    HEAP32[(20116)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($$748$i) + ($592)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(20592)>>2]|0;
    HEAP32[(20132)>>2] = $606;
   } else {
    $$024367$i = (20552);
    while(1) {
     $607 = HEAP32[$$024367$i>>2]|0;
     $608 = ((($$024367$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 143;
      break;
     }
     $612 = ((($$024367$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024367$i = $613;
     }
    }
    if ((label|0) == 143) {
     $615 = ((($$024367$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($607>>>0)<=($586>>>0);
      $620 = ($$748$i>>>0)>($586>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(20116)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($586)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($586) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(20128)>>2] = $631;
       HEAP32[(20116)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($586) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(20592)>>2]|0;
       HEAP32[(20132)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(20120)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(20120)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (20552);
    while(1) {
     $641 = HEAP32[$$124466$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 151;
      break;
     }
     $643 = ((($$124466$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      $$0$i$i$i = (20552);
      break;
     } else {
      $$124466$i = $644;
     }
    }
    if ((label|0) == 151) {
     $646 = ((($$124466$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $650 = ((($$124466$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($586|0)==($668|0);
      do {
       if ($676) {
        $677 = HEAP32[(20116)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(20116)>>2] = $678;
        HEAP32[(20128)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(20124)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(20112)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(20112)>>2] = $684;
         HEAP32[(20124)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L234: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[5026]|0;
            $703 = $702 & $701;
            HEAP32[5026] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (20408 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(20108)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(20108)>>2] = $736;
             break L234;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)!=($668|0);
             $$sink1$i$i = $739&1;
             $740 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$740>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L234;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0260$i$i = $754;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0260$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0260$i$i)|0);
        HEAP32[$760>>2] = $$0260$i$i;
        $761 = $$0260$i$i >>> 3;
        $762 = ($$0260$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (20144 + ($763<<2)|0);
         $765 = HEAP32[5026]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[5026] = $769;
          $$pre$i17$i = ((($764)) + 8|0);
          $$0268$i$i = $764;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0268$i$i = $771;$$pre$phi$i18$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $772 = ((($$0268$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0268$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0260$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0269$i$i = 0;
         } else {
          $777 = ($$0260$i$i>>>0)>(16777215);
          if ($777) {
           $$0269$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0260$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0269$i$i = $799;
         }
        } while(0);
        $800 = (20408 + ($$0269$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0269$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(20108)>>2]|0;
        $805 = 1 << $$0269$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(20108)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ($$0269$i$i|0)==(31);
        $814 = $$0269$i$i >>> 1;
        $815 = (25 - ($814))|0;
        $816 = $813 ? 0 : $815;
        $817 = $$0260$i$i << $816;
        $$0261$i$i = $817;$$0262$i$i = $812;
        while(1) {
         $818 = ((($$0262$i$i)) + 4|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = $819 & -8;
         $821 = ($820|0)==($$0260$i$i|0);
         if ($821) {
          label = 192;
          break;
         }
         $822 = $$0261$i$i >>> 31;
         $823 = (((($$0262$i$i)) + 16|0) + ($822<<2)|0);
         $824 = $$0261$i$i << 1;
         $825 = HEAP32[$823>>2]|0;
         $826 = ($825|0)==(0|0);
         if ($826) {
          label = 191;
          break;
         } else {
          $$0261$i$i = $824;$$0262$i$i = $825;
         }
        }
        if ((label|0) == 191) {
         HEAP32[$823>>2] = $672;
         $827 = ((($672)) + 24|0);
         HEAP32[$827>>2] = $$0262$i$i;
         $828 = ((($672)) + 12|0);
         HEAP32[$828>>2] = $672;
         $829 = ((($672)) + 8|0);
         HEAP32[$829>>2] = $672;
         break;
        }
        else if ((label|0) == 192) {
         $830 = ((($$0262$i$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ((($831)) + 12|0);
         HEAP32[$832>>2] = $672;
         HEAP32[$830>>2] = $672;
         $833 = ((($672)) + 8|0);
         HEAP32[$833>>2] = $831;
         $834 = ((($672)) + 12|0);
         HEAP32[$834>>2] = $$0262$i$i;
         $835 = ((($672)) + 24|0);
         HEAP32[$835>>2] = 0;
         break;
        }
       }
      } while(0);
      $960 = ((($660)) + 8|0);
      $$0 = $960;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (20552);
     }
    }
    while(1) {
     $836 = HEAP32[$$0$i$i$i>>2]|0;
     $837 = ($836>>>0)>($586>>>0);
     if (!($837)) {
      $838 = ((($$0$i$i$i)) + 4|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = (($836) + ($839)|0);
      $841 = ($840>>>0)>($586>>>0);
      if ($841) {
       break;
      }
     }
     $842 = ((($$0$i$i$i)) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $$0$i$i$i = $843;
    }
    $844 = ((($840)) + -47|0);
    $845 = ((($844)) + 8|0);
    $846 = $845;
    $847 = $846 & 7;
    $848 = ($847|0)==(0);
    $849 = (0 - ($846))|0;
    $850 = $849 & 7;
    $851 = $848 ? 0 : $850;
    $852 = (($844) + ($851)|0);
    $853 = ((($586)) + 16|0);
    $854 = ($852>>>0)<($853>>>0);
    $855 = $854 ? $586 : $852;
    $856 = ((($855)) + 8|0);
    $857 = ((($855)) + 24|0);
    $858 = (($$723947$i) + -40)|0;
    $859 = ((($$748$i)) + 8|0);
    $860 = $859;
    $861 = $860 & 7;
    $862 = ($861|0)==(0);
    $863 = (0 - ($860))|0;
    $864 = $863 & 7;
    $865 = $862 ? 0 : $864;
    $866 = (($$748$i) + ($865)|0);
    $867 = (($858) - ($865))|0;
    HEAP32[(20128)>>2] = $866;
    HEAP32[(20116)>>2] = $867;
    $868 = $867 | 1;
    $869 = ((($866)) + 4|0);
    HEAP32[$869>>2] = $868;
    $870 = (($$748$i) + ($858)|0);
    $871 = ((($870)) + 4|0);
    HEAP32[$871>>2] = 40;
    $872 = HEAP32[(20592)>>2]|0;
    HEAP32[(20132)>>2] = $872;
    $873 = ((($855)) + 4|0);
    HEAP32[$873>>2] = 27;
    ;HEAP32[$856>>2]=HEAP32[(20552)>>2]|0;HEAP32[$856+4>>2]=HEAP32[(20552)+4>>2]|0;HEAP32[$856+8>>2]=HEAP32[(20552)+8>>2]|0;HEAP32[$856+12>>2]=HEAP32[(20552)+12>>2]|0;
    HEAP32[(20552)>>2] = $$748$i;
    HEAP32[(20556)>>2] = $$723947$i;
    HEAP32[(20564)>>2] = 0;
    HEAP32[(20560)>>2] = $856;
    $875 = $857;
    while(1) {
     $874 = ((($875)) + 4|0);
     HEAP32[$874>>2] = 7;
     $876 = ((($875)) + 8|0);
     $877 = ($876>>>0)<($840>>>0);
     if ($877) {
      $875 = $874;
     } else {
      break;
     }
    }
    $878 = ($855|0)==($586|0);
    if (!($878)) {
     $879 = $855;
     $880 = $586;
     $881 = (($879) - ($880))|0;
     $882 = HEAP32[$873>>2]|0;
     $883 = $882 & -2;
     HEAP32[$873>>2] = $883;
     $884 = $881 | 1;
     $885 = ((($586)) + 4|0);
     HEAP32[$885>>2] = $884;
     HEAP32[$855>>2] = $881;
     $886 = $881 >>> 3;
     $887 = ($881>>>0)<(256);
     if ($887) {
      $888 = $886 << 1;
      $889 = (20144 + ($888<<2)|0);
      $890 = HEAP32[5026]|0;
      $891 = 1 << $886;
      $892 = $890 & $891;
      $893 = ($892|0)==(0);
      if ($893) {
       $894 = $890 | $891;
       HEAP32[5026] = $894;
       $$pre$i$i = ((($889)) + 8|0);
       $$0206$i$i = $889;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $895 = ((($889)) + 8|0);
       $896 = HEAP32[$895>>2]|0;
       $$0206$i$i = $896;$$pre$phi$i$iZ2D = $895;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $586;
      $897 = ((($$0206$i$i)) + 12|0);
      HEAP32[$897>>2] = $586;
      $898 = ((($586)) + 8|0);
      HEAP32[$898>>2] = $$0206$i$i;
      $899 = ((($586)) + 12|0);
      HEAP32[$899>>2] = $889;
      break;
     }
     $900 = $881 >>> 8;
     $901 = ($900|0)==(0);
     if ($901) {
      $$0207$i$i = 0;
     } else {
      $902 = ($881>>>0)>(16777215);
      if ($902) {
       $$0207$i$i = 31;
      } else {
       $903 = (($900) + 1048320)|0;
       $904 = $903 >>> 16;
       $905 = $904 & 8;
       $906 = $900 << $905;
       $907 = (($906) + 520192)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 4;
       $910 = $909 | $905;
       $911 = $906 << $909;
       $912 = (($911) + 245760)|0;
       $913 = $912 >>> 16;
       $914 = $913 & 2;
       $915 = $910 | $914;
       $916 = (14 - ($915))|0;
       $917 = $911 << $914;
       $918 = $917 >>> 15;
       $919 = (($916) + ($918))|0;
       $920 = $919 << 1;
       $921 = (($919) + 7)|0;
       $922 = $881 >>> $921;
       $923 = $922 & 1;
       $924 = $923 | $920;
       $$0207$i$i = $924;
      }
     }
     $925 = (20408 + ($$0207$i$i<<2)|0);
     $926 = ((($586)) + 28|0);
     HEAP32[$926>>2] = $$0207$i$i;
     $927 = ((($586)) + 20|0);
     HEAP32[$927>>2] = 0;
     HEAP32[$853>>2] = 0;
     $928 = HEAP32[(20108)>>2]|0;
     $929 = 1 << $$0207$i$i;
     $930 = $928 & $929;
     $931 = ($930|0)==(0);
     if ($931) {
      $932 = $928 | $929;
      HEAP32[(20108)>>2] = $932;
      HEAP32[$925>>2] = $586;
      $933 = ((($586)) + 24|0);
      HEAP32[$933>>2] = $925;
      $934 = ((($586)) + 12|0);
      HEAP32[$934>>2] = $586;
      $935 = ((($586)) + 8|0);
      HEAP32[$935>>2] = $586;
      break;
     }
     $936 = HEAP32[$925>>2]|0;
     $937 = ($$0207$i$i|0)==(31);
     $938 = $$0207$i$i >>> 1;
     $939 = (25 - ($938))|0;
     $940 = $937 ? 0 : $939;
     $941 = $881 << $940;
     $$0201$i$i = $941;$$0202$i$i = $936;
     while(1) {
      $942 = ((($$0202$i$i)) + 4|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = $943 & -8;
      $945 = ($944|0)==($881|0);
      if ($945) {
       label = 213;
       break;
      }
      $946 = $$0201$i$i >>> 31;
      $947 = (((($$0202$i$i)) + 16|0) + ($946<<2)|0);
      $948 = $$0201$i$i << 1;
      $949 = HEAP32[$947>>2]|0;
      $950 = ($949|0)==(0|0);
      if ($950) {
       label = 212;
       break;
      } else {
       $$0201$i$i = $948;$$0202$i$i = $949;
      }
     }
     if ((label|0) == 212) {
      HEAP32[$947>>2] = $586;
      $951 = ((($586)) + 24|0);
      HEAP32[$951>>2] = $$0202$i$i;
      $952 = ((($586)) + 12|0);
      HEAP32[$952>>2] = $586;
      $953 = ((($586)) + 8|0);
      HEAP32[$953>>2] = $586;
      break;
     }
     else if ((label|0) == 213) {
      $954 = ((($$0202$i$i)) + 8|0);
      $955 = HEAP32[$954>>2]|0;
      $956 = ((($955)) + 12|0);
      HEAP32[$956>>2] = $586;
      HEAP32[$954>>2] = $586;
      $957 = ((($586)) + 8|0);
      HEAP32[$957>>2] = $955;
      $958 = ((($586)) + 12|0);
      HEAP32[$958>>2] = $$0202$i$i;
      $959 = ((($586)) + 24|0);
      HEAP32[$959>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $961 = HEAP32[(20116)>>2]|0;
  $962 = ($961>>>0)>($$0192>>>0);
  if ($962) {
   $963 = (($961) - ($$0192))|0;
   HEAP32[(20116)>>2] = $963;
   $964 = HEAP32[(20128)>>2]|0;
   $965 = (($964) + ($$0192)|0);
   HEAP32[(20128)>>2] = $965;
   $966 = $963 | 1;
   $967 = ((($965)) + 4|0);
   HEAP32[$967>>2] = $966;
   $968 = $$0192 | 3;
   $969 = ((($964)) + 4|0);
   HEAP32[$969>>2] = $968;
   $970 = ((($964)) + 8|0);
   $$0 = $970;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $971 = (___errno_location()|0);
 HEAP32[$971>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
 var $cond374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(20120)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(20124)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    HEAP32[(20112)>>2] = $15;
    $83 = $80 & -2;
    HEAP32[$79>>2] = $83;
    $84 = $15 | 1;
    $85 = ((($14)) + 4|0);
    HEAP32[$85>>2] = $84;
    $86 = (($14) + ($15)|0);
    HEAP32[$86>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[5026]|0;
     $29 = $28 & $27;
     HEAP32[5026] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (20408 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond373 = ($$3|0)==(0|0);
     if ($cond373) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(20108)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(20108)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=($14|0);
     $$sink3 = $65&1;
     $66 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$66>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(20128)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(20116)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(20116)>>2] = $98;
   HEAP32[(20128)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(20124)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(20124)>>2] = 0;
   HEAP32[(20112)>>2] = 0;
   return;
  }
  $103 = HEAP32[(20124)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(20112)>>2]|0;
   $106 = (($105) + ($$1347))|0;
   HEAP32[(20112)>>2] = $106;
   HEAP32[(20124)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1347))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[5026]|0;
     $122 = $121 & $120;
     HEAP32[5026] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $138;$$1367 = $134;
       }
      } else {
       $$1363 = $136;$$1367 = $135;
      }
      while(1) {
       $140 = ((($$1363)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if (!($142)) {
        $$1363 = $141;$$1367 = $140;
        continue;
       }
       $143 = ((($$1363)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if ($145) {
        break;
       } else {
        $$1363 = $144;$$1367 = $143;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3365 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (20408 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3365;
      $cond374 = ($$3365|0)==(0|0);
      if ($cond374) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(20108)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(20108)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)!=($7|0);
      $$sink5 = $158&1;
      $159 = (((($126)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$159>>2] = $$3365;
      $160 = ($$3365|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3365)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3365)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3365;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3365)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3365;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(20124)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(20112)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1347 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1347)|0);
  HEAP32[$180>>2] = $$1347;
  $$2 = $$1347;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (20144 + ($183<<2)|0);
  $185 = HEAP32[5026]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[5026] = $189;
   $$pre = ((($184)) + 8|0);
   $$0368 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0368 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0368)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0368;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0361 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0361 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0361 = $219;
  }
 }
 $220 = (20408 + ($$0361<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0361;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(20108)>>2]|0;
 $225 = 1 << $$0361;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(20108)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ($$0361|0)==(31);
   $234 = $$0361 >>> 1;
   $235 = (25 - ($234))|0;
   $236 = $233 ? 0 : $235;
   $237 = $$2 << $236;
   $$0348 = $237;$$0349 = $232;
   while(1) {
    $238 = ((($$0349)) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8;
    $241 = ($240|0)==($$2|0);
    if ($241) {
     label = 73;
     break;
    }
    $242 = $$0348 >>> 31;
    $243 = (((($$0349)) + 16|0) + ($242<<2)|0);
    $244 = $$0348 << 1;
    $245 = HEAP32[$243>>2]|0;
    $246 = ($245|0)==(0|0);
    if ($246) {
     label = 72;
     break;
    } else {
     $$0348 = $244;$$0349 = $245;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$243>>2] = $$1;
    $247 = ((($$1)) + 24|0);
    HEAP32[$247>>2] = $$0349;
    $248 = ((($$1)) + 12|0);
    HEAP32[$248>>2] = $$1;
    $249 = ((($$1)) + 8|0);
    HEAP32[$249>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $250 = ((($$0349)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($251)) + 12|0);
    HEAP32[$252>>2] = $$1;
    HEAP32[$250>>2] = $$1;
    $253 = ((($$1)) + 8|0);
    HEAP32[$253>>2] = $251;
    $254 = ((($$1)) + 12|0);
    HEAP32[$254>>2] = $$0349;
    $255 = ((($$1)) + 24|0);
    HEAP32[$255>>2] = 0;
    break;
   }
  }
 } while(0);
 $256 = HEAP32[(20136)>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[(20136)>>2] = $257;
 $258 = ($257|0)==(0);
 if ($258) {
  $$0195$in$i = (20560);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $259 = ($$0195$i|0)==(0|0);
  $260 = ((($$0195$i)) + 8|0);
  if ($259) {
   break;
  } else {
   $$0195$in$i = $260;
  }
 }
 HEAP32[(20136)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(20584)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(20128)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(20116)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(20128)>>2] = $33;
  HEAP32[(20116)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(20124)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(20112)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(20112)>>2] = $storemerge1;
  HEAP32[(20124)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[5026]|0;
    $81 = $80 & $79;
    HEAP32[5026] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (20408 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(20108)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(20108)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=($5|0);
     $$sink1 = $117&1;
     $118 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$118>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $68 | $132;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(20124)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    HEAP32[(20112)>>2] = $12;
    $79 = $76 & -2;
    HEAP32[$75>>2] = $79;
    $80 = $12 | 1;
    $81 = ((($11)) + 4|0);
    HEAP32[$81>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[5026]|0;
     $25 = $24 & $23;
     HEAP32[5026] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (20408 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(20108)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(20108)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=($11|0);
     $$sink2 = $61&1;
     $62 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$62>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1365 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(20128)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(20116)>>2]|0;
   $89 = (($88) + ($$1365))|0;
   HEAP32[(20116)>>2] = $89;
   HEAP32[(20128)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(20124)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(20124)>>2] = 0;
   HEAP32[(20112)>>2] = 0;
   return;
  }
  $94 = HEAP32[(20124)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(20112)>>2]|0;
   $97 = (($96) + ($$1365))|0;
   HEAP32[(20112)>>2] = $97;
   HEAP32[(20124)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1365))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[5026]|0;
     $113 = $112 & $111;
     HEAP32[5026] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $129;$$1384 = $125;
       }
      } else {
       $$1380 = $127;$$1384 = $126;
      }
      while(1) {
       $131 = ((($$1380)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if (!($133)) {
        $$1380 = $132;$$1384 = $131;
        continue;
       }
       $134 = ((($$1380)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($135|0)==(0|0);
       if ($136) {
        break;
       } else {
        $$1380 = $135;$$1384 = $134;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3382 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (20408 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3382;
      $cond3 = ($$3382|0)==(0|0);
      if ($cond3) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(20108)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(20108)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)!=($2|0);
      $$sink4 = $149&1;
      $150 = (((($117)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$150>>2] = $$3382;
      $151 = ($$3382|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3382)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3382)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3382;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3382)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3382;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(20124)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(20112)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1365 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1365)|0);
  HEAP32[$171>>2] = $$1365;
  $$2 = $$1365;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (20144 + ($174<<2)|0);
  $176 = HEAP32[5026]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[5026] = $180;
   $$pre = ((($175)) + 8|0);
   $$0385 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0385 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0385)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0385;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0378 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0378 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0378 = $210;
  }
 }
 $211 = (20408 + ($$0378<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0378;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(20108)>>2]|0;
 $216 = 1 << $$0378;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(20108)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ($$0378|0)==(31);
 $225 = $$0378 >>> 1;
 $226 = (25 - ($225))|0;
 $227 = $224 ? 0 : $226;
 $228 = $$2 << $227;
 $$0366 = $228;$$0367 = $223;
 while(1) {
  $229 = ((($$0367)) + 4|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 & -8;
  $232 = ($231|0)==($$2|0);
  if ($232) {
   label = 69;
   break;
  }
  $233 = $$0366 >>> 31;
  $234 = (((($$0367)) + 16|0) + ($233<<2)|0);
  $235 = $$0366 << 1;
  $236 = HEAP32[$234>>2]|0;
  $237 = ($236|0)==(0|0);
  if ($237) {
   label = 68;
   break;
  } else {
   $$0366 = $235;$$0367 = $236;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$234>>2] = $$1;
  $238 = ((($$1)) + 24|0);
  HEAP32[$238>>2] = $$0367;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $$1;
  $240 = ((($$1)) + 8|0);
  HEAP32[$240>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $241 = ((($$0367)) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 12|0);
  HEAP32[$243>>2] = $$1;
  HEAP32[$241>>2] = $$1;
  $244 = ((($$1)) + 8|0);
  HEAP32[$244>>2] = $242;
  $245 = ((($$1)) + 12|0);
  HEAP32[$245>>2] = $$0367;
  $246 = ((($$1)) + 24|0);
  HEAP32[$246>>2] = 0;
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_245($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20664|0);
}
function _dummy_245($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 8;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 32|0;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_308()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function ___pthread_self_308() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (17611 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 17699;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 17699;
  } else {
   $$01214 = 17699;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9628|0);
}
function ___lctrans_cur($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_18()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___lctrans_impl($0,$5)|0);
 return ($6|0);
}
function ___pthread_self_18() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 $11 = $4;
 $12 = $6;
 $13 = (($12) + ($1)|0);
 $$sink = $or$cond ? $13 : $11;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$pre30 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$sink = $$pre;$25 = $$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$sink = $21;$25 = $21;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$sink = $23;$25 = $21;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert29 = ((($0)) + 4|0);
   if ($26) {
    $$pre30 = HEAP32[$$phi$trans$insert29>>2]|0;
    $36 = $$pre30;
   } else {
    $27 = HEAP32[$$phi$trans$insert29>>2]|0;
    $28 = $25;
    $29 = ((($0)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($7|0)==($38|0);
   if ($39) {
    $$0 = $7;
   } else {
    $40 = $7&255;
    HEAP8[$35>>0] = $40;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 15]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=9872; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 15]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0;
 var $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$279$ = 0, $$286 = 0, $$287 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre = 0, $$pre342 = 0, $$pre344 = 0, $$pre345 = 0, $$pre345$pre = 0, $$pre346 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge308 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond281 = 0, $storemerge274 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP32[$5>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 88;
   break;
  } else {
   $23 = $21;$25 = $20;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249303 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249303;
      break L12;
     }
     $30 = ((($$0249303)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249303 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $20;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$20,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$$0269 = $$0269$phi;
   continue;
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre342 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269;$$sink = 1;
  } else {
   $44 = ((($$pre342)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre342)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269;$$sink = 1;
   }
  }
  $51 = (($$pre342) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge308 = $55 | $58;
  if ($brmerge308) {
   $$0262$lcssa = 0;$$lcssa291 = $52;$$lcssa292 = $51;
  } else {
   $$0262309 = 0;$60 = $52;$65 = $51;
   while(1) {
    $59 = $60 << 24 >> 24;
    $61 = (($59) + -32)|0;
    $62 = 1 << $61;
    $63 = $62 | $$0262309;
    $64 = ((($65)) + 1|0);
    HEAP32[$5>>2] = $64;
    $66 = HEAP8[$64>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = (($67) + -32)|0;
    $69 = ($68>>>0)>(31);
    $70 = 1 << $68;
    $71 = $70 & 75913;
    $72 = ($71|0)==(0);
    $brmerge = $69 | $72;
    if ($brmerge) {
     $$0262$lcssa = $63;$$lcssa291 = $66;$$lcssa292 = $64;
     break;
    } else {
     $$0262309 = $63;$60 = $66;$65 = $64;
    }
   }
  }
  $73 = ($$lcssa291<<24>>24)==(42);
  if ($73) {
   $74 = ((($$lcssa292)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = (_isdigit($76)|0);
   $78 = ($77|0)==(0);
   if ($78) {
    label = 23;
   } else {
    $79 = HEAP32[$5>>2]|0;
    $80 = ((($79)) + 2|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(36);
    if ($82) {
     $83 = ((($79)) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = (($85) + -48)|0;
     $87 = (($4) + ($86<<2)|0);
     HEAP32[$87>>2] = 10;
     $88 = HEAP8[$83>>0]|0;
     $89 = $88 << 24 >> 24;
     $90 = (($89) + -48)|0;
     $91 = (($3) + ($90<<3)|0);
     $92 = $91;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($92) + 4)|0;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($79)) + 3|0);
     $$0259 = $94;$$2271 = 1;$storemerge274 = $98;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 23) {
    label = 0;
    $99 = ($$1270|0)==(0);
    if (!($99)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $100 = $arglist_current;
     $101 = ((0) + 4|0);
     $expanded4 = $101;
     $expanded = (($expanded4) - 1)|0;
     $102 = (($100) + ($expanded))|0;
     $103 = ((0) + 4|0);
     $expanded8 = $103;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $104 = $102 & $expanded6;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $arglist_next = ((($105)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $363 = $106;
    } else {
     $363 = 0;
    }
    $107 = HEAP32[$5>>2]|0;
    $108 = ((($107)) + 1|0);
    $$0259 = $363;$$2271 = 0;$storemerge274 = $108;
   }
   HEAP32[$5>>2] = $storemerge274;
   $109 = ($$0259|0)<(0);
   $110 = $$0262$lcssa | 8192;
   $111 = (0 - ($$0259))|0;
   $$$0262 = $109 ? $110 : $$0262$lcssa;
   $$$0259 = $109 ? $111 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$115 = $storemerge274;
  } else {
   $112 = (_getint($5)|0);
   $113 = ($112|0)<(0);
   if ($113) {
    $$0 = -1;
    break;
   }
   $$pre344 = HEAP32[$5>>2]|0;
   $$1260 = $112;$$1263 = $$0262$lcssa;$$3272 = $$1270;$115 = $$pre344;
  }
  $114 = HEAP8[$115>>0]|0;
  $116 = ($114<<24>>24)==(46);
  do {
   if ($116) {
    $117 = ((($115)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = ($118<<24>>24)==(42);
    if (!($119)) {
     $155 = ((($115)) + 1|0);
     HEAP32[$5>>2] = $155;
     $156 = (_getint($5)|0);
     $$pre345$pre = HEAP32[$5>>2]|0;
     $$0254 = $156;$$pre345 = $$pre345$pre;
     break;
    }
    $120 = ((($115)) + 2|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121 << 24 >> 24;
    $123 = (_isdigit($122)|0);
    $124 = ($123|0)==(0);
    if (!($124)) {
     $125 = HEAP32[$5>>2]|0;
     $126 = ((($125)) + 3|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = ($127<<24>>24)==(36);
     if ($128) {
      $129 = ((($125)) + 2|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = (($131) + -48)|0;
      $133 = (($4) + ($132<<2)|0);
      HEAP32[$133>>2] = 10;
      $134 = HEAP8[$129>>0]|0;
      $135 = $134 << 24 >> 24;
      $136 = (($135) + -48)|0;
      $137 = (($3) + ($136<<3)|0);
      $138 = $137;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = (($138) + 4)|0;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($125)) + 4|0);
      HEAP32[$5>>2] = $144;
      $$0254 = $140;$$pre345 = $144;
      break;
     }
    }
    $145 = ($$3272|0)==(0);
    if (!($145)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $146 = $arglist_current2;
     $147 = ((0) + 4|0);
     $expanded11 = $147;
     $expanded10 = (($expanded11) - 1)|0;
     $148 = (($146) + ($expanded10))|0;
     $149 = ((0) + 4|0);
     $expanded15 = $149;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $150 = $148 & $expanded13;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $arglist_next3 = ((($151)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $364 = $152;
    } else {
     $364 = 0;
    }
    $153 = HEAP32[$5>>2]|0;
    $154 = ((($153)) + 2|0);
    HEAP32[$5>>2] = $154;
    $$0254 = $364;$$pre345 = $154;
   } else {
    $$0254 = -1;$$pre345 = $115;
   }
  } while(0);
  $$0252 = 0;$158 = $$pre345;
  while(1) {
   $157 = HEAP8[$158>>0]|0;
   $159 = $157 << 24 >> 24;
   $160 = (($159) + -65)|0;
   $161 = ($160>>>0)>(57);
   if ($161) {
    $$0 = -1;
    break L1;
   }
   $162 = ((($158)) + 1|0);
   HEAP32[$5>>2] = $162;
   $163 = HEAP8[$158>>0]|0;
   $164 = $163 << 24 >> 24;
   $165 = (($164) + -65)|0;
   $166 = ((19503 + (($$0252*58)|0)|0) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($168) + -1)|0;
   $170 = ($169>>>0)<(8);
   if ($170) {
    $$0252 = $168;$158 = $162;
   } else {
    break;
   }
  }
  $171 = ($167<<24>>24)==(0);
  if ($171) {
   $$0 = -1;
   break;
  }
  $172 = ($167<<24>>24)==(19);
  $173 = ($$0253|0)>(-1);
  do {
   if ($172) {
    if ($173) {
     $$0 = -1;
     break L1;
    } else {
     label = 50;
    }
   } else {
    if ($173) {
     $174 = (($4) + ($$0253<<2)|0);
     HEAP32[$174>>2] = $168;
     $175 = (($3) + ($$0253<<3)|0);
     $176 = $175;
     $177 = $176;
     $178 = HEAP32[$177>>2]|0;
     $179 = (($176) + 4)|0;
     $180 = $179;
     $181 = HEAP32[$180>>2]|0;
     $182 = $6;
     $183 = $182;
     HEAP32[$183>>2] = $178;
     $184 = (($182) + 4)|0;
     $185 = $184;
     HEAP32[$185>>2] = $181;
     label = 50;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$168,$2);
    $$pre346 = HEAP32[$5>>2]|0;
    $187 = $$pre346;
   }
  } while(0);
  if ((label|0) == 50) {
   label = 0;
   if ($10) {
    $187 = $162;
   } else {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
    continue;
   }
  }
  $186 = ((($187)) + -1|0);
  $188 = HEAP8[$186>>0]|0;
  $189 = $188 << 24 >> 24;
  $190 = ($$0252|0)!=(0);
  $191 = $189 & 15;
  $192 = ($191|0)==(3);
  $or$cond276 = $190 & $192;
  $193 = $189 & -33;
  $$0235 = $or$cond276 ? $193 : $189;
  $194 = $$1263 & 8192;
  $195 = ($194|0)==(0);
  $196 = $$1263 & -65537;
  $$1263$ = $195 ? $$1263 : $196;
  L73: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $203 = HEAP32[$6>>2]|0;
     HEAP32[$203>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 1:  {
     $204 = HEAP32[$6>>2]|0;
     HEAP32[$204>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 2:  {
     $205 = ($$1248|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = HEAP32[$6>>2]|0;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $$1248;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 3:  {
     $212 = $$1248&65535;
     $213 = HEAP32[$6>>2]|0;
     HEAP16[$213>>1] = $212;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $$1248&255;
     $215 = HEAP32[$6>>2]|0;
     HEAP8[$215>>0] = $214;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 6:  {
     $216 = HEAP32[$6>>2]|0;
     HEAP32[$216>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 7:  {
     $217 = ($$1248|0)<(0);
     $218 = $217 << 31 >> 31;
     $219 = HEAP32[$6>>2]|0;
     $220 = $219;
     $221 = $220;
     HEAP32[$221>>2] = $$1248;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $218;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $224 = ($$0254>>>0)>(8);
    $225 = $224 ? $$0254 : 8;
    $226 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $225;$$3265 = $226;
    label = 62;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 62;
    break;
   }
   case 111:  {
    $242 = $6;
    $243 = $242;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($242) + 4)|0;
    $246 = $245;
    $247 = HEAP32[$246>>2]|0;
    $248 = (_fmt_o($244,$247,$11)|0);
    $249 = $$1263$ & 8;
    $250 = ($249|0)==(0);
    $251 = $248;
    $252 = (($12) - ($251))|0;
    $253 = ($$0254|0)>($252|0);
    $254 = (($252) + 1)|0;
    $255 = $250 | $253;
    $$0254$$0254$ = $255 ? $$0254 : $254;
    $$0228 = $248;$$1233 = 0;$$1238 = 19967;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$280 = $244;$282 = $247;
    label = 68;
    break;
   }
   case 105: case 100:  {
    $256 = $6;
    $257 = $256;
    $258 = HEAP32[$257>>2]|0;
    $259 = (($256) + 4)|0;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)<(0);
    if ($262) {
     $263 = (_i64Subtract(0,0,($258|0),($261|0))|0);
     $264 = tempRet0;
     $265 = $6;
     $266 = $265;
     HEAP32[$266>>2] = $263;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $264;
     $$0232 = 1;$$0237 = 19967;$275 = $263;$276 = $264;
     label = 67;
     break L73;
    } else {
     $269 = $$1263$ & 2048;
     $270 = ($269|0)==(0);
     $271 = $$1263$ & 1;
     $272 = ($271|0)==(0);
     $$ = $272 ? 19967 : (19969);
     $$$ = $270 ? $$ : (19968);
     $273 = $$1263$ & 2049;
     $274 = ($273|0)!=(0);
     $$279$ = $274&1;
     $$0232 = $$279$;$$0237 = $$$;$275 = $258;$276 = $261;
     label = 67;
     break L73;
    }
    break;
   }
   case 117:  {
    $197 = $6;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $$0232 = 0;$$0237 = 19967;$275 = $199;$276 = $202;
    label = 67;
    break;
   }
   case 99:  {
    $292 = $6;
    $293 = $292;
    $294 = HEAP32[$293>>2]|0;
    $295 = (($292) + 4)|0;
    $296 = $295;
    $297 = HEAP32[$296>>2]|0;
    $298 = $294&255;
    HEAP8[$13>>0] = $298;
    $$2 = $13;$$2234 = 0;$$2239 = 19967;$$2251 = $11;$$5 = 1;$$6268 = $196;
    break;
   }
   case 109:  {
    $299 = (___errno_location()|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = (_strerror($300)|0);
    $$1 = $301;
    label = 72;
    break;
   }
   case 115:  {
    $302 = HEAP32[$6>>2]|0;
    $303 = ($302|0)!=(0|0);
    $304 = $303 ? $302 : 19977;
    $$1 = $304;
    label = 72;
    break;
   }
   case 67:  {
    $311 = $6;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = (($311) + 4)|0;
    $315 = $314;
    $316 = HEAP32[$315>>2]|0;
    HEAP32[$8>>2] = $313;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258354 = -1;$365 = $8;
    label = 76;
    break;
   }
   case 83:  {
    $$pre348 = HEAP32[$6>>2]|0;
    $317 = ($$0254|0)==(0);
    if ($317) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$4258354 = $$0254;$365 = $$pre348;
     label = 76;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $339 = +HEAPF64[$6>>3];
    $340 = (_fmt_fp($0,$339,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $340;$$0247 = $$1248;$$0269 = $$3272;
    continue L1;
    break;
   }
   default: {
    $$2 = $20;$$2234 = 0;$$2239 = 19967;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L97: do {
   if ((label|0) == 62) {
    label = 0;
    $227 = $6;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = (($227) + 4)|0;
    $231 = $230;
    $232 = HEAP32[$231>>2]|0;
    $233 = $$1236 & 32;
    $234 = (_fmt_x($229,$232,$11,$233)|0);
    $235 = ($229|0)==(0);
    $236 = ($232|0)==(0);
    $237 = $235 & $236;
    $238 = $$3265 & 8;
    $239 = ($238|0)==(0);
    $or$cond278 = $239 | $237;
    $240 = $$1236 >> 4;
    $241 = (19967 + ($240)|0);
    $$286 = $or$cond278 ? 19967 : $241;
    $$287 = $or$cond278 ? 0 : 2;
    $$0228 = $234;$$1233 = $$287;$$1238 = $$286;$$2256 = $$1255;$$4266 = $$3265;$280 = $229;$282 = $232;
    label = 68;
   }
   else if ((label|0) == 67) {
    label = 0;
    $277 = (_fmt_u($275,$276,$11)|0);
    $$0228 = $277;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$280 = $275;$282 = $276;
    label = 68;
   }
   else if ((label|0) == 72) {
    label = 0;
    $305 = (_memchr($$1,0,$$0254)|0);
    $306 = ($305|0)==(0|0);
    $307 = $305;
    $308 = $$1;
    $309 = (($307) - ($308))|0;
    $310 = (($$1) + ($$0254)|0);
    $$3257 = $306 ? $$0254 : $309;
    $$1250 = $306 ? $310 : $305;
    $$2 = $$1;$$2234 = 0;$$2239 = 19967;$$2251 = $$1250;$$5 = $$3257;$$6268 = $196;
   }
   else if ((label|0) == 76) {
    label = 0;
    $$0229316 = $365;$$0240315 = 0;$$1244314 = 0;
    while(1) {
     $318 = HEAP32[$$0229316>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $$0240$lcssa = $$0240315;$$2245 = $$1244314;
      break;
     }
     $320 = (_wctomb($9,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($$4258354) - ($$0240315))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond281 = $321 | $323;
     if ($or$cond281) {
      $$0240$lcssa = $$0240315;$$2245 = $320;
      break;
     }
     $324 = ((($$0229316)) + 4|0);
     $325 = (($320) + ($$0240315))|0;
     $326 = ($$4258354>>>0)>($325>>>0);
     if ($326) {
      $$0229316 = $324;$$0240315 = $325;$$1244314 = $320;
     } else {
      $$0240$lcssa = $325;$$2245 = $320;
      break;
     }
    }
    $327 = ($$2245|0)<(0);
    if ($327) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $328 = ($$0240$lcssa|0)==(0);
    if ($328) {
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$1230327 = $365;$$1241326 = 0;
     while(1) {
      $329 = HEAP32[$$1230327>>2]|0;
      $330 = ($329|0)==(0);
      if ($330) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $331 = (_wctomb($9,$329)|0);
      $332 = (($331) + ($$1241326))|0;
      $333 = ($332|0)>($$0240$lcssa|0);
      if ($333) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $334 = ((($$1230327)) + 4|0);
      _out($0,$9,$331);
      $335 = ($332>>>0)<($$0240$lcssa>>>0);
      if ($335) {
       $$1230327 = $334;$$1241326 = $332;
      } else {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 68) {
   label = 0;
   $278 = ($$2256|0)>(-1);
   $279 = $$4266 & -65537;
   $$$4266 = $278 ? $279 : $$4266;
   $281 = ($280|0)!=(0);
   $283 = ($282|0)!=(0);
   $284 = $281 | $283;
   $285 = ($$2256|0)!=(0);
   $or$cond = $285 | $284;
   $286 = $$0228;
   $287 = (($12) - ($286))|0;
   $288 = $284 ^ 1;
   $289 = $288&1;
   $290 = (($287) + ($289))|0;
   $291 = ($$2256|0)>($290|0);
   $$2256$ = $291 ? $$2256 : $290;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 85) {
   label = 0;
   $336 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa356,$336);
   $337 = ($$1260|0)>($$0240$lcssa356|0);
   $338 = $337 ? $$1260 : $$0240$lcssa356;
   $$0243 = $338;$$0247 = $$1248;$$0269 = $$3272;
   continue;
  }
  $341 = $$2251;
  $342 = $$2;
  $343 = (($341) - ($342))|0;
  $344 = ($$5|0)<($343|0);
  $$$5 = $344 ? $343 : $$5;
  $345 = (($$$5) + ($$2234))|0;
  $346 = ($$1260|0)<($345|0);
  $$2261 = $346 ? $345 : $$1260;
  _pad($0,32,$$2261,$345,$$6268);
  _out($0,$$2239,$$2234);
  $347 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$345,$347);
  _pad($0,48,$$$5,$343,0);
  _out($0,$$2,$343);
  $348 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$345,$348);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;
 }
 L116: do {
  if ((label|0) == 88) {
   $349 = ($0|0)==(0|0);
   if ($349) {
    $350 = ($$0269|0)==(0);
    if ($350) {
     $$0 = 0;
    } else {
     $$2242302 = 1;
     while(1) {
      $351 = (($4) + ($$2242302<<2)|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       $$2242$lcssa = $$2242302;
       break;
      }
      $355 = (($3) + ($$2242302<<3)|0);
      _pop_arg($355,$352,$2);
      $356 = (($$2242302) + 1)|0;
      $357 = ($$2242302|0)<(9);
      if ($357) {
       $$2242302 = $356;
      } else {
       $$2242$lcssa = $356;
       break;
      }
     }
     $354 = ($$2242$lcssa|0)<(10);
     if ($354) {
      $$3300 = $$2242$lcssa;
      while(1) {
       $360 = (($4) + ($$3300<<2)|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($361|0)==(0);
       if (!($362)) {
        $$0 = -1;
        break L116;
       }
       $358 = (($$3300) + 1)|0;
       $359 = ($$3300|0)<(9);
       if ($359) {
        $$3300 = $358;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (20015 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_537($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = - $1;
  $$0471 = $14;$$0520 = 1;$$0521 = 19984;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (19985) : (19990);
  $$$ = $16 ? $$ : (19987);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_537($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 20003 : 20007;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 20042 : 20011;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad($0,32,$2,$31,$32);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = - $35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = - $56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (20015 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad($0,32,$2,$106,$4);
    _out($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad($0,48,$2,$106,$107);
    _out($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad($0,48,$108,0,0);
    _out($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$123 = $$pr;
    while(1) {
     $124 = ($123|0)<(29);
     $125 = $124 ? $123 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$123 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = - $$543;
      $232 = - $$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad($0,32,$2,$323,$4);
   _out($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out($0,20031,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out($0,20031,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS_537($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_215()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_215() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 15]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   (_memcpy(($31|0),($$141|0),($$143|0))|0);
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($$|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (20033 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (20042 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $79 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $79 = $78;
      }
      $80 = ($79|0)==(40);
      if ($80) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0, $$pre$phi201Z2D = 0.0, $$pre200 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$50 = 0;$52 = 0;$95 = 0;$97 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $40 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $40 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $41 = ($40|0)==(48);
    if ($41) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $40;$$2144 = 1;$50 = 0;$52 = 0;$95 = $38;$97 = $39;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$50 = 0;$52 = 0;$95 = 0;$97 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $$pre = $$2 | 32;
  if ($43) {
   label = 20;
  } else {
   $44 = (($$pre) + -97)|0;
   $45 = ($44>>>0)<(6);
   $46 = ($$2|0)==(46);
   $or$cond6 = $46 | $45;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
   if ($46) {
    $47 = ($$0146|0)==(0);
    if ($47) {
     $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$211 = $52;$212 = $50;$213 = $52;$214 = $50;
    } else {
     $$2$lcssa = 46;
     break;
    }
   } else {
    label = 20;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $48 = ($$2|0)>(57);
   $49 = (($$pre) + -87)|0;
   $$0133 = $48 ? $49 : $42;
   $51 = ($50|0)<(0);
   $53 = ($52>>>0)<(8);
   $54 = ($50|0)==(0);
   $55 = $54 & $53;
   $56 = $51 | $55;
   do {
    if ($56) {
     $57 = $$0159 << 4;
     $58 = (($$0133) + ($57))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $58;
    } else {
     $59 = ($50|0)<(0);
     $60 = ($52>>>0)<(14);
     $61 = ($50|0)==(0);
     $62 = $61 & $60;
     $63 = $59 | $62;
     if ($63) {
      $64 = (+($$0133|0));
      $65 = $$0152 * 0.0625;
      $66 = $65 * $64;
      $67 = $$0155 + $66;
      $$1149 = $$0148;$$1153 = $65;$$1156 = $67;$$1160 = $$0159;
      break;
     } else {
      $68 = ($$0133|0)==(0);
      $69 = ($$0148|0)!=(0);
      $or$cond = $69 | $68;
      $70 = $$0152 * 0.5;
      $71 = $$0155 + $70;
      $$0155$ = $or$cond ? $$0155 : $71;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $72 = (_i64Add(($52|0),($50|0),1,0)|0);
   $73 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$211 = $95;$212 = $97;$213 = $72;$214 = $73;
  }
  $74 = HEAP32[$5>>2]|0;
  $75 = HEAP32[$7>>2]|0;
  $76 = ($74>>>0)<($75>>>0);
  if ($76) {
   $77 = ((($74)) + 1|0);
   HEAP32[$5>>2] = $77;
   $78 = HEAP8[$74>>0]|0;
   $79 = $78&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $79;$$2144 = $$3145;$50 = $214;$52 = $213;$95 = $211;$97 = $212;
   continue;
  } else {
   $80 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $80;$$2144 = $$3145;$50 = $214;$52 = $213;$95 = $211;$97 = $212;
   continue;
  }
 }
 $81 = ($$2144|0)==(0);
 do {
  if ($81) {
   $82 = HEAP32[$7>>2]|0;
   $83 = ($82|0)==(0|0);
   if (!($83)) {
    $84 = HEAP32[$5>>2]|0;
    $85 = ((($84)) + -1|0);
    HEAP32[$5>>2] = $85;
   }
   $86 = ($4|0)==(0);
   if ($86) {
    ___shlim($0,0);
   } else {
    if (!($83)) {
     $87 = HEAP32[$5>>2]|0;
     $88 = ((($87)) + -1|0);
     HEAP32[$5>>2] = $88;
    }
    $89 = ($$0146|0)==(0);
    $brmerge = $89 | $83;
    if (!($brmerge)) {
     $90 = HEAP32[$5>>2]|0;
     $91 = ((($90)) + -1|0);
     HEAP32[$5>>2] = $91;
    }
   }
   $92 = (+($3|0));
   $93 = $92 * 0.0;
   $$0165 = $93;
  } else {
   $94 = ($$0146|0)==(0);
   $96 = $94 ? $52 : $95;
   $98 = $94 ? $50 : $97;
   $99 = ($50|0)<(0);
   $100 = ($52>>>0)<(8);
   $101 = ($50|0)==(0);
   $102 = $101 & $100;
   $103 = $99 | $102;
   if ($103) {
    $$3162183 = $$0159;$105 = $52;$106 = $50;
    while(1) {
     $104 = $$3162183 << 4;
     $107 = (_i64Add(($105|0),($106|0),1,0)|0);
     $108 = tempRet0;
     $109 = ($106|0)<(0);
     $110 = ($105>>>0)<(7);
     $111 = ($106|0)==(0);
     $112 = $111 & $110;
     $113 = $109 | $112;
     if ($113) {
      $$3162183 = $104;$105 = $107;$106 = $108;
     } else {
      $$3162$lcssa = $104;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $114 = $$2$lcssa | 32;
   $115 = ($114|0)==(112);
   if ($115) {
    $116 = (_scanexp($0,$4)|0);
    $117 = tempRet0;
    $118 = ($116|0)==(0);
    $119 = ($117|0)==(-2147483648);
    $120 = $118 & $119;
    if ($120) {
     $121 = ($4|0)==(0);
     if ($121) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $122 = HEAP32[$7>>2]|0;
     $123 = ($122|0)==(0|0);
     if ($123) {
      $134 = 0;$135 = 0;
     } else {
      $124 = HEAP32[$5>>2]|0;
      $125 = ((($124)) + -1|0);
      HEAP32[$5>>2] = $125;
      $134 = 0;$135 = 0;
     }
    } else {
     $134 = $116;$135 = $117;
    }
   } else {
    $126 = HEAP32[$7>>2]|0;
    $127 = ($126|0)==(0|0);
    if ($127) {
     $134 = 0;$135 = 0;
    } else {
     $128 = HEAP32[$5>>2]|0;
     $129 = ((($128)) + -1|0);
     HEAP32[$5>>2] = $129;
     $134 = 0;$135 = 0;
    }
   }
   $130 = (_bitshift64Shl(($96|0),($98|0),2)|0);
   $131 = tempRet0;
   $132 = (_i64Add(($130|0),($131|0),-32,-1)|0);
   $133 = tempRet0;
   $136 = (_i64Add(($132|0),($133|0),($134|0),($135|0))|0);
   $137 = tempRet0;
   $138 = ($$3162$lcssa|0)==(0);
   if ($138) {
    $139 = (+($3|0));
    $140 = $139 * 0.0;
    $$0165 = $140;
    break;
   }
   $141 = (0 - ($2))|0;
   $142 = ($141|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = ($137|0)>($143|0);
   $145 = ($136>>>0)>($141>>>0);
   $146 = ($137|0)==($143|0);
   $147 = $146 & $145;
   $148 = $144 | $147;
   if ($148) {
    $149 = (___errno_location()|0);
    HEAP32[$149>>2] = 34;
    $150 = (+($3|0));
    $151 = $150 * 1.7976931348623157E+308;
    $152 = $151 * 1.7976931348623157E+308;
    $$0165 = $152;
    break;
   }
   $153 = (($2) + -106)|0;
   $154 = ($153|0)<(0);
   $155 = $154 << 31 >> 31;
   $156 = ($137|0)<($155|0);
   $157 = ($136>>>0)<($153>>>0);
   $158 = ($137|0)==($155|0);
   $159 = $158 & $157;
   $160 = $156 | $159;
   if ($160) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0165 = $165;
    break;
   }
   $161 = ($$3162$lcssa|0)>(-1);
   if ($161) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$170 = $136;$171 = $137;
    while(1) {
     $166 = !($$3158179 >= 0.5);
     $167 = $$4163178 << 1;
     $168 = $$3158179 + -1.0;
     $not$ = $166 ^ 1;
     $169 = $not$&1;
     $$5164 = $167 | $169;
     $$pn = $166 ? $$3158179 : $168;
     $$4 = $$3158179 + $$pn;
     $172 = (_i64Add(($170|0),($171|0),-1,-1)|0);
     $173 = tempRet0;
     $174 = ($$5164|0)>(-1);
     if ($174) {
      $$3158179 = $$4;$$4163178 = $$5164;$170 = $172;$171 = $173;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$181 = $172;$182 = $173;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$181 = $136;$182 = $137;
   }
   $175 = ($1|0)<(0);
   $176 = $175 << 31 >> 31;
   $177 = ($2|0)<(0);
   $178 = $177 << 31 >> 31;
   $179 = (_i64Subtract(32,0,($2|0),($178|0))|0);
   $180 = tempRet0;
   $183 = (_i64Add(($179|0),($180|0),($181|0),($182|0))|0);
   $184 = tempRet0;
   $185 = ($184|0)<($176|0);
   $186 = ($183>>>0)<($1>>>0);
   $187 = ($184|0)==($176|0);
   $188 = $187 & $186;
   $189 = $185 | $188;
   if ($189) {
    $190 = ($183|0)>(0);
    if ($190) {
     $$0166 = $183;
     label = 59;
    } else {
     $$0166170 = 0;$194 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $191 = ($$0166|0)<(53);
    $192 = (84 - ($$0166))|0;
    if ($191) {
     $$0166170 = $$0166;$194 = $192;
     label = 61;
    } else {
     $$pre200 = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phi201Z2D = $$pre200;
    }
   }
   if ((label|0) == 61) {
    $193 = (+($3|0));
    $195 = (+_scalbn(1.0,$194));
    $196 = (+_copysignl($195,$193));
    $$0151 = $196;$$0166169 = $$0166170;$$pre$phi201Z2D = $193;
   }
   $197 = ($$0166169|0)<(32);
   $198 = $$3158$lcssa != 0.0;
   $or$cond4 = $198 & $197;
   $199 = $$4163$lcssa & 1;
   $200 = ($199|0)==(0);
   $or$cond168 = $200 & $or$cond4;
   $201 = $or$cond168&1;
   $$6 = (($$4163$lcssa) + ($201))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $202 = (+($$6>>>0));
   $203 = $$pre$phi201Z2D * $202;
   $204 = $$0151 + $203;
   $205 = $$5 * $$pre$phi201Z2D;
   $206 = $205 + $204;
   $207 = $206 - $$0151;
   $208 = $207 != 0.0;
   if (!($208)) {
    $209 = (___errno_location()|0);
    HEAP32[$209>>2] = 34;
   }
   $210 = (+_scalbnl($207,$181));
   $$0165 = $210;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0;
 var $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$413 = 0, $$423 = 0, $$4349493 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$neg440 = 0, $$neg441 = 0, $$pre = 0, $$pre551 = 0;
 var $$promoted = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0;
 var $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond420 = 0, $or$cond420$not = 0, $or$cond421 = 0, $or$cond424 = 0, $or$cond5 = 0;
 var $or$cond579 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$368 = 0;$369 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$368 = $27;$369 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$368 = 0;$369 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341511 = 0;$$0345510 = 0;$$0401507 = 0;$$1394509 = $$0393;$$3399508 = $$2398;$$3512 = $$2;$370 = $39;$371 = $37;$372 = $368;$373 = $369;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($370) {
      $cond = ($$1394509|0)==(0);
      if ($cond) {
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = 1;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $44;$375 = $45;$376 = $44;$377 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345510|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3512|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401507;
      $49 = ($$0341511|0)==(0);
      $$pre551 = (($6) + ($$0345510<<2)|0);
      if ($49) {
       $$sink = $371;
      } else {
       $50 = HEAP32[$$pre551>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3512) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre551>>2] = $$sink;
      $54 = (($$0341511) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($$0345510) + ($56))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394509;$$2403 = $$$0401;$$4400 = 1;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341511 = $$2343;$$0345510 = $$2347;$$0401507 = $$2403;$$1394509 = $$2395;$$3399508 = $$4400;$$3512 = $$3$be;$370 = $68;$371 = $66;$372 = $374;$373 = $375;$44 = $376;$45 = $377;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$71 = $374;$72 = $376;$74 = $375;$75 = $377;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399508|0)!=(0);
   $$0341463 = $$0341511;$$0345467 = $$0345510;$$0401473 = $$0401507;$378 = $44;$379 = $45;$380 = $372;$381 = $373;$382 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$71 = $368;$72 = 0;$74 = $369;$75 = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $73 = $70 ? $72 : $71;
   $76 = $70 ? $75 : $74;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$378 = $72;$379 = $75;$380 = $73;$381 = $76;$382 = $77;
     label = 37;
     break;
    } else {
     $$0341462 = $$0341$lcssa;$$0345466 = $$0345$lcssa;$$0401472 = $$0401$lcssa;$383 = $72;$384 = $75;$385 = $77;$386 = $73;$387 = $76;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($73|0),($76|0))|0);
   $93 = tempRet0;
   $$0341461 = $$0341$lcssa;$$0345465 = $$0345$lcssa;$$0401471 = $$0401$lcssa;$104 = $92;$106 = $72;$107 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341462 = $$0341463;$$0345466 = $$0345467;$$0401472 = $$0401473;$383 = $378;$384 = $379;$385 = $382;$386 = $380;$387 = $381;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($382) {
    $$0341461 = $$0341463;$$0345465 = $$0345467;$$0401471 = $$0401473;$104 = $380;$106 = $378;$107 = $381;$109 = $379;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($385) {
   $$0341461 = $$0341462;$$0345465 = $$0345466;$$0401471 = $$0401472;$104 = $386;$106 = $383;$107 = $387;$109 = $384;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $105 = ($104|0)==($106|0);
   $108 = ($107|0)==($109|0);
   $110 = $105 & $108;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($107|0)>($124|0);
   $126 = ($104>>>0)>($122>>>0);
   $127 = ($107|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($107|0)<($136|0);
   $138 = ($104>>>0)<($134>>>0);
   $139 = ($107|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341461|0)==(0);
   if ($146) {
    $$3348 = $$0345465;
   } else {
    $147 = ($$0341461|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345465<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344501 = $$0341461;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344501) + 1)|0;
      $152 = ($$3344501|0)<(8);
      if ($152) {
       $$3344501 = $151;$150 = $149;
      } else {
       break;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $153 = (($$0345465) + 1)|0;
    $$3348 = $153;
   }
   $154 = ($$0401471|0)<(9);
   if ($154) {
    $155 = ($$0401471|0)<=($104|0);
    $156 = ($104|0)<(18);
    $or$cond5 = $155 & $156;
    if ($or$cond5) {
     $157 = ($104|0)==(9);
     if ($157) {
      $158 = (+($4|0));
      $159 = HEAP32[$6>>2]|0;
      $160 = (+($159>>>0));
      $161 = $158 * $160;
      $$1 = $161;
      break;
     }
     $162 = ($104|0)<(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $167 = (8 - ($104))|0;
      $168 = (9996 + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (+($169|0));
      $171 = $166 / $170;
      $$1 = $171;
      break;
     }
     $$neg440 = Math_imul($104, -3)|0;
     $$neg441 = (($2) + 27)|0;
     $172 = (($$neg441) + ($$neg440))|0;
     $173 = ($172|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $174 = $$pre >>> $172;
     $175 = ($174|0)==(0);
     $or$cond579 = $173 | $175;
     if ($or$cond579) {
      $176 = (+($4|0));
      $177 = (+($$pre>>>0));
      $178 = $176 * $177;
      $179 = (($104) + -10)|0;
      $180 = (9996 + ($179<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (+($181|0));
      $183 = $178 * $182;
      $$1 = $183;
      break;
     }
    }
   }
   $184 = (($104|0) % 9)&-1;
   $185 = ($184|0)==(0);
   if ($185) {
    $$0380$ph = 0;$$1373$ph446 = $$3348;$$2352$ph447 = 0;$$2387$ph445 = $104;
   } else {
    $186 = ($104|0)>(-1);
    $187 = (($184) + 9)|0;
    $188 = $186 ? $184 : $187;
    $189 = (8 - ($188))|0;
    $190 = (9996 + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($$3348|0)==(0);
    if ($192) {
     $$0350$lcssa553 = 0;$$0372 = 0;$$0385$lcssa552 = $104;
    } else {
     $193 = (1000000000 / ($191|0))&-1;
     $$0340494 = 0;$$0350492 = 0;$$0385491 = $104;$$4349493 = 0;
     while(1) {
      $194 = (($6) + ($$4349493<<2)|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195>>>0) % ($191>>>0))&-1;
      $197 = (($195>>>0) / ($191>>>0))&-1;
      $198 = (($197) + ($$0340494))|0;
      HEAP32[$194>>2] = $198;
      $199 = Math_imul($193, $196)|0;
      $200 = ($$4349493|0)==($$0350492|0);
      $201 = ($198|0)==(0);
      $or$cond418 = $200 & $201;
      $202 = (($$0350492) + 1)|0;
      $203 = $202 & 127;
      $204 = (($$0385491) + -9)|0;
      $$$0385 = $or$cond418 ? $204 : $$0385491;
      $$$0350 = $or$cond418 ? $203 : $$0350492;
      $205 = (($$4349493) + 1)|0;
      $206 = ($205|0)==($$3348|0);
      if ($206) {
       break;
      } else {
       $$0340494 = $199;$$0350492 = $$$0350;$$0385491 = $$$0385;$$4349493 = $205;
      }
     }
     $207 = ($199|0)==(0);
     if ($207) {
      $$0350$lcssa553 = $$$0350;$$0372 = $$3348;$$0385$lcssa552 = $$$0385;
     } else {
      $208 = (($6) + ($$3348<<2)|0);
      $209 = (($$3348) + 1)|0;
      HEAP32[$208>>2] = $199;
      $$0350$lcssa553 = $$$0350;$$0372 = $209;$$0385$lcssa552 = $$$0385;
     }
    }
    $210 = (9 - ($188))|0;
    $211 = (($210) + ($$0385$lcssa552))|0;
    $$0380$ph = 0;$$1373$ph446 = $$0372;$$2352$ph447 = $$0350$lcssa553;$$2387$ph445 = $211;
   }
   L101: while(1) {
    $212 = ($$2387$ph445|0)<(18);
    $213 = ($$2387$ph445|0)==(18);
    $214 = (($6) + ($$2352$ph447<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph446;
    while(1) {
     if (!($212)) {
      if (!($213)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = $$2387$ph445;$$6378$ph = $$1373;
       break L101;
      }
      $215 = HEAP32[$214>>2]|0;
      $216 = ($215>>>0)<(9007199);
      if (!($216)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $217 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $217;
     while(1) {
      $$5 = $$5$in & 127;
      $218 = (($6) + ($$5<<2)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = (_bitshift64Shl(($219|0),0,29)|0);
      $221 = tempRet0;
      $222 = (_i64Add(($220|0),($221|0),($$0334|0),0)|0);
      $223 = tempRet0;
      $224 = ($223>>>0)>(0);
      $225 = ($222>>>0)>(1000000000);
      $226 = ($223|0)==(0);
      $227 = $226 & $225;
      $228 = $224 | $227;
      if ($228) {
       $229 = (___udivdi3(($222|0),($223|0),1000000000,0)|0);
       $230 = tempRet0;
       $231 = (___uremdi3(($222|0),($223|0),1000000000,0)|0);
       $232 = tempRet0;
       $$1335 = $229;$$sink419$off0 = $231;
      } else {
       $$1335 = 0;$$sink419$off0 = $222;
      }
      HEAP32[$218>>2] = $$sink419$off0;
      $233 = (($$2374) + 127)|0;
      $234 = $233 & 127;
      $235 = ($$5|0)!=($234|0);
      $236 = ($$5|0)==($$2352$ph447|0);
      $or$cond420 = $235 | $236;
      $or$cond420$not = $or$cond420 ^ 1;
      $237 = ($$sink419$off0|0)==(0);
      $or$cond421 = $237 & $or$cond420$not;
      $$3375 = $or$cond421 ? $$5 : $$2374;
      $238 = (($$5) + -1)|0;
      if ($236) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $238;
      }
     }
     $239 = (($$0380) + -29)|0;
     $240 = ($$1335|0)==(0);
     if ($240) {
      $$0380 = $239;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $241 = (($$2387$ph445) + 9)|0;
    $242 = (($$2352$ph447) + 127)|0;
    $243 = $242 & 127;
    $244 = ($243|0)==($$3375|0);
    $245 = (($$3375) + 127)|0;
    $246 = $245 & 127;
    $247 = (($$3375) + 126)|0;
    $248 = $247 & 127;
    $249 = (($6) + ($248<<2)|0);
    if ($244) {
     $250 = (($6) + ($246<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = HEAP32[$249>>2]|0;
     $253 = $252 | $251;
     HEAP32[$249>>2] = $253;
     $$4376 = $246;
    } else {
     $$4376 = $$3375;
    }
    $254 = (($6) + ($243<<2)|0);
    HEAP32[$254>>2] = $$1335;
    $$0380$ph = $239;$$1373$ph446 = $$4376;$$2352$ph447 = $243;$$2387$ph445 = $241;
   }
   L119: while(1) {
    $291 = (($$6378$ph) + 1)|0;
    $288 = $291 & 127;
    $292 = (($$6378$ph) + 127)|0;
    $293 = $292 & 127;
    $294 = (($6) + ($293<<2)|0);
    $$1381$ph557 = $$1381$ph;$$4354$ph558 = $$4354$ph;$$4389$ph = $$4389$ph443;
    while(1) {
     $267 = ($$4389$ph|0)==(18);
     $295 = ($$4389$ph|0)>(27);
     $$423 = $295 ? 9 : 1;
     $$1381 = $$1381$ph557;$$4354 = $$4354$ph558;
     while(1) {
      $$0336484 = 0;
      while(1) {
       $255 = (($$0336484) + ($$4354))|0;
       $256 = $255 & 127;
       $257 = ($256|0)==($$6378$ph|0);
       if ($257) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $258 = (($6) + ($256<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = (10028 + ($$0336484<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = ($259>>>0)<($261>>>0);
       if ($262) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $263 = ($259>>>0)>($261>>>0);
       if ($263) {
        break;
       }
       $264 = (($$0336484) + 1)|0;
       $265 = ($$0336484|0)<(1);
       if ($265) {
        $$0336484 = $264;
       } else {
        $$1337 = $264;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $266 = ($$1337|0)==(2);
       $or$cond11 = $267 & $266;
       if ($or$cond11) {
        $$0365482 = 0.0;$$4483 = 0;$$9481 = $$6378$ph;
        break L119;
       }
      }
      $268 = (($$423) + ($$1381))|0;
      $269 = ($$4354|0)==($$6378$ph|0);
      if ($269) {
       $$1381 = $268;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $270 = 1 << $$423;
     $271 = (($270) + -1)|0;
     $272 = 1000000000 >>> $$423;
     $$0332488 = 0;$$5355486 = $$4354;$$5390485 = $$4389$ph;$$6487 = $$4354;
     while(1) {
      $273 = (($6) + ($$6487<<2)|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $274 & $271;
      $276 = $274 >>> $$423;
      $277 = (($276) + ($$0332488))|0;
      HEAP32[$273>>2] = $277;
      $278 = Math_imul($275, $272)|0;
      $279 = ($$6487|0)==($$5355486|0);
      $280 = ($277|0)==(0);
      $or$cond424 = $279 & $280;
      $281 = (($$5355486) + 1)|0;
      $282 = $281 & 127;
      $283 = (($$5390485) + -9)|0;
      $$$5390 = $or$cond424 ? $283 : $$5390485;
      $$$5355 = $or$cond424 ? $282 : $$5355486;
      $284 = (($$6487) + 1)|0;
      $285 = $284 & 127;
      $286 = ($285|0)==($$6378$ph|0);
      if ($286) {
       break;
      } else {
       $$0332488 = $278;$$5355486 = $$$5355;$$5390485 = $$$5390;$$6487 = $285;
      }
     }
     $287 = ($278|0)==(0);
     if ($287) {
      $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $289 = ($288|0)==($$$5355|0);
     if (!($289)) {
      break;
     }
     $296 = HEAP32[$294>>2]|0;
     $297 = $296 | 1;
     HEAP32[$294>>2] = $297;
     $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
    }
    $290 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$290>>2] = $278;
    $$1381$ph = $268;$$4354$ph = $$$5355;$$4389$ph443 = $$$5390;$$6378$ph = $288;
   }
   while(1) {
    $298 = (($$4483) + ($$4354))|0;
    $299 = $298 & 127;
    $300 = ($299|0)==($$9481|0);
    $301 = (($$9481) + 1)|0;
    $302 = $301 & 127;
    if ($300) {
     $303 = (($302) + -1)|0;
     $304 = (($6) + ($303<<2)|0);
     HEAP32[$304>>2] = 0;
     $$10 = $302;
    } else {
     $$10 = $$9481;
    }
    $305 = $$0365482 * 1.0E+9;
    $306 = (($6) + ($299<<2)|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = (+($307>>>0));
    $309 = $305 + $308;
    $310 = (($$4483) + 1)|0;
    $exitcond = ($310|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365482 = $309;$$4483 = $310;$$9481 = $$10;
    }
   }
   $311 = (+($4|0));
   $312 = $309 * $311;
   $313 = (($$1381) + 53)|0;
   $314 = (($313) - ($3))|0;
   $315 = ($314|0)<($2|0);
   $316 = ($314|0)>(0);
   $$ = $316 ? $314 : 0;
   $$0333 = $315 ? $$ : $2;
   $317 = ($$0333|0)<(53);
   if ($317) {
    $318 = (105 - ($$0333))|0;
    $319 = (+_scalbn(1.0,$318));
    $320 = (+_copysignl($319,$312));
    $321 = (53 - ($$0333))|0;
    $322 = (+_scalbn(1.0,$321));
    $323 = (+_fmodl($312,$322));
    $324 = $312 - $323;
    $325 = $320 + $324;
    $$0360 = $320;$$0361 = $323;$$1366 = $325;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $312;
   }
   $326 = (($$4354) + 2)|0;
   $327 = $326 & 127;
   $328 = ($327|0)==($$10|0);
   if ($328) {
    $$3364 = $$0361;
   } else {
    $329 = (($6) + ($327<<2)|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = ($330>>>0)<(500000000);
    do {
     if ($331) {
      $332 = ($330|0)==(0);
      if ($332) {
       $333 = (($$4354) + 3)|0;
       $334 = $333 & 127;
       $335 = ($334|0)==($$10|0);
       if ($335) {
        $$1362 = $$0361;
        break;
       }
      }
      $336 = $311 * 0.25;
      $337 = $336 + $$0361;
      $$1362 = $337;
     } else {
      $338 = ($330|0)==(500000000);
      if (!($338)) {
       $339 = $311 * 0.75;
       $340 = $339 + $$0361;
       $$1362 = $340;
       break;
      }
      $341 = (($$4354) + 3)|0;
      $342 = $341 & 127;
      $343 = ($342|0)==($$10|0);
      if ($343) {
       $344 = $311 * 0.5;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      } else {
       $346 = $311 * 0.75;
       $347 = $346 + $$0361;
       $$1362 = $347;
       break;
      }
     }
    } while(0);
    $348 = (53 - ($$0333))|0;
    $349 = ($348|0)>(1);
    if ($349) {
     $350 = (+_fmodl($$1362,1.0));
     $351 = $350 != 0.0;
     if ($351) {
      $$3364 = $$1362;
     } else {
      $352 = $$1362 + 1.0;
      $$3364 = $352;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $353 = $$1366 + $$3364;
   $354 = $353 - $$0360;
   $355 = $313 & 2147483647;
   $356 = (-2 - ($sum))|0;
   $357 = ($355|0)>($356|0);
   do {
    if ($357) {
     $358 = (+Math_abs((+$354)));
     $359 = !($358 >= 9007199254740992.0);
     $360 = $354 * 0.5;
     $not$ = $359 ^ 1;
     $361 = $not$&1;
     $$3383 = (($$1381) + ($361))|0;
     $$2367 = $359 ? $354 : $360;
     $362 = (($$3383) + 50)|0;
     $363 = ($362|0)>($7|0);
     if (!($363)) {
      $364 = ($$0333|0)!=($314|0);
      $narrow = $364 | $359;
      $$2371$v = $315 & $narrow;
      $365 = $$3364 != 0.0;
      $or$cond14 = $365 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $366 = (___errno_location()|0);
     HEAP32[$366>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $354;$$4384 = $$1381;
    }
   } while(0);
   $367 = (+_scalbnl($$3368,$$4384));
   $$1 = $367;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_344($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$100 = $92;$156 = $97;$157 = $87;$158 = $88;$98 = $91;
      while(1) {
       if ($156) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$100 = $111;$156 = $116;$157 = $106;$158 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $122 = $119;$124 = $117;
     }
    } else {
     $122 = $160;$124 = $159;
    }
    $123 = ($122>>>0)<(1048576);
    $125 = ($124>>>0)<(0);
    $126 = ($122|0)==(1048576);
    $127 = $126 & $125;
    $128 = $123 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $124;$131 = $122;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $124;$142 = $122;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_344($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11214 = 0, $$neg13 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$9 = $6;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$9 = $$pre;
 }
 $8 = $9 << 24 >> 24;
 $10 = (_isdigit($8)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$11214 = $$112$ph;
  while(1) {
   $12 = ($$01015*10)|0;
   $13 = ((($$11214)) + 1|0);
   $14 = HEAP8[$$11214>>0]|0;
   $15 = $14 << 24 >> 24;
   $$neg13 = (($12) + 48)|0;
   $16 = (($$neg13) - ($15))|0;
   $17 = HEAP8[$13>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = (_isdigit($18)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$010$lcssa = $16;
    break;
   } else {
    $$01015 = $16;$$11214 = $13;
   }
  }
 }
 $21 = ($$1$ph|0)!=(0);
 $22 = (0 - ($$010$lcssa))|0;
 $23 = $21 ? $$010$lcssa : $22;
 return ($23|0);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$$>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_224()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     $17 = HEAP8[$1>>0]|0;
     if ($16) {
      $18 = $17 << 24 >> 24;
      $19 = $18 & 57343;
      HEAP32[$$>>2] = $19;
      $$0 = 1;
      break L1;
     }
     $20 = $17&255;
     $21 = (($20) + -194)|0;
     $22 = ($21>>>0)>(50);
     if (!($22)) {
      $23 = ((($1)) + 1|0);
      $24 = (9032 + ($21<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($2>>>0)<(4);
      if ($26) {
       $27 = ($2*6)|0;
       $28 = (($27) + -6)|0;
       $29 = -2147483648 >>> $28;
       $30 = $25 & $29;
       $31 = ($30|0)==(0);
       if (!($31)) {
        break;
       }
      }
      $32 = HEAP8[$23>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $25 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if (!($39)) {
       $40 = $25 << 6;
       $41 = (($33) + -128)|0;
       $42 = $41 | $40;
       $43 = ($42|0)<(0);
       if (!($43)) {
        HEAP32[$$>>2] = $42;
        $$0 = 2;
        break L1;
       }
       $44 = ((($1)) + 2|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (($46) + -128)|0;
       $48 = ($47>>>0)>(63);
       if (!($48)) {
        $49 = $42 << 6;
        $50 = $47 | $49;
        $51 = ($50|0)<(0);
        if (!($51)) {
         HEAP32[$$>>2] = $50;
         $$0 = 3;
         break L1;
        }
        $52 = ((($1)) + 3|0);
        $53 = HEAP8[$52>>0]|0;
        $54 = $53&255;
        $55 = (($54) + -128)|0;
        $56 = ($55>>>0)>(63);
        if (!($56)) {
         $57 = $50 << 6;
         $58 = $55 | $57;
         HEAP32[$$>>2] = $58;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $59 = (___errno_location()|0);
   HEAP32[$59>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_224() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _isatty($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 21523;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall54(54,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 $5 = ($4|0)==(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall3(3,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_dummy_245($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $$ = $3 ? 0 : $2;
 $4 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($4|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall4(4,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _lseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = $3;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $4;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $5 = (___syscall140(140,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 $7 = ($6|0)!=(0);
 $8 = HEAP32[$3>>2]|0;
 $9 = $7 ? -1 : $8;
 STACKTOP = sp;return ($9|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_512()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((20676|0));
 return (20684|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((20676|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2373]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[2373]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 15]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___pthread_self_512() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 15]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _funlockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  ___unlist_locked_file($0);
  HEAP32[$1>>2] = 0;
  ___unlockfile($0);
 } else {
  $4 = (($2) + -1)|0;
  HEAP32[$1>>2] = $4;
 }
 return;
}
function _ftrylockfile($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_512()|0);
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($3|0);
 if ($6) {
  $7 = ((($0)) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(2147483647);
  if ($9) {
   $$0 = -1;
  } else {
   $10 = (($8) + 1)|0;
   HEAP32[$7>>2] = $10;
   $$0 = 0;
  }
 } else {
  $11 = HEAP32[$4>>2]|0;
  $12 = ($11|0)<(0);
  if ($12) {
   HEAP32[$4>>2] = 0;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   _a_cas($4,$3);
   $15 = ((($0)) + 68|0);
   HEAP32[$15>>2] = 1;
   $16 = ((($0)) + 112|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($1)) + 232|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($0)) + 116|0);
   HEAP32[$19>>2] = $18;
   $20 = ($18|0)==(0|0);
   if (!($20)) {
    $21 = ((($18)) + 112|0);
    HEAP32[$21>>2] = $0;
   }
   HEAP32[$17>>2] = $0;
   $$0 = 0;
  } else {
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _a_cas($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$0>>2] = $1;
 }
 return;
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[2341]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $4 = ($3|0)!=($2|0);
 $5 = $4 << 31 >> 31;
 return ($5|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $$;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function _putc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _flockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ftrylockfile($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($0)) + 76|0);
  $4 = ((($0)) + 80|0);
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    ___wait(($3|0),($4|0),($5|0),1);
   }
   $7 = (_ftrylockfile($0)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
  }
 }
 return;
}
function _fileno($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  if (!($phitmp)) {
  }
 }
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _putchar($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[2341]|0;
 $2 = (_fputc($0,$1)|0);
 return ($2|0);
}
function ___getopt_msg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[2374]|0;
 $5 = (___lctrans_cur($1)|0);
 _flockfile($4);
 $6 = (_fputs($0,$4)|0);
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (_strlen($5)|0);
  $9 = (_fwrite($5,$8,1,$4)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = (_fwrite($2,1,$3,$4)|0);
   $12 = ($11|0)==($3|0);
   if ($12) {
    (_putc(10,$4)|0);
   }
  }
 }
 _funlockfile($4);
 return;
}
function _getopt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$1 = 0, $$pre52 = 0, $$pre53 = 0, $$pre54 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = HEAP32[2406]|0;
 $6 = ($5|0)==(0);
 $7 = (0)!=(0);
 $or$cond = $6 | $7;
 if ($or$cond) {
  HEAP32[5167] = 0;
  HEAP32[2406] = 1;
  $8 = 1;
 } else {
  $8 = $5;
 }
 $9 = ($8|0)<($0|0);
 L4: do {
  if ($9) {
   $10 = (($1) + ($8<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $13 = $11;
   if ($12) {
    $$0 = -1;
   } else {
    $14 = HEAP8[$11>>0]|0;
    $15 = ($14<<24>>24)==(45);
    if (!($15)) {
     $16 = HEAP8[$2>>0]|0;
     $17 = ($16<<24>>24)==(45);
     if (!($17)) {
      $$0 = -1;
      break;
     }
     $18 = (($8) + 1)|0;
     HEAP32[2406] = $18;
     HEAP32[5168] = $13;
     $$0 = 1;
     break;
    }
    $19 = ((($11)) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    switch ($20<<24>>24) {
    case 0:  {
     $$0 = -1;
     break L4;
     break;
    }
    case 45:  {
     $21 = ((($11)) + 2|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if ($23) {
      $24 = (($8) + 1)|0;
      HEAP32[2406] = $24;
      $$0 = -1;
      break L4;
     }
     break;
    }
    default: {
    }
    }
    $25 = HEAP32[5167]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[5167] = 1;
     $28 = 1;
    } else {
     $28 = $25;
    }
    $27 = (($11) + ($28)|0);
    $29 = (_mbtowc($3,$27,4)|0);
    $30 = ($29|0)<(0);
    if ($30) {
     HEAP32[$3>>2] = 65533;
     $$050 = 1;
    } else {
     $$050 = $29;
    }
    $31 = HEAP32[2406]|0;
    $32 = (($1) + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[5167]|0;
    $35 = (($33) + ($34)|0);
    $36 = (($34) + ($$050))|0;
    HEAP32[5167] = $36;
    $37 = (($33) + ($36)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $40 = (($31) + 1)|0;
     HEAP32[2406] = $40;
     HEAP32[5167] = 0;
    }
    $41 = HEAP8[$2>>0]|0;
    switch ($41<<24>>24) {
    case 43: case 45:  {
     $42 = ((($2)) + 1|0);
     $$049 = $42;
     break;
    }
    default: {
     $$049 = $2;
    }
    }
    HEAP32[$4>>2] = 0;
    $$051 = 0;
    while(1) {
     $43 = (($$049) + ($$051)|0);
     $44 = (_mbtowc($4,$43,4)|0);
     $45 = ($44|0)>(1);
     $$ = $45 ? $44 : 1;
     $$1 = (($$) + ($$051))|0;
     $46 = ($44|0)==(0);
     $$pre52 = HEAP32[$4>>2]|0;
     $$pre53 = HEAP32[$3>>2]|0;
     $47 = ($$pre52|0)==($$pre53|0);
     if ($46) {
      label = 23;
      break;
     }
     if ($47) {
      $75 = $$pre52;
      break;
     } else {
      $$051 = $$1;
     }
    }
    if ((label|0) == 23) {
     if ($47) {
      $75 = $$pre53;
     } else {
      $48 = HEAP8[$$049>>0]|0;
      $49 = ($48<<24>>24)!=(58);
      $50 = (1)!=(0);
      $or$cond3 = $49 & $50;
      if (!($or$cond3)) {
       $$0 = 63;
       break;
      }
      $51 = HEAP32[$1>>2]|0;
      ___getopt_msg($51,20046,$35,$$050);
      $$0 = 63;
      break;
     }
    }
    $52 = (($$049) + ($$1)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = ($53<<24>>24)==(58);
    if ($54) {
     $55 = (($$1) + 1)|0;
     $56 = (($$049) + ($55)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = ($57<<24>>24)==(58);
     do {
      if ($58) {
       HEAP32[5168] = 0;
       $$pre54 = HEAP8[$56>>0]|0;
       $66 = ($$pre54<<24>>24)!=(58);
       $67 = HEAP32[5167]|0;
       $68 = ($67|0)!=(0);
       $or$cond5 = $66 | $68;
       if ($or$cond5) {
        $74 = $67;
       } else {
        $$0 = $75;
        break L4;
       }
      } else {
       $59 = HEAP32[2406]|0;
       $60 = ($59|0)<($0|0);
       if ($60) {
        $61 = HEAP32[5167]|0;
        $74 = $61;
        break;
       }
       $62 = HEAP8[$$049>>0]|0;
       $63 = ($62<<24>>24)==(58);
       if ($63) {
        $$0 = 58;
        break L4;
       }
       $64 = (1)==(0);
       if ($64) {
        $$0 = 63;
        break L4;
       }
       $65 = HEAP32[$1>>2]|0;
       ___getopt_msg($65,20070,$35,$$050);
       $$0 = 63;
       break L4;
      }
     } while(0);
     $69 = HEAP32[2406]|0;
     $70 = (($69) + 1)|0;
     HEAP32[2406] = $70;
     $71 = (($1) + ($69<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($72) + ($74)|0);
     HEAP32[5168] = $73;
     HEAP32[5167] = 0;
     $$0 = $75;
    } else {
     $$0 = $75;
    }
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&3](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&15](a1|0,a2|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,b0,b0,___stdio_close,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,_deflate_stored,_deflate_fast,_deflate_slow];
var FUNCTION_TABLE_iiii = [b2,b2,b2,b2,b2,___stdio_read,___stdio_seek,___stdout_write,___stdio_write,_sn_write,_zcalloc,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_zcfree,b3,b3,b3,b3];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, _stk_fqchk: _stk_fqchk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__stk_fqchk = asm["_stk_fqchk"]; asm["_stk_fqchk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__stk_fqchk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _stk_fqchk = Module["_stk_fqchk"] = asm["_stk_fqchk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



